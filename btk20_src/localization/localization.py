# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_localization')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_localization')
    _localization = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_localization', [dirname(__file__)])
        except ImportError:
            import _localization
            return _localization
        try:
            _mod = imp.load_module('_localization', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _localization = swig_import_helper()
    del swig_import_helper
else:
    import _localization
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import btk20
from btk20 import stream
oldimport = """

import btk20.stream

"""


def getSrpPhat(delta_f, mFramePerChannel, searchRangeX, searchRangeY, arrgeom, zPos):
    return _localization.getSrpPhat(delta_f, mFramePerChannel, searchRangeX, searchRangeY, arrgeom, zPos)
getSrpPhat = _localization.getSrpPhat

def calcDelays(x, y, z, mpos, delays):
    return _localization.calcDelays(x, y, z, mpos, delays)
calcDelays = _localization.calcDelays

def getDelays(delta_f, mFramePerChannel, searchRange):
    return _localization.getDelays(delta_f, mFramePerChannel, searchRange)
getDelays = _localization.getDelays

def getAzimuth(delta_f, mFramePerChannel, arrgeom, delays):
    return _localization.getAzimuth(delta_f, mFramePerChannel, arrgeom, delays)
getAzimuth = _localization.getAzimuth

def getPlaneWaveSrp(delta_f, mFramePerChannel, searchRangeY, arrgeom):
    return _localization.getPlaneWaveSrp(delta_f, mFramePerChannel, searchRangeY, arrgeom)
getPlaneWaveSrp = _localization.getPlaneWaveSrp

def getGCCRaw(spectralSample, sampleRate, gcc):
    return _localization.getGCCRaw(spectralSample, sampleRate, gcc)
getGCCRaw = _localization.getGCCRaw

def getGCC(spectralSample, sampleRate):
    return _localization.getGCC(spectralSample, sampleRate)
getGCC = _localization.getGCC

def getWindowedGCC(spectralSample, sampleRate, minDelay, maxDelay):
    return _localization.getWindowedGCC(spectralSample, sampleRate, minDelay, maxDelay)
getWindowedGCC = _localization.getWindowedGCC

def getWindowedGCCratio(spectralSample, sampleRate, minDelay, maxDelay):
    return _localization.getWindowedGCCratio(spectralSample, sampleRate, minDelay, maxDelay)
getWindowedGCCratio = _localization.getWindowedGCCratio

def getWindowedGCCdirect(spectralSample, sampleRate, minDelay, maxDelay):
    return _localization.getWindowedGCCdirect(spectralSample, sampleRate, minDelay, maxDelay)
getWindowedGCCdirect = _localization.getWindowedGCCdirect

def getWindowedGCCabs(spectralSample, sampleRate, minDelay, maxDelay):
    return _localization.getWindowedGCCabs(spectralSample, sampleRate, minDelay, maxDelay)
getWindowedGCCabs = _localization.getWindowedGCCabs

def getDynWindowedGCC(spectralSample, sampleRate, minDelay, maxDelay, wMinDelay, wMaxDelay, threshold):
    return _localization.getDynWindowedGCC(spectralSample, sampleRate, minDelay, maxDelay, wMinDelay, wMaxDelay, threshold)
getDynWindowedGCC = _localization.getDynWindowedGCC

def getInterpolation(crossResult, delayPos):
    return _localization.getInterpolation(crossResult, delayPos)
getInterpolation = _localization.getInterpolation

def get3DPosition(yCoord, azimuth1, azimuth2, xPos, zPos):
    return _localization.get3DPosition(yCoord, azimuth1, azimuth2, xPos, zPos)
get3DPosition = _localization.get3DPosition

def get3DPosition_T_shape(arrgeom1, arrayNr1, arrgeom2, arrayNr2, arrgeom3, azimuth1, azimuth2, azimuth3):
    return _localization.get3DPosition_T_shape(arrgeom1, arrayNr1, arrgeom2, arrayNr2, arrgeom3, azimuth1, azimuth2, azimuth3)
get3DPosition_T_shape = _localization.get3DPosition_T_shape

def getGCC_old(spectralSample, delta_f, delays):
    return _localization.getGCC_old(spectralSample, delta_f, delays)
getGCC_old = _localization.getGCC_old

def getLowerTriangMatrix(fullMatrix):
    return _localization.getLowerTriangMatrix(fullMatrix)
getLowerTriangMatrix = _localization.getLowerTriangMatrix

def getXi(D1_2):
    return _localization.getXi(D1_2)
getXi = _localization.getXi
class GCC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GCC, name)
    __repr__ = _swig_repr

    def __init__(self, sampleRate=44100.0, fftLen=2048, nChan=16, pairs=6, alpha=0.95, beta=0.5, q=0.3, interpolate=True, noisereduction=True):
        this = _localization.new_GCC(sampleRate, fftLen, nChan, pairs, alpha, beta, q, interpolate, noisereduction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _localization.delete_GCC
    __del__ = lambda self: None

    def calculate(self, spectralSample1, chan1, spectralSample2, chan2, pair, timestamp, sad=False, smooth=True):
        return _localization.GCC_calculate(self, spectralSample1, chan1, spectralSample2, chan2, pair, timestamp, sad, smooth)

    def findMaximum(self, *args):
        return _localization.GCC_findMaximum(self, *args)

    def getPeakDelay(self):
        return _localization.GCC_getPeakDelay(self)

    def getPeakCorr(self):
        return _localization.GCC_getPeakCorr(self)

    def getRatio(self):
        return _localization.GCC_getRatio(self)

    def getNoisePowerSpectrum(self, chan):
        return _localization.GCC_getNoisePowerSpectrum(self, chan)

    def getNoiseCrossSpectrum(self, pair):
        return _localization.GCC_getNoiseCrossSpectrum(self, pair)

    def getCrossSpectrum(self):
        return _localization.GCC_getCrossSpectrum(self)

    def getCrossCorrelation(self):
        return _localization.GCC_getCrossCorrelation(self)

    def setAlpha(self, alpha):
        return _localization.GCC_setAlpha(self, alpha)

    def getAlpha(self):
        return _localization.GCC_getAlpha(self)
GCC_swigregister = _localization.GCC_swigregister
GCC_swigregister(GCC)

class GCCRaw(GCC):
    __swig_setmethods__ = {}
    for _s in [GCC]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCCRaw, name, value)
    __swig_getmethods__ = {}
    for _s in [GCC]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCCRaw, name)
    __repr__ = _swig_repr

    def __init__(self, sampleRate=44100.0, fftLen=2048, nChan=16, pairs=6, alpha=0.95, beta=0.5, q=0.3, interpolate=True, noisereduction=True):
        this = _localization.new_GCCRaw(sampleRate, fftLen, nChan, pairs, alpha, beta, q, interpolate, noisereduction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _localization.delete_GCCRaw
    __del__ = lambda self: None
GCCRaw_swigregister = _localization.GCCRaw_swigregister
GCCRaw_swigregister(GCCRaw)

class GCCGnnSub(GCC):
    __swig_setmethods__ = {}
    for _s in [GCC]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCCGnnSub, name, value)
    __swig_getmethods__ = {}
    for _s in [GCC]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCCGnnSub, name)
    __repr__ = _swig_repr

    def __init__(self, sampleRate=44100.0, fftLen=2048, nChan=16, pairs=6, alpha=0.95, beta=0.5, q=0.3, interpolate=True, noisereduction=True):
        this = _localization.new_GCCGnnSub(sampleRate, fftLen, nChan, pairs, alpha, beta, q, interpolate, noisereduction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _localization.delete_GCCGnnSub
    __del__ = lambda self: None
GCCGnnSub_swigregister = _localization.GCCGnnSub_swigregister
GCCGnnSub_swigregister(GCCGnnSub)

class GCCPhat(GCC):
    __swig_setmethods__ = {}
    for _s in [GCC]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCCPhat, name, value)
    __swig_getmethods__ = {}
    for _s in [GCC]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCCPhat, name)
    __repr__ = _swig_repr

    def __init__(self, sampleRate=44100.0, fftLen=2048, nChan=16, pairs=6, alpha=0.95, beta=0.5, q=0.3, interpolate=True, noisereduction=True):
        this = _localization.new_GCCPhat(sampleRate, fftLen, nChan, pairs, alpha, beta, q, interpolate, noisereduction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _localization.delete_GCCPhat
    __del__ = lambda self: None
GCCPhat_swigregister = _localization.GCCPhat_swigregister
GCCPhat_swigregister(GCCPhat)

class GCCGnnSubPhat(GCC):
    __swig_setmethods__ = {}
    for _s in [GCC]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCCGnnSubPhat, name, value)
    __swig_getmethods__ = {}
    for _s in [GCC]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCCGnnSubPhat, name)
    __repr__ = _swig_repr

    def __init__(self, sampleRate=44100.0, fftLen=2048, nChan=16, pairs=6, alpha=0.95, beta=0.5, q=0.3, interpolate=True, noisereduction=True):
        this = _localization.new_GCCGnnSubPhat(sampleRate, fftLen, nChan, pairs, alpha, beta, q, interpolate, noisereduction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _localization.delete_GCCGnnSubPhat
    __del__ = lambda self: None
GCCGnnSubPhat_swigregister = _localization.GCCGnnSubPhat_swigregister
GCCGnnSubPhat_swigregister(GCCGnnSubPhat)

class GCCMLRRaw(GCC):
    __swig_setmethods__ = {}
    for _s in [GCC]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCCMLRRaw, name, value)
    __swig_getmethods__ = {}
    for _s in [GCC]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCCMLRRaw, name)
    __repr__ = _swig_repr

    def __init__(self, sampleRate=44100.0, fftLen=2048, nChan=16, pairs=6, alpha=0.95, beta=0.5, q=0.3, interpolate=True, noisereduction=True):
        this = _localization.new_GCCMLRRaw(sampleRate, fftLen, nChan, pairs, alpha, beta, q, interpolate, noisereduction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _localization.delete_GCCMLRRaw
    __del__ = lambda self: None
GCCMLRRaw_swigregister = _localization.GCCMLRRaw_swigregister
GCCMLRRaw_swigregister(GCCMLRRaw)

class GCCMLRGnnSub(GCC):
    __swig_setmethods__ = {}
    for _s in [GCC]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCCMLRGnnSub, name, value)
    __swig_getmethods__ = {}
    for _s in [GCC]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCCMLRGnnSub, name)
    __repr__ = _swig_repr

    def __init__(self, sampleRate=44100.0, fftLen=2048, nChan=16, pairs=6, alpha=0.95, beta=0.5, q=0.3, interpolate=True, noisereduction=True):
        this = _localization.new_GCCMLRGnnSub(sampleRate, fftLen, nChan, pairs, alpha, beta, q, interpolate, noisereduction)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _localization.delete_GCCMLRGnnSub
    __del__ = lambda self: None
GCCMLRGnnSub_swigregister = _localization.GCCMLRGnnSub_swigregister
GCCMLRGnnSub_swigregister(GCCMLRGnnSub)

class SearchGridBuilderPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchGridBuilderPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchGridBuilderPtr, name)
    __repr__ = _swig_repr

    def __init__(self, nChan, isFarField, samplingFreq=16000):
        this = _localization.new_SearchGridBuilderPtr(nChan, isFarField, samplingFreq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _localization.SearchGridBuilderPtr___deref__(self)
    __swig_destroy__ = _localization.delete_SearchGridBuilderPtr
    __del__ = lambda self: None

    def nextSearchGrid(self):
        return _localization.SearchGridBuilderPtr_nextSearchGrid(self)

    def getTimeDelays(self):
        return _localization.SearchGridBuilderPtr_getTimeDelays(self)

    def getSearchPosition(self):
        return _localization.SearchGridBuilderPtr_getSearchPosition(self)

    def maxTimeDelay(self):
        return _localization.SearchGridBuilderPtr_maxTimeDelay(self)

    def chanN(self):
        return _localization.SearchGridBuilderPtr_chanN(self)

    def samplingFrequency(self):
        return _localization.SearchGridBuilderPtr_samplingFrequency(self)

    def reset(self):
        return _localization.SearchGridBuilderPtr_reset(self)
SearchGridBuilderPtr_swigregister = _localization.SearchGridBuilderPtr_swigregister
SearchGridBuilderPtr_swigregister(SearchGridBuilderPtr)

class SGB4LinearArrayPtr(SearchGridBuilderPtr):
    __swig_setmethods__ = {}
    for _s in [SearchGridBuilderPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGB4LinearArrayPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchGridBuilderPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGB4LinearArrayPtr, name)
    __repr__ = _swig_repr

    def __init__(self, nChan, isFarField, samplingFreq=16000):
        this = _localization.new_SGB4LinearArrayPtr(nChan, isFarField, samplingFreq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _localization.SGB4LinearArrayPtr___deref__(self)
    __swig_destroy__ = _localization.delete_SGB4LinearArrayPtr
    __del__ = lambda self: None

    def setDistanceBtwMicrophones(self, distance):
        return _localization.SGB4LinearArrayPtr_setDistanceBtwMicrophones(self, distance)

    def setPositionsOfMicrophones(self, mpos):
        return _localization.SGB4LinearArrayPtr_setPositionsOfMicrophones(self, mpos)

    def nextSearchGrid(self):
        return _localization.SGB4LinearArrayPtr_nextSearchGrid(self)

    def getTimeDelays(self):
        return _localization.SGB4LinearArrayPtr_getTimeDelays(self)

    def getSearchPosition(self):
        return _localization.SGB4LinearArrayPtr_getSearchPosition(self)

    def maxTimeDelay(self):
        return _localization.SGB4LinearArrayPtr_maxTimeDelay(self)

    def chanN(self):
        return _localization.SGB4LinearArrayPtr_chanN(self)

    def samplingFrequency(self):
        return _localization.SGB4LinearArrayPtr_samplingFrequency(self)

    def reset(self):
        return _localization.SGB4LinearArrayPtr_reset(self)
SGB4LinearArrayPtr_swigregister = _localization.SGB4LinearArrayPtr_swigregister
SGB4LinearArrayPtr_swigregister(SGB4LinearArrayPtr)

class SGB4CircularArrayPtr(SearchGridBuilderPtr):
    __swig_setmethods__ = {}
    for _s in [SearchGridBuilderPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGB4CircularArrayPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchGridBuilderPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGB4CircularArrayPtr, name)
    __repr__ = _swig_repr

    def __init__(self, nChan, isFarField, samplingFreq=16000):
        this = _localization.new_SGB4CircularArrayPtr(nChan, isFarField, samplingFreq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _localization.SGB4CircularArrayPtr___deref__(self)
    __swig_destroy__ = _localization.delete_SGB4CircularArrayPtr
    __del__ = lambda self: None

    def setRadius(self, radius, height=0.0):
        return _localization.SGB4CircularArrayPtr_setRadius(self, radius, height)

    def nextSearchGrid(self):
        return _localization.SGB4CircularArrayPtr_nextSearchGrid(self)

    def getTimeDelays(self):
        return _localization.SGB4CircularArrayPtr_getTimeDelays(self)

    def getSearchPosition(self):
        return _localization.SGB4CircularArrayPtr_getSearchPosition(self)

    def maxTimeDelay(self):
        return _localization.SGB4CircularArrayPtr_maxTimeDelay(self)

    def chanN(self):
        return _localization.SGB4CircularArrayPtr_chanN(self)

    def samplingFrequency(self):
        return _localization.SGB4CircularArrayPtr_samplingFrequency(self)

    def reset(self):
        return _localization.SGB4CircularArrayPtr_reset(self)
SGB4CircularArrayPtr_swigregister = _localization.SGB4CircularArrayPtr_swigregister
SGB4CircularArrayPtr_swigregister(SGB4CircularArrayPtr)

class MCCLocalizerPtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCCLocalizerPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCCLocalizerPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _localization.new_MCCLocalizerPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _localization.MCCLocalizerPtr___iter__(self)

    def __deref__(self):
        return _localization.MCCLocalizerPtr___deref__(self)
    __swig_destroy__ = _localization.delete_MCCLocalizerPtr
    __del__ = lambda self: None

    def next(self, frameX=-5):
        return _localization.MCCLocalizerPtr_next(self, frameX)

    def reset(self):
        return _localization.MCCLocalizerPtr_reset(self)

    def setChannel(self, chan):
        return _localization.MCCLocalizerPtr_setChannel(self, chan)

    def getDelayedSample(self, chanX):
        return _localization.MCCLocalizerPtr_getDelayedSample(self, chanX)

    def getMaxMCCC(self):
        return _localization.MCCLocalizerPtr_getMaxMCCC(self)

    def getPosition(self):
        return _localization.MCCLocalizerPtr_getPosition(self)

    def getNthBestDelayedSample(self, nth, chanX):
        return _localization.MCCLocalizerPtr_getNthBestDelayedSample(self, nth, chanX)

    def getNthBestMCCC(self, nth):
        return _localization.MCCLocalizerPtr_getNthBestMCCC(self, nth)

    def getNthBestPosition(self, nth):
        return _localization.MCCLocalizerPtr_getNthBestPosition(self, nth)

    def getEigenValues(self):
        return _localization.MCCLocalizerPtr_getEigenValues(self)

    def getR(self):
        return _localization.MCCLocalizerPtr_getR(self)

    def name(self):
        return _localization.MCCLocalizerPtr_name(self)

    def size(self):
        return _localization.MCCLocalizerPtr_size(self)

    def current(self):
        return _localization.MCCLocalizerPtr_current(self)
MCCLocalizerPtr_swigregister = _localization.MCCLocalizerPtr_swigregister
MCCLocalizerPtr_swigregister(MCCLocalizerPtr)

class MCCCalculatorPtr(MCCLocalizerPtr):
    __swig_setmethods__ = {}
    for _s in [MCCLocalizerPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCCCalculatorPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [MCCLocalizerPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCCCalculatorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _localization.new_MCCCalculatorPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _localization.MCCCalculatorPtr___iter__(self)

    def __deref__(self):
        return _localization.MCCCalculatorPtr___deref__(self)
    __swig_destroy__ = _localization.delete_MCCCalculatorPtr
    __del__ = lambda self: None

    def setTimeDelays(self, delays):
        return _localization.MCCCalculatorPtr_setTimeDelays(self, delays)

    def getMCCC(self):
        return _localization.MCCCalculatorPtr_getMCCC(self)

    def getCostV(self):
        return _localization.MCCCalculatorPtr_getCostV(self)

    def next(self, frameX=-5):
        return _localization.MCCCalculatorPtr_next(self, frameX)

    def reset(self):
        return _localization.MCCCalculatorPtr_reset(self)

    def setChannel(self, chan):
        return _localization.MCCCalculatorPtr_setChannel(self, chan)

    def getDelayedSample(self, chanX):
        return _localization.MCCCalculatorPtr_getDelayedSample(self, chanX)

    def getMaxMCCC(self):
        return _localization.MCCCalculatorPtr_getMaxMCCC(self)

    def getPosition(self):
        return _localization.MCCCalculatorPtr_getPosition(self)

    def getNthBestDelayedSample(self, nth, chanX):
        return _localization.MCCCalculatorPtr_getNthBestDelayedSample(self, nth, chanX)

    def getNthBestMCCC(self, nth):
        return _localization.MCCCalculatorPtr_getNthBestMCCC(self, nth)

    def getNthBestPosition(self, nth):
        return _localization.MCCCalculatorPtr_getNthBestPosition(self, nth)

    def getEigenValues(self):
        return _localization.MCCCalculatorPtr_getEigenValues(self)

    def getR(self):
        return _localization.MCCCalculatorPtr_getR(self)

    def name(self):
        return _localization.MCCCalculatorPtr_name(self)

    def size(self):
        return _localization.MCCCalculatorPtr_size(self)

    def current(self):
        return _localization.MCCCalculatorPtr_current(self)
MCCCalculatorPtr_swigregister = _localization.MCCCalculatorPtr_swigregister
MCCCalculatorPtr_swigregister(MCCCalculatorPtr)

class RMCCLocalizerPtr(MCCLocalizerPtr):
    __swig_setmethods__ = {}
    for _s in [MCCLocalizerPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMCCLocalizerPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [MCCLocalizerPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RMCCLocalizerPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _localization.new_RMCCLocalizerPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _localization.RMCCLocalizerPtr___iter__(self)

    def __deref__(self):
        return _localization.RMCCLocalizerPtr___deref__(self)
    __swig_destroy__ = _localization.delete_RMCCLocalizerPtr
    __del__ = lambda self: None

    def next(self, frameX=-5):
        return _localization.RMCCLocalizerPtr_next(self, frameX)

    def reset(self):
        return _localization.RMCCLocalizerPtr_reset(self)

    def setChannel(self, chan):
        return _localization.RMCCLocalizerPtr_setChannel(self, chan)

    def getDelayedSample(self, chanX):
        return _localization.RMCCLocalizerPtr_getDelayedSample(self, chanX)

    def getMaxMCCC(self):
        return _localization.RMCCLocalizerPtr_getMaxMCCC(self)

    def getPosition(self):
        return _localization.RMCCLocalizerPtr_getPosition(self)

    def getNthBestDelayedSample(self, nth, chanX):
        return _localization.RMCCLocalizerPtr_getNthBestDelayedSample(self, nth, chanX)

    def getNthBestMCCC(self, nth):
        return _localization.RMCCLocalizerPtr_getNthBestMCCC(self, nth)

    def getNthBestPosition(self, nth):
        return _localization.RMCCLocalizerPtr_getNthBestPosition(self, nth)

    def getEigenValues(self):
        return _localization.RMCCLocalizerPtr_getEigenValues(self)

    def getR(self):
        return _localization.RMCCLocalizerPtr_getR(self)

    def name(self):
        return _localization.RMCCLocalizerPtr_name(self)

    def size(self):
        return _localization.RMCCLocalizerPtr_size(self)

    def current(self):
        return _localization.RMCCLocalizerPtr_current(self)
RMCCLocalizerPtr_swigregister = _localization.RMCCLocalizerPtr_swigregister
RMCCLocalizerPtr_swigregister(RMCCLocalizerPtr)

# This file is compatible with both classic and new-style classes.


