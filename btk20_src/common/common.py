# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_common')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_common')
    _common = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_common', [dirname(__file__)])
        except ImportError:
            import _common
            return _common
        try:
            _mod = imp.load_module('_common', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _common = swig_import_helper()
    del swig_import_helper
else:
    import _common
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def init_mach_ind_io():
    return _common.init_mach_ind_io()
init_mach_ind_io = _common.init_mach_ind_io

def float_to_ubyte(f):
    return _common.float_to_ubyte(f)
float_to_ubyte = _common.float_to_ubyte

def ubyte_to_float(u):
    return _common.ubyte_to_float(u)
ubyte_to_float = _common.ubyte_to_float

def read_float(fp):
    return _common.read_float(fp)
read_float = _common.read_float

def read_floats(fp, whereto, count):
    return _common.read_floats(fp, whereto, count)
read_floats = _common.read_floats

def read_floatbyte(fp):
    return _common.read_floatbyte(fp)
read_floatbyte = _common.read_floatbyte

def read_floatbytes(fp, whereto, count):
    return _common.read_floatbytes(fp, whereto, count)
read_floatbytes = _common.read_floatbytes

def read_int(fp):
    return _common.read_int(fp)
read_int = _common.read_int

def read_ints(fp, whereto, count):
    return _common.read_ints(fp, whereto, count)
read_ints = _common.read_ints

def read_short(fp):
    return _common.read_short(fp)
read_short = _common.read_short

def read_shorts(fp, whereto, count):
    return _common.read_shorts(fp, whereto, count)
read_shorts = _common.read_shorts

def read_string(f, str):
    return _common.read_string(f, str)
read_string = _common.read_string

def read_scaled_vectors(fp, whereto, coeffNP, vectorNP):
    return _common.read_scaled_vectors(fp, whereto, coeffNP, vectorNP)
read_scaled_vectors = _common.read_scaled_vectors

def read_scaled_vectors_range(fp, whereto, coeffNP, vectorNP, arg5, to):
    return _common.read_scaled_vectors_range(fp, whereto, coeffNP, vectorNP, arg5, to)
read_scaled_vectors_range = _common.read_scaled_vectors_range

def write_scaled_vectors(fp, wherefrom, coeffN, vectorN):
    return _common.write_scaled_vectors(fp, wherefrom, coeffN, vectorN)
write_scaled_vectors = _common.write_scaled_vectors

def write_float(fp, f):
    return _common.write_float(fp, f)
write_float = _common.write_float

def write_floats(fp, wherefrom, count):
    return _common.write_floats(fp, wherefrom, count)
write_floats = _common.write_floats

def write_floatbyte(fp, f):
    return _common.write_floatbyte(fp, f)
write_floatbyte = _common.write_floatbyte

def write_floatbytes(fp, wherefrom, count):
    return _common.write_floatbytes(fp, wherefrom, count)
write_floatbytes = _common.write_floatbytes

def write_int(fp, i):
    return _common.write_int(fp, i)
write_int = _common.write_int

def write_ints(fp, wherefrom, count):
    return _common.write_ints(fp, wherefrom, count)
write_ints = _common.write_ints

def write_short(fp, s):
    return _common.write_short(fp, s)
write_short = _common.write_short

def write_shorts(fp, wherefrom, count):
    return _common.write_shorts(fp, wherefrom, count)
write_shorts = _common.write_shorts

def write_string(f, str):
    return _common.write_string(f, str)
write_string = _common.write_string

def set_machine(new_machine):
    return _common.set_machine(new_machine)
set_machine = _common.set_machine

def check_byte_swap(buf, bufN):
    return _common.check_byte_swap(buf, bufN)
check_byte_swap = _common.check_byte_swap

def buf_byte_swap(buf, bufN):
    return _common.buf_byte_swap(buf, bufN)
buf_byte_swap = _common.buf_byte_swap

def short_memorychange(buf, bufN):
    return _common.short_memorychange(buf, bufN)
short_memorychange = _common.short_memorychange

def float_memorychange(buf, bufN):
    return _common.float_memorychange(buf, bufN)
float_memorychange = _common.float_memorychange

def int_memorychange(buf, bufN):
    return _common.int_memorychange(buf, bufN)
int_memorychange = _common.int_memorychange

def change_short(x):
    return _common.change_short(x)
change_short = _common.change_short

def change_int(x):
    return _common.change_int(x)
change_int = _common.change_int

def change_float(x):
    return _common.change_float(x)
change_float = _common.change_float

def btk_fopen(filename, mode):
    return _common.btk_fopen(filename, mode)
btk_fopen = _common.btk_fopen

def btk_fclose(filename, fp):
    return _common.btk_fclose(filename, fp)
btk_fclose = _common.btk_fclose
# This file is compatible with both classic and new-style classes.


