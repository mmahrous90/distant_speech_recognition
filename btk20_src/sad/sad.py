# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sad')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sad')
    _sad = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sad', [dirname(__file__)])
        except ImportError:
            import _sad
            return _sad
        try:
            _mod = imp.load_module('_sad', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sad = swig_import_helper()
    del swig_import_helper
else:
    import _sad
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import btk20
from btk20 import stream
oldimport = """

import btk20.stream

"""

class NeuralNetVAD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuralNetVAD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuralNetVAD, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sad.delete_NeuralNetVAD
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.NeuralNetVAD_next(self, frame_no)

    def reset(self):
        return _sad.NeuralNetVAD_reset(self)

    def read(self, neuralNetFile):
        return _sad.NeuralNetVAD_read(self, neuralNetFile)
NeuralNetVAD_swigregister = _sad.NeuralNetVAD_swigregister
NeuralNetVAD_swigregister(NeuralNetVAD)

class NeuralNetVADPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuralNetVADPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuralNetVADPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_NeuralNetVADPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.NeuralNetVADPtr___iter__(self)

    def __deref__(self):
        return _sad.NeuralNetVADPtr___deref__(self)
    __swig_destroy__ = _sad.delete_NeuralNetVADPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.NeuralNetVADPtr_next(self, frame_no)

    def reset(self):
        return _sad.NeuralNetVADPtr_reset(self)

    def read(self, neuralNetFile):
        return _sad.NeuralNetVADPtr_read(self, neuralNetFile)
NeuralNetVADPtr_swigregister = _sad.NeuralNetVADPtr_swigregister
NeuralNetVADPtr_swigregister(NeuralNetVADPtr)

class VADPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VADPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VADPtr, name)
    __repr__ = _swig_repr

    def __iter__(self):
        return _sad.VADPtr___iter__(self)

    def __deref__(self):
        return _sad.VADPtr___deref__(self)

    def __init__(self):
        this = _sad.new_VADPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sad.delete_VADPtr
    __del__ = lambda self: None

    def next(self):
        return _sad.VADPtr_next(self)

    def reset(self):
        return _sad.VADPtr_reset(self)

    def frame(self):
        return _sad.VADPtr_frame(self)

    def next_speaker(self):
        return _sad.VADPtr_next_speaker(self)
VADPtr_swigregister = _sad.VADPtr_swigregister
VADPtr_swigregister(VADPtr)

class SimpleEnergyVADPtr(VADPtr):
    __swig_setmethods__ = {}
    for _s in [VADPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleEnergyVADPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [VADPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleEnergyVADPtr, name)
    __repr__ = _swig_repr

    def __init__(self, samp, threshold, gamma=0.98):
        this = _sad.new_SimpleEnergyVADPtr(samp, threshold, gamma)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.SimpleEnergyVADPtr___iter__(self)

    def __deref__(self):
        return _sad.SimpleEnergyVADPtr___deref__(self)
    __swig_destroy__ = _sad.delete_SimpleEnergyVADPtr
    __del__ = lambda self: None

    def next(self):
        return _sad.SimpleEnergyVADPtr_next(self)

    def reset(self):
        return _sad.SimpleEnergyVADPtr_reset(self)

    def next_speaker(self):
        return _sad.SimpleEnergyVADPtr_next_speaker(self)

    def frame(self):
        return _sad.SimpleEnergyVADPtr_frame(self)
SimpleEnergyVADPtr_swigregister = _sad.SimpleEnergyVADPtr_swigregister
SimpleEnergyVADPtr_swigregister(SimpleEnergyVADPtr)

class SimpleLikelihoodRatioVADPtr(VADPtr):
    __swig_setmethods__ = {}
    for _s in [VADPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleLikelihoodRatioVADPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [VADPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleLikelihoodRatioVADPtr, name)
    __repr__ = _swig_repr

    def __init__(self, samp, threshold=0.0, alpha=0.99):
        this = _sad.new_SimpleLikelihoodRatioVADPtr(samp, threshold, alpha)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.SimpleLikelihoodRatioVADPtr___iter__(self)

    def __deref__(self):
        return _sad.SimpleLikelihoodRatioVADPtr___deref__(self)
    __swig_destroy__ = _sad.delete_SimpleLikelihoodRatioVADPtr
    __del__ = lambda self: None

    def next(self):
        return _sad.SimpleLikelihoodRatioVADPtr_next(self)

    def reset(self):
        return _sad.SimpleLikelihoodRatioVADPtr_reset(self)

    def next_speaker(self):
        return _sad.SimpleLikelihoodRatioVADPtr_next_speaker(self)

    def set_variance(self, variance):
        return _sad.SimpleLikelihoodRatioVADPtr_set_variance(self, variance)

    def frame(self):
        return _sad.SimpleLikelihoodRatioVADPtr_frame(self)
SimpleLikelihoodRatioVADPtr_swigregister = _sad.SimpleLikelihoodRatioVADPtr_swigregister
SimpleLikelihoodRatioVADPtr_swigregister(SimpleLikelihoodRatioVADPtr)

class EnergyVADFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyVADFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyVADFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_EnergyVADFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.EnergyVADFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.EnergyVADFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_EnergyVADFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.EnergyVADFeaturePtr_next(self)

    def reset(self):
        return _sad.EnergyVADFeaturePtr_reset(self)

    def next_speaker(self):
        return _sad.EnergyVADFeaturePtr_next_speaker(self)

    def name(self):
        return _sad.EnergyVADFeaturePtr_name(self)

    def size(self):
        return _sad.EnergyVADFeaturePtr_size(self)

    def is_end(self):
        return _sad.EnergyVADFeaturePtr_is_end(self)

    def current(self):
        return _sad.EnergyVADFeaturePtr_current(self)
EnergyVADFeaturePtr_swigregister = _sad.EnergyVADFeaturePtr_swigregister
EnergyVADFeaturePtr_swigregister(EnergyVADFeaturePtr)

class VADMetricPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VADMetricPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VADMetricPtr, name)
    __repr__ = _swig_repr

    def __iter__(self):
        return _sad.VADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.VADMetricPtr___deref__(self)

    def __init__(self):
        this = _sad.new_VADMetricPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sad.delete_VADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.VADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.VADMetricPtr_reset(self)

    def score(self):
        return _sad.VADMetricPtr_score(self)

    def next_speaker(self):
        return _sad.VADMetricPtr_next_speaker(self)
VADMetricPtr_swigregister = _sad.VADMetricPtr_swigregister
VADMetricPtr_swigregister(VADMetricPtr)

class EnergyVADMetricPtr(VADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_EnergyVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.EnergyVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.EnergyVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_EnergyVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.EnergyVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.EnergyVADMetricPtr_reset(self)

    def next_speaker(self):
        return _sad.EnergyVADMetricPtr_next_speaker(self)

    def energy_percentile(self, percentile=50.0):
        return _sad.EnergyVADMetricPtr_energy_percentile(self, percentile)

    def score(self):
        return _sad.EnergyVADMetricPtr_score(self)
EnergyVADMetricPtr_swigregister = _sad.EnergyVADMetricPtr_swigregister
EnergyVADMetricPtr_swigregister(EnergyVADMetricPtr)

class FloatMultiChannelVADMetricPtr(VADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMultiChannelVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMultiChannelVADMetricPtr, name)
    __repr__ = _swig_repr

    def __iter__(self):
        return _sad.FloatMultiChannelVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.FloatMultiChannelVADMetricPtr___deref__(self)

    def __init__(self):
        this = _sad.new_FloatMultiChannelVADMetricPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sad.delete_FloatMultiChannelVADMetricPtr
    __del__ = lambda self: None
FloatMultiChannelVADMetricPtr_swigregister = _sad.FloatMultiChannelVADMetricPtr_swigregister
FloatMultiChannelVADMetricPtr_swigregister(FloatMultiChannelVADMetricPtr)

class ComplexMultiChannelVADMetricPtr(VADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexMultiChannelVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexMultiChannelVADMetricPtr, name)
    __repr__ = _swig_repr

    def __iter__(self):
        return _sad.ComplexMultiChannelVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.ComplexMultiChannelVADMetricPtr___deref__(self)

    def __init__(self):
        this = _sad.new_ComplexMultiChannelVADMetricPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sad.delete_ComplexMultiChannelVADMetricPtr
    __del__ = lambda self: None
ComplexMultiChannelVADMetricPtr_swigregister = _sad.ComplexMultiChannelVADMetricPtr_swigregister
ComplexMultiChannelVADMetricPtr_swigregister(ComplexMultiChannelVADMetricPtr)

class PowerSpectrumVADMetricPtr(FloatMultiChannelVADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [FloatMultiChannelVADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerSpectrumVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatMultiChannelVADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PowerSpectrumVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_PowerSpectrumVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.PowerSpectrumVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.PowerSpectrumVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_PowerSpectrumVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.PowerSpectrumVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.PowerSpectrumVADMetricPtr_reset(self)

    def next_speaker(self):
        return _sad.PowerSpectrumVADMetricPtr_next_speaker(self)

    def get_metrics(self):
        return _sad.PowerSpectrumVADMetricPtr_get_metrics(self)

    def set_E0(self, E0):
        return _sad.PowerSpectrumVADMetricPtr_set_E0(self, E0)

    def clear_channel(self):
        return _sad.PowerSpectrumVADMetricPtr_clear_channel(self)

    def set_channel(self, chan):
        return _sad.PowerSpectrumVADMetricPtr_set_channel(self, chan)

    def score(self):
        return _sad.PowerSpectrumVADMetricPtr_score(self)
PowerSpectrumVADMetricPtr_swigregister = _sad.PowerSpectrumVADMetricPtr_swigregister
PowerSpectrumVADMetricPtr_swigregister(PowerSpectrumVADMetricPtr)

class NormalizedEnergyMetricPtr(PowerSpectrumVADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [PowerSpectrumVADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalizedEnergyMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [PowerSpectrumVADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalizedEnergyMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_NormalizedEnergyMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.NormalizedEnergyMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.NormalizedEnergyMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_NormalizedEnergyMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.NormalizedEnergyMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.NormalizedEnergyMetricPtr_reset(self)

    def set_E0(self, E0):
        return _sad.NormalizedEnergyMetricPtr_set_E0(self, E0)

    def next_speaker(self):
        return _sad.NormalizedEnergyMetricPtr_next_speaker(self)

    def get_metrics(self):
        return _sad.NormalizedEnergyMetricPtr_get_metrics(self)

    def clear_channel(self):
        return _sad.NormalizedEnergyMetricPtr_clear_channel(self)

    def set_channel(self, chan):
        return _sad.NormalizedEnergyMetricPtr_set_channel(self, chan)

    def score(self):
        return _sad.NormalizedEnergyMetricPtr_score(self)
NormalizedEnergyMetricPtr_swigregister = _sad.NormalizedEnergyMetricPtr_swigregister
NormalizedEnergyMetricPtr_swigregister(NormalizedEnergyMetricPtr)

class CCCVADMetricPtr(ComplexMultiChannelVADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [ComplexMultiChannelVADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCCVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [ComplexMultiChannelVADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCCVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_CCCVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.CCCVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.CCCVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_CCCVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.CCCVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.CCCVADMetricPtr_reset(self)

    def next_speaker(self):
        return _sad.CCCVADMetricPtr_next_speaker(self)

    def set_NCand(self, nCand):
        return _sad.CCCVADMetricPtr_set_NCand(self, nCand)

    def set_threshold(self, threshold):
        return _sad.CCCVADMetricPtr_set_threshold(self, threshold)

    def get_metrics(self):
        return _sad.CCCVADMetricPtr_get_metrics(self)

    def clear_channel(self):
        return _sad.CCCVADMetricPtr_clear_channel(self)

    def set_channel(self, chan):
        return _sad.CCCVADMetricPtr_set_channel(self, chan)

    def score(self):
        return _sad.CCCVADMetricPtr_score(self)
CCCVADMetricPtr_swigregister = _sad.CCCVADMetricPtr_swigregister
CCCVADMetricPtr_swigregister(CCCVADMetricPtr)

class TSPSVADMetricPtr(PowerSpectrumVADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [PowerSpectrumVADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSPSVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [PowerSpectrumVADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TSPSVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_TSPSVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.TSPSVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.TSPSVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_TSPSVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.TSPSVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.TSPSVADMetricPtr_reset(self)

    def set_E0(self, E0):
        return _sad.TSPSVADMetricPtr_set_E0(self, E0)

    def next_speaker(self):
        return _sad.TSPSVADMetricPtr_next_speaker(self)

    def get_metrics(self):
        return _sad.TSPSVADMetricPtr_get_metrics(self)

    def clear_channel(self):
        return _sad.TSPSVADMetricPtr_clear_channel(self)

    def set_channel(self, chan):
        return _sad.TSPSVADMetricPtr_set_channel(self, chan)

    def score(self):
        return _sad.TSPSVADMetricPtr_score(self)
TSPSVADMetricPtr_swigregister = _sad.TSPSVADMetricPtr_swigregister
TSPSVADMetricPtr_swigregister(TSPSVADMetricPtr)

class NegentropyVADMetricPtr(VADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NegentropyVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NegentropyVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_NegentropyVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.NegentropyVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.NegentropyVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_NegentropyVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.NegentropyVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.NegentropyVADMetricPtr_reset(self)

    def next_speaker(self):
        return _sad.NegentropyVADMetricPtr_next_speaker(self)

    def calc_negentropy(self, frame_no):
        return _sad.NegentropyVADMetricPtr_calc_negentropy(self, frame_no)

    def score(self):
        return _sad.NegentropyVADMetricPtr_score(self)
NegentropyVADMetricPtr_swigregister = _sad.NegentropyVADMetricPtr_swigregister
NegentropyVADMetricPtr_swigregister(NegentropyVADMetricPtr)

class MutualInformationVADMetricPtr(NegentropyVADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [NegentropyVADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MutualInformationVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [NegentropyVADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MutualInformationVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_MutualInformationVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.MutualInformationVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.MutualInformationVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_MutualInformationVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.MutualInformationVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.MutualInformationVADMetricPtr_reset(self)

    def next_speaker(self):
        return _sad.MutualInformationVADMetricPtr_next_speaker(self)

    def calc_mutual_information(self, frame_no):
        return _sad.MutualInformationVADMetricPtr_calc_mutual_information(self, frame_no)

    def calc_negentropy(self, frame_no):
        return _sad.MutualInformationVADMetricPtr_calc_negentropy(self, frame_no)

    def score(self):
        return _sad.MutualInformationVADMetricPtr_score(self)
MutualInformationVADMetricPtr_swigregister = _sad.MutualInformationVADMetricPtr_swigregister
MutualInformationVADMetricPtr_swigregister(MutualInformationVADMetricPtr)

class LikelihoodRatioVADMetricPtr(NegentropyVADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [NegentropyVADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LikelihoodRatioVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [NegentropyVADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LikelihoodRatioVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_LikelihoodRatioVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.LikelihoodRatioVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.LikelihoodRatioVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_LikelihoodRatioVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.LikelihoodRatioVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.LikelihoodRatioVADMetricPtr_reset(self)

    def next_speaker(self):
        return _sad.LikelihoodRatioVADMetricPtr_next_speaker(self)

    def calc_likelihood_ratio(self, frame_no):
        return _sad.LikelihoodRatioVADMetricPtr_calc_likelihood_ratio(self, frame_no)

    def calc_negentropy(self, frame_no):
        return _sad.LikelihoodRatioVADMetricPtr_calc_negentropy(self, frame_no)

    def score(self):
        return _sad.LikelihoodRatioVADMetricPtr_score(self)
LikelihoodRatioVADMetricPtr_swigregister = _sad.LikelihoodRatioVADMetricPtr_swigregister
LikelihoodRatioVADMetricPtr_swigregister(LikelihoodRatioVADMetricPtr)

class LowFullBandEnergyRatioVADMetric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LowFullBandEnergyRatioVADMetric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LowFullBandEnergyRatioVADMetric, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sad.new_LowFullBandEnergyRatioVADMetric(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sad.delete_LowFullBandEnergyRatioVADMetric
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.LowFullBandEnergyRatioVADMetric_next(self, frame_no)

    def reset(self):
        return _sad.LowFullBandEnergyRatioVADMetric_reset(self)

    def next_speaker(self):
        return _sad.LowFullBandEnergyRatioVADMetric_next_speaker(self)
LowFullBandEnergyRatioVADMetric_swigregister = _sad.LowFullBandEnergyRatioVADMetric_swigregister
LowFullBandEnergyRatioVADMetric_swigregister(LowFullBandEnergyRatioVADMetric)

class LowFullBandEnergyRatioVADMetricPtr(VADMetricPtr):
    __swig_setmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LowFullBandEnergyRatioVADMetricPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [VADMetricPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LowFullBandEnergyRatioVADMetricPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_LowFullBandEnergyRatioVADMetricPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.LowFullBandEnergyRatioVADMetricPtr___iter__(self)

    def __deref__(self):
        return _sad.LowFullBandEnergyRatioVADMetricPtr___deref__(self)
    __swig_destroy__ = _sad.delete_LowFullBandEnergyRatioVADMetricPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _sad.LowFullBandEnergyRatioVADMetricPtr_next(self, frame_no)

    def reset(self):
        return _sad.LowFullBandEnergyRatioVADMetricPtr_reset(self)

    def next_speaker(self):
        return _sad.LowFullBandEnergyRatioVADMetricPtr_next_speaker(self)

    def score(self):
        return _sad.LowFullBandEnergyRatioVADMetricPtr_score(self)
LowFullBandEnergyRatioVADMetricPtr_swigregister = _sad.LowFullBandEnergyRatioVADMetricPtr_swigregister
LowFullBandEnergyRatioVADMetricPtr_swigregister(LowFullBandEnergyRatioVADMetricPtr)

class HangoverVADFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HangoverVADFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HangoverVADFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_HangoverVADFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.HangoverVADFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.HangoverVADFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_HangoverVADFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.HangoverVADFeaturePtr_next(self)

    def reset(self):
        return _sad.HangoverVADFeaturePtr_reset(self)

    def next_speaker(self):
        return _sad.HangoverVADFeaturePtr_next_speaker(self)

    def prefixN(self):
        return _sad.HangoverVADFeaturePtr_prefixN(self)

    def name(self):
        return _sad.HangoverVADFeaturePtr_name(self)

    def size(self):
        return _sad.HangoverVADFeaturePtr_size(self)

    def is_end(self):
        return _sad.HangoverVADFeaturePtr_is_end(self)

    def current(self):
        return _sad.HangoverVADFeaturePtr_current(self)
HangoverVADFeaturePtr_swigregister = _sad.HangoverVADFeaturePtr_swigregister
HangoverVADFeaturePtr_swigregister(HangoverVADFeaturePtr)

class HangoverMIVADFeaturePtr(HangoverVADFeaturePtr):
    __swig_setmethods__ = {}
    for _s in [HangoverVADFeaturePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HangoverMIVADFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [HangoverVADFeaturePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HangoverMIVADFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_HangoverMIVADFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.HangoverMIVADFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.HangoverMIVADFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_HangoverMIVADFeaturePtr
    __del__ = lambda self: None

    def decision_metric(self):
        return _sad.HangoverMIVADFeaturePtr_decision_metric(self)

    def next(self):
        return _sad.HangoverMIVADFeaturePtr_next(self)

    def reset(self):
        return _sad.HangoverMIVADFeaturePtr_reset(self)

    def next_speaker(self):
        return _sad.HangoverMIVADFeaturePtr_next_speaker(self)

    def prefixN(self):
        return _sad.HangoverMIVADFeaturePtr_prefixN(self)

    def name(self):
        return _sad.HangoverMIVADFeaturePtr_name(self)

    def size(self):
        return _sad.HangoverMIVADFeaturePtr_size(self)

    def is_end(self):
        return _sad.HangoverMIVADFeaturePtr_is_end(self)

    def current(self):
        return _sad.HangoverMIVADFeaturePtr_current(self)
HangoverMIVADFeaturePtr_swigregister = _sad.HangoverMIVADFeaturePtr_swigregister
HangoverMIVADFeaturePtr_swigregister(HangoverMIVADFeaturePtr)

class HangoverMultiStageVADFeaturePtr(HangoverVADFeaturePtr):
    __swig_setmethods__ = {}
    for _s in [HangoverVADFeaturePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HangoverMultiStageVADFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [HangoverVADFeaturePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HangoverMultiStageVADFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_HangoverMultiStageVADFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.HangoverMultiStageVADFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.HangoverMultiStageVADFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_HangoverMultiStageVADFeaturePtr
    __del__ = lambda self: None

    def decision_metric(self):
        return _sad.HangoverMultiStageVADFeaturePtr_decision_metric(self)

    def set_metric(self, metricPtr, threshold):
        return _sad.HangoverMultiStageVADFeaturePtr_set_metric(self, metricPtr, threshold)

    def next(self):
        return _sad.HangoverMultiStageVADFeaturePtr_next(self)

    def reset(self):
        return _sad.HangoverMultiStageVADFeaturePtr_reset(self)

    def next_speaker(self):
        return _sad.HangoverMultiStageVADFeaturePtr_next_speaker(self)

    def prefixN(self):
        return _sad.HangoverMultiStageVADFeaturePtr_prefixN(self)

    def name(self):
        return _sad.HangoverMultiStageVADFeaturePtr_name(self)

    def size(self):
        return _sad.HangoverMultiStageVADFeaturePtr_size(self)

    def is_end(self):
        return _sad.HangoverMultiStageVADFeaturePtr_is_end(self)

    def current(self):
        return _sad.HangoverMultiStageVADFeaturePtr_current(self)
HangoverMultiStageVADFeaturePtr_swigregister = _sad.HangoverMultiStageVADFeaturePtr_swigregister
HangoverMultiStageVADFeaturePtr_swigregister(HangoverMultiStageVADFeaturePtr)

class BrightnessFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrightnessFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrightnessFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_BrightnessFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.BrightnessFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.BrightnessFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_BrightnessFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.BrightnessFeaturePtr_next(self)

    def name(self):
        return _sad.BrightnessFeaturePtr_name(self)

    def size(self):
        return _sad.BrightnessFeaturePtr_size(self)

    def is_end(self):
        return _sad.BrightnessFeaturePtr_is_end(self)

    def current(self):
        return _sad.BrightnessFeaturePtr_current(self)

    def reset(self):
        return _sad.BrightnessFeaturePtr_reset(self)
BrightnessFeaturePtr_swigregister = _sad.BrightnessFeaturePtr_swigregister
BrightnessFeaturePtr_swigregister(BrightnessFeaturePtr)

class EnergyDiffusionFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyDiffusionFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyDiffusionFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_EnergyDiffusionFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.EnergyDiffusionFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.EnergyDiffusionFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_EnergyDiffusionFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.EnergyDiffusionFeaturePtr_next(self)

    def name(self):
        return _sad.EnergyDiffusionFeaturePtr_name(self)

    def size(self):
        return _sad.EnergyDiffusionFeaturePtr_size(self)

    def is_end(self):
        return _sad.EnergyDiffusionFeaturePtr_is_end(self)

    def current(self):
        return _sad.EnergyDiffusionFeaturePtr_current(self)

    def reset(self):
        return _sad.EnergyDiffusionFeaturePtr_reset(self)
EnergyDiffusionFeaturePtr_swigregister = _sad.EnergyDiffusionFeaturePtr_swigregister
EnergyDiffusionFeaturePtr_swigregister(EnergyDiffusionFeaturePtr)

class BandEnergyRatioFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BandEnergyRatioFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BandEnergyRatioFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_BandEnergyRatioFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.BandEnergyRatioFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.BandEnergyRatioFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_BandEnergyRatioFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.BandEnergyRatioFeaturePtr_next(self)

    def name(self):
        return _sad.BandEnergyRatioFeaturePtr_name(self)

    def size(self):
        return _sad.BandEnergyRatioFeaturePtr_size(self)

    def is_end(self):
        return _sad.BandEnergyRatioFeaturePtr_is_end(self)

    def current(self):
        return _sad.BandEnergyRatioFeaturePtr_current(self)

    def reset(self):
        return _sad.BandEnergyRatioFeaturePtr_reset(self)
BandEnergyRatioFeaturePtr_swigregister = _sad.BandEnergyRatioFeaturePtr_swigregister
BandEnergyRatioFeaturePtr_swigregister(BandEnergyRatioFeaturePtr)

class NormalizedFluxFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalizedFluxFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalizedFluxFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_NormalizedFluxFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.NormalizedFluxFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.NormalizedFluxFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_NormalizedFluxFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.NormalizedFluxFeaturePtr_next(self)

    def name(self):
        return _sad.NormalizedFluxFeaturePtr_name(self)

    def size(self):
        return _sad.NormalizedFluxFeaturePtr_size(self)

    def is_end(self):
        return _sad.NormalizedFluxFeaturePtr_is_end(self)

    def current(self):
        return _sad.NormalizedFluxFeaturePtr_current(self)

    def reset(self):
        return _sad.NormalizedFluxFeaturePtr_reset(self)
NormalizedFluxFeaturePtr_swigregister = _sad.NormalizedFluxFeaturePtr_swigregister
NormalizedFluxFeaturePtr_swigregister(NormalizedFluxFeaturePtr)

class NegativeEntropyFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NegativeEntropyFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NegativeEntropyFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_NegativeEntropyFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.NegativeEntropyFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.NegativeEntropyFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_NegativeEntropyFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.NegativeEntropyFeaturePtr_next(self)

    def name(self):
        return _sad.NegativeEntropyFeaturePtr_name(self)

    def size(self):
        return _sad.NegativeEntropyFeaturePtr_size(self)

    def is_end(self):
        return _sad.NegativeEntropyFeaturePtr_is_end(self)

    def current(self):
        return _sad.NegativeEntropyFeaturePtr_current(self)

    def reset(self):
        return _sad.NegativeEntropyFeaturePtr_reset(self)
NegativeEntropyFeaturePtr_swigregister = _sad.NegativeEntropyFeaturePtr_swigregister
NegativeEntropyFeaturePtr_swigregister(NegativeEntropyFeaturePtr)

class SignificantSubbandsFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignificantSubbandsFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignificantSubbandsFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_SignificantSubbandsFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.SignificantSubbandsFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.SignificantSubbandsFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_SignificantSubbandsFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.SignificantSubbandsFeaturePtr_next(self)

    def name(self):
        return _sad.SignificantSubbandsFeaturePtr_name(self)

    def size(self):
        return _sad.SignificantSubbandsFeaturePtr_size(self)

    def is_end(self):
        return _sad.SignificantSubbandsFeaturePtr_is_end(self)

    def current(self):
        return _sad.SignificantSubbandsFeaturePtr_current(self)

    def reset(self):
        return _sad.SignificantSubbandsFeaturePtr_reset(self)
SignificantSubbandsFeaturePtr_swigregister = _sad.SignificantSubbandsFeaturePtr_swigregister
SignificantSubbandsFeaturePtr_swigregister(SignificantSubbandsFeaturePtr)

class NormalizedBandwidthFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalizedBandwidthFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalizedBandwidthFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _sad.new_NormalizedBandwidthFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _sad.NormalizedBandwidthFeaturePtr___iter__(self)

    def __deref__(self):
        return _sad.NormalizedBandwidthFeaturePtr___deref__(self)
    __swig_destroy__ = _sad.delete_NormalizedBandwidthFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _sad.NormalizedBandwidthFeaturePtr_next(self)

    def name(self):
        return _sad.NormalizedBandwidthFeaturePtr_name(self)

    def size(self):
        return _sad.NormalizedBandwidthFeaturePtr_size(self)

    def is_end(self):
        return _sad.NormalizedBandwidthFeaturePtr_is_end(self)

    def current(self):
        return _sad.NormalizedBandwidthFeaturePtr_current(self)

    def reset(self):
        return _sad.NormalizedBandwidthFeaturePtr_reset(self)
NormalizedBandwidthFeaturePtr_swigregister = _sad.NormalizedBandwidthFeaturePtr_swigregister
NormalizedBandwidthFeaturePtr_swigregister(NormalizedBandwidthFeaturePtr)

class PCAPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PCAPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PCAPtr, name)
    __repr__ = _swig_repr

    def __init__(self, dimN):
        this = _sad.new_PCAPtr(dimN)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _sad.PCAPtr___deref__(self)
    __swig_destroy__ = _sad.delete_PCAPtr
    __del__ = lambda self: None

    def pca_svd(self, input, basis, eigenVal, whiten):
        return _sad.PCAPtr_pca_svd(self, input, basis, eigenVal, whiten)

    def pca_eigen(self, input, basis, eigenVal, whiten):
        return _sad.PCAPtr_pca_eigen(self, input, basis, eigenVal, whiten)
PCAPtr_swigregister = _sad.PCAPtr_swigregister
PCAPtr_swigregister(PCAPtr)

class FastICAPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FastICAPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FastICAPtr, name)
    __repr__ = _swig_repr

    def __init__(self, dimN, maxIterN):
        this = _sad.new_FastICAPtr(dimN, maxIterN)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _sad.FastICAPtr___deref__(self)
    __swig_destroy__ = _sad.delete_FastICAPtr
    __del__ = lambda self: None

    def deflation(self, data, B, A, W, M, neg, eps, maxIterN):
        return _sad.FastICAPtr_deflation(self, data, B, A, W, M, neg, eps, maxIterN)
FastICAPtr_swigregister = _sad.FastICAPtr_swigregister
FastICAPtr_swigregister(FastICAPtr)

# This file is compatible with both classic and new-style classes.


