# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_postfilter')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_postfilter')
    _postfilter = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_postfilter', [dirname(__file__)])
        except ImportError:
            import _postfilter
            return _postfilter
        try:
            _mod = imp.load_module('_postfilter', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _postfilter = swig_import_helper()
    del swig_import_helper
else:
    import _postfilter
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import btk20
from btk20 import stream
oldimport = """

import btk20.stream

"""

class ZelinskiPostFilterPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZelinskiPostFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZelinskiPostFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_ZelinskiPostFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.ZelinskiPostFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.ZelinskiPostFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_ZelinskiPostFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.ZelinskiPostFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.ZelinskiPostFilterPtr_reset(self)

    def set_beamformer(self, beamformer):
        return _postfilter.ZelinskiPostFilterPtr_set_beamformer(self, beamformer)

    def set_snapshot_array(self, snapShotArray):
        return _postfilter.ZelinskiPostFilterPtr_set_snapshot_array(self, snapShotArray)

    def set_array_manifold_vector(self, fbinX, arrayManifoldVector, halfBandShift, NC=1):
        return _postfilter.ZelinskiPostFilterPtr_set_array_manifold_vector(self, fbinX, arrayManifoldVector, halfBandShift, NC)

    def postfilter_weights(self):
        return _postfilter.ZelinskiPostFilterPtr_postfilter_weights(self)

    def name(self):
        return _postfilter.ZelinskiPostFilterPtr_name(self)

    def size(self):
        return _postfilter.ZelinskiPostFilterPtr_size(self)

    def current(self):
        return _postfilter.ZelinskiPostFilterPtr_current(self)
ZelinskiPostFilterPtr_swigregister = _postfilter.ZelinskiPostFilterPtr_swigregister
ZelinskiPostFilterPtr_swigregister(ZelinskiPostFilterPtr)

class McCowanPostFilterPtr(ZelinskiPostFilterPtr):
    __swig_setmethods__ = {}
    for _s in [ZelinskiPostFilterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, McCowanPostFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [ZelinskiPostFilterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, McCowanPostFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_McCowanPostFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.McCowanPostFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.McCowanPostFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_McCowanPostFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.McCowanPostFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.McCowanPostFilterPtr_reset(self)

    def noise_spatial_spectral_matrix(self, fbinX):
        return _postfilter.McCowanPostFilterPtr_noise_spatial_spectral_matrix(self, fbinX)

    def set_noise_spatial_spectral_matrix(self, fbinX, Rnn):
        return _postfilter.McCowanPostFilterPtr_set_noise_spatial_spectral_matrix(self, fbinX, Rnn)

    def set_diffuse_noise_model(self, micPositions, sampleRate, sspeed=343740.0):
        return _postfilter.McCowanPostFilterPtr_set_diffuse_noise_model(self, micPositions, sampleRate, sspeed)

    def set_all_diagonal_loading(self, diagonalWeight):
        return _postfilter.McCowanPostFilterPtr_set_all_diagonal_loading(self, diagonalWeight)

    def set_diagonal_looading(self, fbinX, diagonalWeight):
        return _postfilter.McCowanPostFilterPtr_set_diagonal_looading(self, fbinX, diagonalWeight)

    def divide_all_nondiagonal_elements(self, mu):
        return _postfilter.McCowanPostFilterPtr_divide_all_nondiagonal_elements(self, mu)

    def divide_nondiagonal_elements(self, fbinX, mu):
        return _postfilter.McCowanPostFilterPtr_divide_nondiagonal_elements(self, fbinX, mu)

    def set_beamformer(self, beamformer):
        return _postfilter.McCowanPostFilterPtr_set_beamformer(self, beamformer)

    def set_snapshot_array(self, snapShotArray):
        return _postfilter.McCowanPostFilterPtr_set_snapshot_array(self, snapShotArray)

    def set_array_manifold_vector(self, fbinX, arrayManifoldVector, halfBandShift, NC=1):
        return _postfilter.McCowanPostFilterPtr_set_array_manifold_vector(self, fbinX, arrayManifoldVector, halfBandShift, NC)

    def postfilter_weights(self):
        return _postfilter.McCowanPostFilterPtr_postfilter_weights(self)

    def name(self):
        return _postfilter.McCowanPostFilterPtr_name(self)

    def size(self):
        return _postfilter.McCowanPostFilterPtr_size(self)

    def current(self):
        return _postfilter.McCowanPostFilterPtr_current(self)
McCowanPostFilterPtr_swigregister = _postfilter.McCowanPostFilterPtr_swigregister
McCowanPostFilterPtr_swigregister(McCowanPostFilterPtr)

class LefkimmiatisPostFilterPtr(McCowanPostFilterPtr):
    __swig_setmethods__ = {}
    for _s in [McCowanPostFilterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LefkimmiatisPostFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [McCowanPostFilterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LefkimmiatisPostFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_LefkimmiatisPostFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.LefkimmiatisPostFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.LefkimmiatisPostFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_LefkimmiatisPostFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.LefkimmiatisPostFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.LefkimmiatisPostFilterPtr_reset(self)

    def calc_inverse_noise_spatial_spectral_matrix(self):
        return _postfilter.LefkimmiatisPostFilterPtr_calc_inverse_noise_spatial_spectral_matrix(self)

    def noise_spatial_spectral_matrix(self, fbinX):
        return _postfilter.LefkimmiatisPostFilterPtr_noise_spatial_spectral_matrix(self, fbinX)

    def set_noise_spatial_spectral_matrix(self, fbinX, Rnn):
        return _postfilter.LefkimmiatisPostFilterPtr_set_noise_spatial_spectral_matrix(self, fbinX, Rnn)

    def set_diffuse_noise_model(self, micPositions, sampleRate, sspeed=343740.0):
        return _postfilter.LefkimmiatisPostFilterPtr_set_diffuse_noise_model(self, micPositions, sampleRate, sspeed)

    def set_all_diagonal_loading(self, diagonalWeight):
        return _postfilter.LefkimmiatisPostFilterPtr_set_all_diagonal_loading(self, diagonalWeight)

    def set_diagonal_looading(self, fbinX, diagonalWeight):
        return _postfilter.LefkimmiatisPostFilterPtr_set_diagonal_looading(self, fbinX, diagonalWeight)

    def divide_all_nondiagonal_elements(self, mu):
        return _postfilter.LefkimmiatisPostFilterPtr_divide_all_nondiagonal_elements(self, mu)

    def divide_nondiagonal_elements(self, fbinX, mu):
        return _postfilter.LefkimmiatisPostFilterPtr_divide_nondiagonal_elements(self, fbinX, mu)

    def set_beamformer(self, beamformer):
        return _postfilter.LefkimmiatisPostFilterPtr_set_beamformer(self, beamformer)

    def set_snapshot_array(self, snapShotArray):
        return _postfilter.LefkimmiatisPostFilterPtr_set_snapshot_array(self, snapShotArray)

    def set_array_manifold_vector(self, fbinX, arrayManifoldVector, halfBandShift, NC=1):
        return _postfilter.LefkimmiatisPostFilterPtr_set_array_manifold_vector(self, fbinX, arrayManifoldVector, halfBandShift, NC)

    def postfilter_weights(self):
        return _postfilter.LefkimmiatisPostFilterPtr_postfilter_weights(self)

    def name(self):
        return _postfilter.LefkimmiatisPostFilterPtr_name(self)

    def size(self):
        return _postfilter.LefkimmiatisPostFilterPtr_size(self)

    def current(self):
        return _postfilter.LefkimmiatisPostFilterPtr_current(self)
LefkimmiatisPostFilterPtr_swigregister = _postfilter.LefkimmiatisPostFilterPtr_swigregister
LefkimmiatisPostFilterPtr_swigregister(LefkimmiatisPostFilterPtr)

class SpectralSubtractorPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectralSubtractorPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpectralSubtractorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_SpectralSubtractorPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.SpectralSubtractorPtr___iter__(self)

    def __deref__(self):
        return _postfilter.SpectralSubtractorPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_SpectralSubtractorPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.SpectralSubtractorPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.SpectralSubtractorPtr_reset(self)

    def clear(self):
        return _postfilter.SpectralSubtractorPtr_clear(self)

    def set_noise_over_estimation_factor(self, ft):
        return _postfilter.SpectralSubtractorPtr_set_noise_over_estimation_factor(self, ft)

    def set_channel(self, chan, alpha=-1):
        return _postfilter.SpectralSubtractorPtr_set_channel(self, chan, alpha)

    def start_training(self):
        return _postfilter.SpectralSubtractorPtr_start_training(self)

    def stop_training(self):
        return _postfilter.SpectralSubtractorPtr_stop_training(self)

    def clear_noise_samples(self):
        return _postfilter.SpectralSubtractorPtr_clear_noise_samples(self)

    def start_noise_subtraction(self):
        return _postfilter.SpectralSubtractorPtr_start_noise_subtraction(self)

    def stop_noise_subtraction(self):
        return _postfilter.SpectralSubtractorPtr_stop_noise_subtraction(self)

    def read_noise_file(self, fn, idx=0):
        return _postfilter.SpectralSubtractorPtr_read_noise_file(self, fn, idx)

    def write_noise_file(self, fn, idx=0):
        return _postfilter.SpectralSubtractorPtr_write_noise_file(self, fn, idx)

    def name(self):
        return _postfilter.SpectralSubtractorPtr_name(self)

    def size(self):
        return _postfilter.SpectralSubtractorPtr_size(self)

    def current(self):
        return _postfilter.SpectralSubtractorPtr_current(self)
SpectralSubtractorPtr_swigregister = _postfilter.SpectralSubtractorPtr_swigregister
SpectralSubtractorPtr_swigregister(SpectralSubtractorPtr)

class WienerFilterPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WienerFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WienerFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_WienerFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.WienerFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.WienerFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_WienerFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.WienerFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.WienerFilterPtr_reset(self)

    def name(self):
        return _postfilter.WienerFilterPtr_name(self)

    def size(self):
        return _postfilter.WienerFilterPtr_size(self)

    def current(self):
        return _postfilter.WienerFilterPtr_current(self)
WienerFilterPtr_swigregister = _postfilter.WienerFilterPtr_swigregister
WienerFilterPtr_swigregister(WienerFilterPtr)

class HighPassFilterPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighPassFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighPassFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_HighPassFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.HighPassFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.HighPassFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_HighPassFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.HighPassFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.HighPassFilterPtr_reset(self)

    def name(self):
        return _postfilter.HighPassFilterPtr_name(self)

    def size(self):
        return _postfilter.HighPassFilterPtr_size(self)

    def current(self):
        return _postfilter.HighPassFilterPtr_current(self)
HighPassFilterPtr_swigregister = _postfilter.HighPassFilterPtr_swigregister
HighPassFilterPtr_swigregister(HighPassFilterPtr)

class BinaryMaskFilterPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryMaskFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryMaskFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_BinaryMaskFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.BinaryMaskFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.BinaryMaskFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_BinaryMaskFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.BinaryMaskFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.BinaryMaskFilterPtr_reset(self)

    def set_threshold(self, threshold):
        return _postfilter.BinaryMaskFilterPtr_set_threshold(self, threshold)

    def set_thresholds(self, thresholds):
        return _postfilter.BinaryMaskFilterPtr_set_thresholds(self, thresholds)

    def threshold(self):
        return _postfilter.BinaryMaskFilterPtr_threshold(self)

    def thresholds(self):
        return _postfilter.BinaryMaskFilterPtr_thresholds(self)

    def name(self):
        return _postfilter.BinaryMaskFilterPtr_name(self)

    def size(self):
        return _postfilter.BinaryMaskFilterPtr_size(self)

    def current(self):
        return _postfilter.BinaryMaskFilterPtr_current(self)
BinaryMaskFilterPtr_swigregister = _postfilter.BinaryMaskFilterPtr_swigregister
BinaryMaskFilterPtr_swigregister(BinaryMaskFilterPtr)

class KimBinaryMaskFilterPtr(BinaryMaskFilterPtr):
    __swig_setmethods__ = {}
    for _s in [BinaryMaskFilterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KimBinaryMaskFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryMaskFilterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KimBinaryMaskFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_KimBinaryMaskFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.KimBinaryMaskFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.KimBinaryMaskFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_KimBinaryMaskFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.KimBinaryMaskFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.KimBinaryMaskFilterPtr_reset(self)

    def masking1(self, ad_X_L, ad_X_R, threshold):
        return _postfilter.KimBinaryMaskFilterPtr_masking1(self, ad_X_L, ad_X_R, threshold)

    def set_threshold(self, threshold):
        return _postfilter.KimBinaryMaskFilterPtr_set_threshold(self, threshold)

    def set_thresholds(self, thresholds):
        return _postfilter.KimBinaryMaskFilterPtr_set_thresholds(self, thresholds)

    def threshold(self):
        return _postfilter.KimBinaryMaskFilterPtr_threshold(self)

    def thresholds(self):
        return _postfilter.KimBinaryMaskFilterPtr_thresholds(self)

    def name(self):
        return _postfilter.KimBinaryMaskFilterPtr_name(self)

    def size(self):
        return _postfilter.KimBinaryMaskFilterPtr_size(self)

    def current(self):
        return _postfilter.KimBinaryMaskFilterPtr_current(self)
KimBinaryMaskFilterPtr_swigregister = _postfilter.KimBinaryMaskFilterPtr_swigregister
KimBinaryMaskFilterPtr_swigregister(KimBinaryMaskFilterPtr)

class KimITDThresholdEstimatorPtr(KimBinaryMaskFilterPtr):
    __swig_setmethods__ = {}
    for _s in [KimBinaryMaskFilterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KimITDThresholdEstimatorPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [KimBinaryMaskFilterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KimITDThresholdEstimatorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_KimITDThresholdEstimatorPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.KimITDThresholdEstimatorPtr___iter__(self)

    def __deref__(self):
        return _postfilter.KimITDThresholdEstimatorPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_KimITDThresholdEstimatorPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.KimITDThresholdEstimatorPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.KimITDThresholdEstimatorPtr_reset(self)

    def calc_threshold(self):
        return _postfilter.KimITDThresholdEstimatorPtr_calc_threshold(self)

    def cost_function(self):
        return _postfilter.KimITDThresholdEstimatorPtr_cost_function(self)

    def masking1(self, ad_X_L, ad_X_R, threshold):
        return _postfilter.KimITDThresholdEstimatorPtr_masking1(self, ad_X_L, ad_X_R, threshold)

    def set_threshold(self, threshold):
        return _postfilter.KimITDThresholdEstimatorPtr_set_threshold(self, threshold)

    def set_thresholds(self, thresholds):
        return _postfilter.KimITDThresholdEstimatorPtr_set_thresholds(self, thresholds)

    def threshold(self):
        return _postfilter.KimITDThresholdEstimatorPtr_threshold(self)

    def thresholds(self):
        return _postfilter.KimITDThresholdEstimatorPtr_thresholds(self)

    def name(self):
        return _postfilter.KimITDThresholdEstimatorPtr_name(self)

    def size(self):
        return _postfilter.KimITDThresholdEstimatorPtr_size(self)

    def current(self):
        return _postfilter.KimITDThresholdEstimatorPtr_current(self)
KimITDThresholdEstimatorPtr_swigregister = _postfilter.KimITDThresholdEstimatorPtr_swigregister
KimITDThresholdEstimatorPtr_swigregister(KimITDThresholdEstimatorPtr)

class IIDBinaryMaskFilterPtr(BinaryMaskFilterPtr):
    __swig_setmethods__ = {}
    for _s in [BinaryMaskFilterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIDBinaryMaskFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryMaskFilterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IIDBinaryMaskFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_IIDBinaryMaskFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.IIDBinaryMaskFilterPtr___iter__(self)

    def __deref__(self):
        return _postfilter.IIDBinaryMaskFilterPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_IIDBinaryMaskFilterPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.IIDBinaryMaskFilterPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.IIDBinaryMaskFilterPtr_reset(self)

    def masking1(self, ad_X_L, ad_X_R, threshold):
        return _postfilter.IIDBinaryMaskFilterPtr_masking1(self, ad_X_L, ad_X_R, threshold)

    def set_threshold(self, threshold):
        return _postfilter.IIDBinaryMaskFilterPtr_set_threshold(self, threshold)

    def set_thresholds(self, thresholds):
        return _postfilter.IIDBinaryMaskFilterPtr_set_thresholds(self, thresholds)

    def threshold(self):
        return _postfilter.IIDBinaryMaskFilterPtr_threshold(self)

    def thresholds(self):
        return _postfilter.IIDBinaryMaskFilterPtr_thresholds(self)

    def name(self):
        return _postfilter.IIDBinaryMaskFilterPtr_name(self)

    def size(self):
        return _postfilter.IIDBinaryMaskFilterPtr_size(self)

    def current(self):
        return _postfilter.IIDBinaryMaskFilterPtr_current(self)
IIDBinaryMaskFilterPtr_swigregister = _postfilter.IIDBinaryMaskFilterPtr_swigregister
IIDBinaryMaskFilterPtr_swigregister(IIDBinaryMaskFilterPtr)

class IIDThresholdEstimatorPtr(KimITDThresholdEstimatorPtr):
    __swig_setmethods__ = {}
    for _s in [KimITDThresholdEstimatorPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIDThresholdEstimatorPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [KimITDThresholdEstimatorPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IIDThresholdEstimatorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_IIDThresholdEstimatorPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.IIDThresholdEstimatorPtr___iter__(self)

    def __deref__(self):
        return _postfilter.IIDThresholdEstimatorPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_IIDThresholdEstimatorPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.IIDThresholdEstimatorPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.IIDThresholdEstimatorPtr_reset(self)

    def calc_threshold(self):
        return _postfilter.IIDThresholdEstimatorPtr_calc_threshold(self)

    def cost_function(self):
        return _postfilter.IIDThresholdEstimatorPtr_cost_function(self)

    def masking1(self, ad_X_L, ad_X_R, threshold):
        return _postfilter.IIDThresholdEstimatorPtr_masking1(self, ad_X_L, ad_X_R, threshold)

    def set_threshold(self, threshold):
        return _postfilter.IIDThresholdEstimatorPtr_set_threshold(self, threshold)

    def set_thresholds(self, thresholds):
        return _postfilter.IIDThresholdEstimatorPtr_set_thresholds(self, thresholds)

    def threshold(self):
        return _postfilter.IIDThresholdEstimatorPtr_threshold(self)

    def thresholds(self):
        return _postfilter.IIDThresholdEstimatorPtr_thresholds(self)

    def name(self):
        return _postfilter.IIDThresholdEstimatorPtr_name(self)

    def size(self):
        return _postfilter.IIDThresholdEstimatorPtr_size(self)

    def current(self):
        return _postfilter.IIDThresholdEstimatorPtr_current(self)
IIDThresholdEstimatorPtr_swigregister = _postfilter.IIDThresholdEstimatorPtr_swigregister
IIDThresholdEstimatorPtr_swigregister(IIDThresholdEstimatorPtr)

class FDIIDThresholdEstimatorPtr(BinaryMaskFilterPtr):
    __swig_setmethods__ = {}
    for _s in [BinaryMaskFilterPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDIIDThresholdEstimatorPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryMaskFilterPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FDIIDThresholdEstimatorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _postfilter.new_FDIIDThresholdEstimatorPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _postfilter.FDIIDThresholdEstimatorPtr___iter__(self)

    def __deref__(self):
        return _postfilter.FDIIDThresholdEstimatorPtr___deref__(self)
    __swig_destroy__ = _postfilter.delete_FDIIDThresholdEstimatorPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _postfilter.FDIIDThresholdEstimatorPtr_next(self, frame_no)

    def reset(self):
        return _postfilter.FDIIDThresholdEstimatorPtr_reset(self)

    def calc_threshold(self):
        return _postfilter.FDIIDThresholdEstimatorPtr_calc_threshold(self)

    def cost_function(self, freqX):
        return _postfilter.FDIIDThresholdEstimatorPtr_cost_function(self, freqX)

    def set_threshold(self, threshold):
        return _postfilter.FDIIDThresholdEstimatorPtr_set_threshold(self, threshold)

    def set_thresholds(self, thresholds):
        return _postfilter.FDIIDThresholdEstimatorPtr_set_thresholds(self, thresholds)

    def threshold(self):
        return _postfilter.FDIIDThresholdEstimatorPtr_threshold(self)

    def thresholds(self):
        return _postfilter.FDIIDThresholdEstimatorPtr_thresholds(self)

    def name(self):
        return _postfilter.FDIIDThresholdEstimatorPtr_name(self)

    def size(self):
        return _postfilter.FDIIDThresholdEstimatorPtr_size(self)

    def current(self):
        return _postfilter.FDIIDThresholdEstimatorPtr_current(self)
FDIIDThresholdEstimatorPtr_swigregister = _postfilter.FDIIDThresholdEstimatorPtr_swigregister
FDIIDThresholdEstimatorPtr_swigregister(FDIIDThresholdEstimatorPtr)

# This file is compatible with both classic and new-style classes.


