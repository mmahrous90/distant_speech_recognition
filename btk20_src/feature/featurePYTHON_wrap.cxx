/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ALogFeature swig_types[0]
#define SWIGTYPE_p_ALogFeaturePtr swig_types[1]
#define SWIGTYPE_p_AdjacentFeature swig_types[2]
#define SWIGTYPE_p_AdjacentFeaturePtr swig_types[3]
#define SWIGTYPE_p_AmplificationFeature swig_types[4]
#define SWIGTYPE_p_AmplificationFeaturePtr swig_types[5]
#define SWIGTYPE_p_BlockSizeConversionFeature swig_types[6]
#define SWIGTYPE_p_BlockSizeConversionFeaturePtr swig_types[7]
#define SWIGTYPE_p_BlockSizeConversionFeatureShort swig_types[8]
#define SWIGTYPE_p_BlockSizeConversionFeatureShortPtr swig_types[9]
#define SWIGTYPE_p_BurgLPCFeature swig_types[10]
#define SWIGTYPE_p_BurgLPCFeaturePtr swig_types[11]
#define SWIGTYPE_p_BurgMVDRFeature swig_types[12]
#define SWIGTYPE_p_BurgMVDRFeaturePtr swig_types[13]
#define SWIGTYPE_p_CepstralFeature swig_types[14]
#define SWIGTYPE_p_CepstralFeaturePtr swig_types[15]
#define SWIGTYPE_p_CepstralSpectrumEstimator swig_types[16]
#define SWIGTYPE_p_CepstralSpectrumEstimatorPtr swig_types[17]
#define SWIGTYPE_p_ChannelExtractionFeature swig_types[18]
#define SWIGTYPE_p_ChannelExtractionFeaturePtr swig_types[19]
#define SWIGTYPE_p_CircularStorageFeature swig_types[20]
#define SWIGTYPE_p_CircularStorageFeaturePtr swig_types[21]
#define SWIGTYPE_p_Conversion24bit2Float swig_types[22]
#define SWIGTYPE_p_Conversion24bit2FloatPtr swig_types[23]
#define SWIGTYPE_p_Conversion24bit2Short swig_types[24]
#define SWIGTYPE_p_Conversion24bit2ShortPtr swig_types[25]
#define SWIGTYPE_p_DirectSampleFeature swig_types[26]
#define SWIGTYPE_p_DirectSampleFeaturePtr swig_types[27]
#define SWIGTYPE_p_DirectSampleOutputFeature swig_types[28]
#define SWIGTYPE_p_DirectSampleOutputFeaturePtr swig_types[29]
#define SWIGTYPE_p_FFTFeature swig_types[30]
#define SWIGTYPE_p_FFTFeaturePtr swig_types[31]
#define SWIGTYPE_p_FeatureSet swig_types[32]
#define SWIGTYPE_p_FeatureSetPtr swig_types[33]
#define SWIGTYPE_p_FileFeature swig_types[34]
#define SWIGTYPE_p_FileFeaturePtr swig_types[35]
#define SWIGTYPE_p_FileMeanSubtractionFeature swig_types[36]
#define SWIGTYPE_p_FileMeanSubtractionFeaturePtr swig_types[37]
#define SWIGTYPE_p_FilterFeature swig_types[38]
#define SWIGTYPE_p_FilterFeaturePtr swig_types[39]
#define SWIGTYPE_p_FloatToDoubleConversionFeature swig_types[40]
#define SWIGTYPE_p_FloatToDoubleConversionFeaturePtr swig_types[41]
#define SWIGTYPE_p_HammingFeature swig_types[42]
#define SWIGTYPE_p_HammingFeaturePtr swig_types[43]
#define SWIGTYPE_p_HammingFeatureShort swig_types[44]
#define SWIGTYPE_p_HammingFeatureShortPtr swig_types[45]
#define SWIGTYPE_p_IterativeSampleFeature swig_types[46]
#define SWIGTYPE_p_IterativeSampleFeaturePtr swig_types[47]
#define SWIGTYPE_p_IterativeSingleChannelSampleFeature swig_types[48]
#define SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr swig_types[49]
#define SWIGTYPE_p_LPCSpectrumEstimator swig_types[50]
#define SWIGTYPE_p_LPCSpectrumEstimatorPtr swig_types[51]
#define SWIGTYPE_p_LinearTransformFeature swig_types[52]
#define SWIGTYPE_p_LinearTransformFeaturePtr swig_types[53]
#define SWIGTYPE_p_LogFeature swig_types[54]
#define SWIGTYPE_p_LogFeaturePtr swig_types[55]
#define SWIGTYPE_p_MeanSubtractionFeature swig_types[56]
#define SWIGTYPE_p_MeanSubtractionFeaturePtr swig_types[57]
#define SWIGTYPE_p_MelFeature swig_types[58]
#define SWIGTYPE_p_MelFeaturePtr swig_types[59]
#define SWIGTYPE_p_MergeFeature swig_types[60]
#define SWIGTYPE_p_MergeFeaturePtr swig_types[61]
#define SWIGTYPE_p_MultiModalFeature swig_types[62]
#define SWIGTYPE_p_MultiModalFeaturePtr swig_types[63]
#define SWIGTYPE_p_NormalizeFeature swig_types[64]
#define SWIGTYPE_p_NormalizeFeaturePtr swig_types[65]
#define SWIGTYPE_p_PreemphasisFeature swig_types[66]
#define SWIGTYPE_p_PreemphasisFeaturePtr swig_types[67]
#define SWIGTYPE_p_PyVectorComplexFeatureStream swig_types[68]
#define SWIGTYPE_p_PyVectorComplexFeatureStreamPtr swig_types[69]
#define SWIGTYPE_p_PyVectorFeatureStream swig_types[70]
#define SWIGTYPE_p_PyVectorFeatureStreamPtr swig_types[71]
#define SWIGTYPE_p_PyVectorFloatFeatureStream swig_types[72]
#define SWIGTYPE_p_PyVectorFloatFeatureStreamPtr swig_types[73]
#define SWIGTYPE_p_PyVectorShortFeatureStream swig_types[74]
#define SWIGTYPE_p_PyVectorShortFeatureStreamPtr swig_types[75]
#define SWIGTYPE_p_SEMNB swig_types[76]
#define SWIGTYPE_p_SEMNBPtr swig_types[77]
#define SWIGTYPE_p_SampleFeature swig_types[78]
#define SWIGTYPE_p_SampleFeaturePtr swig_types[79]
#define SWIGTYPE_p_SampleFeatureRunon swig_types[80]
#define SWIGTYPE_p_SampleFeatureRunonPtr swig_types[81]
#define SWIGTYPE_p_SignalInterferenceFeature swig_types[82]
#define SWIGTYPE_p_SignalInterferenceFeaturePtr swig_types[83]
#define SWIGTYPE_p_SignalPowerFeature swig_types[84]
#define SWIGTYPE_p_SignalPowerFeaturePtr swig_types[85]
#define SWIGTYPE_p_SoundFile swig_types[86]
#define SWIGTYPE_p_SoundFilePtr swig_types[87]
#define SWIGTYPE_p_SpectralPowerFeature swig_types[88]
#define SWIGTYPE_p_SpectralPowerFeaturePtr swig_types[89]
#define SWIGTYPE_p_SpectralPowerFloatFeature swig_types[90]
#define SWIGTYPE_p_SpectralPowerFloatFeaturePtr swig_types[91]
#define SWIGTYPE_p_SpectralResamplingFeature swig_types[92]
#define SWIGTYPE_p_SpectralResamplingFeaturePtr swig_types[93]
#define SWIGTYPE_p_SpectralSmoothing swig_types[94]
#define SWIGTYPE_p_SpectralSmoothingPtr swig_types[95]
#define SWIGTYPE_p_SphinxMelFeature swig_types[96]
#define SWIGTYPE_p_SphinxMelFeaturePtr swig_types[97]
#define SWIGTYPE_p_SpikeFilter swig_types[98]
#define SWIGTYPE_p_SpikeFilter2 swig_types[99]
#define SWIGTYPE_p_SpikeFilter2Ptr swig_types[100]
#define SWIGTYPE_p_SpikeFilterPtr swig_types[101]
#define SWIGTYPE_p_StaticStorageFeature swig_types[102]
#define SWIGTYPE_p_StaticStorageFeaturePtr swig_types[103]
#define SWIGTYPE_p_StorageFeature swig_types[104]
#define SWIGTYPE_p_StorageFeaturePtr swig_types[105]
#define SWIGTYPE_p_String swig_types[106]
#define SWIGTYPE_p_ThresholdFeature swig_types[107]
#define SWIGTYPE_p_ThresholdFeaturePtr swig_types[108]
#define SWIGTYPE_p_VTLNFeature swig_types[109]
#define SWIGTYPE_p_VTLNFeaturePtr swig_types[110]
#define SWIGTYPE_p_VectorCharFeatureStreamPtr swig_types[111]
#define SWIGTYPE_p_VectorComplexFeatureStream swig_types[112]
#define SWIGTYPE_p_VectorComplexFeatureStreamPtr swig_types[113]
#define SWIGTYPE_p_VectorFeatureStream swig_types[114]
#define SWIGTYPE_p_VectorFeatureStreamPtr swig_types[115]
#define SWIGTYPE_p_VectorFloatFeatureStream swig_types[116]
#define SWIGTYPE_p_VectorFloatFeatureStreamPtr swig_types[117]
#define SWIGTYPE_p_VectorShortFeatureStream swig_types[118]
#define SWIGTYPE_p_VectorShortFeatureStreamPtr swig_types[119]
#define SWIGTYPE_p_WarpLPCFeature swig_types[120]
#define SWIGTYPE_p_WarpLPCFeaturePtr swig_types[121]
#define SWIGTYPE_p_WarpMVDRFeature swig_types[122]
#define SWIGTYPE_p_WarpMVDRFeaturePtr swig_types[123]
#define SWIGTYPE_p_WarpedTwiceMVDRFeature swig_types[124]
#define SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr swig_types[125]
#define SWIGTYPE_p_WriteSoundFile swig_types[126]
#define SWIGTYPE_p_WriteSoundFilePtr swig_types[127]
#define SWIGTYPE_p_YINPitchFeature swig_types[128]
#define SWIGTYPE_p_YINPitchFeaturePtr swig_types[129]
#define SWIGTYPE_p_ZeroCrossingRateHammingFeature swig_types[130]
#define SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr swig_types[131]
#define SWIGTYPE_p_char swig_types[132]
#define SWIGTYPE_p_float swig_types[133]
#define SWIGTYPE_p_gsl_matrix swig_types[134]
#define SWIGTYPE_p_gsl_matrix_float swig_types[135]
#define SWIGTYPE_p_gsl_vector swig_types[136]
#define SWIGTYPE_p_int swig_types[137]
#define SWIGTYPE_p_sf_count_t swig_types[138]
static swig_type_info *swig_types[140];
static swig_module_info swig_module = {swig_types, 139, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _feature.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__feature

#else
#  define SWIG_init    init_feature

#endif
#define SWIG_name    "_feature"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "stream/stream.h"
#include "stream/pyStream.h"
#include <numpy/arrayobject.h>
#include "feature/feature.h"
#include "feature/lpc.h"
using namespace sndfile;


#include "common/jexception.h"
#include "common/jpython_error.h"

using namespace std;


#include <string>


#include <gsl/gsl_vector.h>


#include <gsl/gsl_matrix_double.h>
#include <gsl/gsl_matrix_complex_double.h>


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN FileFeaturePtr *new_FileFeaturePtr__SWIG_0(unsigned int sz,String const nm="File"){
      return new FileFeaturePtr(new FileFeature(sz, nm));
    }
SWIGINTERN FileFeaturePtr FileFeaturePtr___iter__(FileFeaturePtr *self){
      (*self)->reset();  return *self;
    }

SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN Conversion24bit2ShortPtr *new_Conversion24bit2ShortPtr(VectorCharFeatureStreamPtr &src,String const &nm="Conversion from 24 bit integer to Short"){
      return new Conversion24bit2ShortPtr(new Conversion24bit2Short(src, nm));
   }
SWIGINTERN Conversion24bit2ShortPtr Conversion24bit2ShortPtr___iter__(Conversion24bit2ShortPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN Conversion24bit2FloatPtr *new_Conversion24bit2FloatPtr(VectorCharFeatureStreamPtr &src,String const &nm="Conversion from 24 bit integer to Float"){
      return new Conversion24bit2FloatPtr(new Conversion24bit2Float(src, nm));
   }
SWIGINTERN Conversion24bit2FloatPtr Conversion24bit2FloatPtr___iter__(Conversion24bit2FloatPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SampleFeaturePtr *new_SampleFeaturePtr(String const fn="",unsigned int block_len=320,unsigned int shift_len=160,bool pad_zeros=false,String const nm="Sample"){
      return new SampleFeaturePtr(new SampleFeature(fn, block_len, shift_len, pad_zeros, nm));
    }
SWIGINTERN SampleFeaturePtr SampleFeaturePtr___iter__(SampleFeaturePtr *self){
      (*self)->reset();  return *self;
    }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN SampleFeatureRunonPtr *new_SampleFeatureRunonPtr(String const fn="",unsigned int blockLen=320,unsigned int shiftLen=160,bool padZeros=false,String const nm="Sample"){
      return new SampleFeatureRunonPtr(new SampleFeatureRunon(fn, blockLen, shiftLen, padZeros, nm));
    }
SWIGINTERN SampleFeatureRunonPtr SampleFeatureRunonPtr___iter__(SampleFeatureRunonPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN IterativeSingleChannelSampleFeaturePtr *new_IterativeSingleChannelSampleFeaturePtr(unsigned int block_len=320,String const &nm="IterativeSingleChannelSampleFeature"){
      return new IterativeSingleChannelSampleFeaturePtr(new IterativeSingleChannelSampleFeature( block_len, nm ));
    }
SWIGINTERN IterativeSingleChannelSampleFeaturePtr IterativeSingleChannelSampleFeaturePtr___iter__(IterativeSingleChannelSampleFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN IterativeSampleFeaturePtr *new_IterativeSampleFeaturePtr(unsigned int chX,unsigned int blockLen=320,unsigned int firstChanX=0,String const &nm="Iterative Sample"){
      return new IterativeSampleFeaturePtr(new IterativeSampleFeature(chX, blockLen, firstChanX,nm));
    }
SWIGINTERN IterativeSampleFeaturePtr IterativeSampleFeaturePtr___iter__(IterativeSampleFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN BlockSizeConversionFeaturePtr *new_BlockSizeConversionFeaturePtr(VectorFloatFeatureStreamPtr const &src,unsigned int blockLen=320,unsigned int shiftLen=160,String const &nm="BlockSizeConversion"){
      return new BlockSizeConversionFeaturePtr(new BlockSizeConversionFeature(src, blockLen, shiftLen));
    }
SWIGINTERN BlockSizeConversionFeaturePtr BlockSizeConversionFeaturePtr___iter__(BlockSizeConversionFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN BlockSizeConversionFeatureShortPtr *new_BlockSizeConversionFeatureShortPtr(VectorShortFeatureStreamPtr &src,unsigned int blockLen=320,unsigned int shiftLen=160,String const &nm="BlockSizeConversion"){
      return new BlockSizeConversionFeatureShortPtr(new BlockSizeConversionFeatureShort(src, blockLen, shiftLen));
    }
SWIGINTERN BlockSizeConversionFeatureShortPtr BlockSizeConversionFeatureShortPtr___iter__(BlockSizeConversionFeatureShortPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN PreemphasisFeaturePtr *new_PreemphasisFeaturePtr(VectorFloatFeatureStreamPtr const &samp,double mu=0.95,String const &nm="Preemphasis"){
      return new PreemphasisFeaturePtr(new PreemphasisFeature(samp, mu, nm));
    }
SWIGINTERN PreemphasisFeaturePtr PreemphasisFeaturePtr___iter__(PreemphasisFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN HammingFeatureShortPtr *new_HammingFeatureShortPtr(VectorShortFeatureStreamPtr const &samp,String const &nm="HammingShort"){
      return new HammingFeatureShortPtr(new HammingFeatureShort(samp, nm));
    }
SWIGINTERN HammingFeatureShortPtr HammingFeatureShortPtr___iter__(HammingFeatureShortPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN HammingFeaturePtr *new_HammingFeaturePtr(VectorFloatFeatureStreamPtr const &samp,String const &nm="Hamming"){
      return new HammingFeaturePtr(new HammingFeature(samp, nm));
    }
SWIGINTERN HammingFeaturePtr HammingFeaturePtr___iter__(HammingFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN FFTFeaturePtr *new_FFTFeaturePtr(VectorFloatFeatureStreamPtr const samp,unsigned int fft_len=512,String const &nm="FFT"){
      return new FFTFeaturePtr(new FFTFeature(samp, fft_len, nm));
    }
SWIGINTERN FFTFeaturePtr FFTFeaturePtr___iter__(FFTFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SpectralPowerFloatFeaturePtr *new_SpectralPowerFloatFeaturePtr(VectorComplexFeatureStreamPtr const &fft,unsigned int powN=0,String const nm="Power"){
      return new SpectralPowerFloatFeaturePtr(new SpectralPowerFloatFeature(fft, powN, nm));
    }
SWIGINTERN SpectralPowerFloatFeaturePtr SpectralPowerFloatFeaturePtr___iter__(SpectralPowerFloatFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SpectralPowerFeaturePtr *new_SpectralPowerFeaturePtr(VectorComplexFeatureStreamPtr const &fft,unsigned int pow_num=0,String const nm="Power"){
      return new SpectralPowerFeaturePtr(new SpectralPowerFeature(fft, pow_num, nm));
    }
SWIGINTERN SpectralPowerFeaturePtr SpectralPowerFeaturePtr___iter__(SpectralPowerFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SignalPowerFeaturePtr *new_SignalPowerFeaturePtr(VectorFloatFeatureStreamPtr const &samp,String const nm="SignalPower"){
      return new SignalPowerFeaturePtr(new SignalPowerFeature(samp, nm));
    }
SWIGINTERN SignalPowerFeaturePtr SignalPowerFeaturePtr___iter__(SignalPowerFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN ALogFeaturePtr *new_ALogFeaturePtr(VectorFloatFeatureStreamPtr const &samp,double m=1.0,double a=4.0,bool runon=false,String const nm="ALog Power"){
      return new ALogFeaturePtr(new ALogFeature(samp, m, a, runon, nm));
    }
SWIGINTERN ALogFeaturePtr ALogFeaturePtr___iter__(ALogFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN NormalizeFeaturePtr *new_NormalizeFeaturePtr(VectorFloatFeatureStreamPtr const &samp,double min=0.0,double max=1.0,bool runon=false,String const nm="Normalize"){
      return new NormalizeFeaturePtr(new NormalizeFeature(samp, min, max, runon, nm));
    }
SWIGINTERN NormalizeFeaturePtr NormalizeFeaturePtr___iter__(NormalizeFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN ThresholdFeaturePtr *new_ThresholdFeaturePtr(VectorFloatFeatureStreamPtr const &samp,double value=0.0,double thresh=1.0,String const &mode="upper",String const &nm="Threshold"){
      return new ThresholdFeaturePtr(new ThresholdFeature(samp, value, thresh, mode, nm));
    }
SWIGINTERN ThresholdFeaturePtr ThresholdFeaturePtr___iter__(ThresholdFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SpectralResamplingFeaturePtr *new_SpectralResamplingFeaturePtr(VectorFeatureStreamPtr const &src,double ratio,unsigned int len=0,String const &nm="Resampling"){
      return new SpectralResamplingFeaturePtr(new SpectralResamplingFeature(src, ratio, len, nm));
    }
SWIGINTERN SpectralResamplingFeaturePtr SpectralResamplingFeaturePtr___iter__(SpectralResamplingFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN VTLNFeaturePtr *new_VTLNFeaturePtr(VectorFeatureStreamPtr const &pow,unsigned int coeff_num=0,double ratio=1.0,double edge=1.0,int version=1,String const &nm="VTLN"){
      return new VTLNFeaturePtr(new VTLNFeature(pow, coeff_num, ratio, edge, version, nm));
    }
SWIGINTERN VTLNFeaturePtr VTLNFeaturePtr___iter__(VTLNFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN MelFeaturePtr *new_MelFeaturePtr(VectorFeatureStreamPtr const mag,int pow_num=0,float rate=16000.0,float low=0.0,float up=0.0,int filter_num=30,int version=1,String const &nm="MelFFT"){
      return new MelFeaturePtr(new MelFeature(mag, pow_num, rate, low, up, filter_num, version, nm));
    }
SWIGINTERN MelFeaturePtr MelFeaturePtr___iter__(MelFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SphinxMelFeaturePtr *new_SphinxMelFeaturePtr(VectorFeatureStreamPtr const &mag,unsigned int fftN=512,unsigned int powerN=0,float sampleRate=16000.0,float lowerF=0.0,float upperF=0.0,unsigned int filterN=30,String const &nm="Sphinx Mel Filter Bank"){
      return new SphinxMelFeaturePtr(new SphinxMelFeature(mag, fftN, powerN, sampleRate, lowerF, upperF, filterN, nm));
    }
SWIGINTERN SphinxMelFeaturePtr SphinxMelFeaturePtr___iter__(SphinxMelFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN LogFeaturePtr *new_LogFeaturePtr(VectorFeatureStreamPtr const &mel,double m=1.0,double a=1.0,bool sphinxFlooring=false,String const &nm="LogMel"){
      return new LogFeaturePtr(new LogFeature(mel, m, a, sphinxFlooring, nm));
    }
SWIGINTERN LogFeaturePtr LogFeaturePtr___iter__(LogFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN FloatToDoubleConversionFeaturePtr *new_FloatToDoubleConversionFeaturePtr(VectorFloatFeatureStreamPtr const &src,String const &nm="Float toDoubleConversion"){
      return new FloatToDoubleConversionFeaturePtr(new FloatToDoubleConversionFeature(src, nm));
    }
SWIGINTERN FloatToDoubleConversionFeaturePtr FloatToDoubleConversionFeaturePtr___iter__(FloatToDoubleConversionFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN CepstralFeaturePtr *new_CepstralFeaturePtr(VectorFloatFeatureStreamPtr const mel,unsigned int ncep=13,int type=1,String const nm="Cepstral"){
      return new CepstralFeaturePtr(new CepstralFeature(mel, ncep, type, nm));
    }
SWIGINTERN CepstralFeaturePtr CepstralFeaturePtr___iter__(CepstralFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN WarpMVDRFeaturePtr *new_WarpMVDRFeaturePtr(VectorFloatFeatureStreamPtr const &src,unsigned int order=60,unsigned int correlate=0,float warp=0.0,String const &nm="MVDR"){
      return new WarpMVDRFeaturePtr(new WarpMVDRFeature(src, order, correlate, warp, nm));
    }
SWIGINTERN WarpMVDRFeaturePtr WarpMVDRFeaturePtr___iter__(WarpMVDRFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN BurgMVDRFeaturePtr *new_BurgMVDRFeaturePtr(VectorFloatFeatureStreamPtr const &src,unsigned int order=60,unsigned int correlate=0,float warp=0.0,String const &nm="MVDR"){
      return new BurgMVDRFeaturePtr(new BurgMVDRFeature(src, order, correlate, warp, nm));
    }
SWIGINTERN BurgMVDRFeaturePtr BurgMVDRFeaturePtr___iter__(BurgMVDRFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN WarpedTwiceMVDRFeaturePtr *new_WarpedTwiceMVDRFeaturePtr(VectorFloatFeatureStreamPtr const &src,unsigned int order=60,unsigned int correlate=0,float warp=0.0,bool warpFactorFixed=false,float sensibility=0.1,String const &nm="WTMVDR"){
      return new WarpedTwiceMVDRFeaturePtr(new WarpedTwiceMVDRFeature( src, order, correlate, warp, warpFactorFixed, sensibility, nm));
    }
SWIGINTERN WarpedTwiceMVDRFeaturePtr WarpedTwiceMVDRFeaturePtr___iter__(WarpedTwiceMVDRFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN WarpLPCFeaturePtr *new_WarpLPCFeaturePtr(VectorFloatFeatureStreamPtr const &src,unsigned int order,unsigned int correlate,float warp,String const &nm="LPC"){
      return new WarpLPCFeaturePtr(new WarpLPCFeature(src, order, correlate, warp, nm));
    }
SWIGINTERN WarpLPCFeaturePtr WarpLPCFeaturePtr___iter__(WarpLPCFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN BurgLPCFeaturePtr *new_BurgLPCFeaturePtr(VectorFloatFeatureStreamPtr const &src,unsigned int order,unsigned int correlate,float warp,String const &nm="LPC"){
      return new BurgLPCFeaturePtr(new BurgLPCFeature(src, order, correlate, warp, nm));
    }
SWIGINTERN BurgLPCFeaturePtr BurgLPCFeaturePtr___iter__(BurgLPCFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SpectralSmoothingPtr *new_SpectralSmoothingPtr(VectorFeatureStreamPtr const &adjustTo,VectorFeatureStreamPtr const &adjustFrom,String const &nm="Spectral Smoothing"){
      return new SpectralSmoothingPtr(new SpectralSmoothing(adjustTo, adjustFrom, nm));
    }
SWIGINTERN SpectralSmoothingPtr SpectralSmoothingPtr___iter__(SpectralSmoothingPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN MeanSubtractionFeaturePtr *new_MeanSubtractionFeaturePtr(VectorFloatFeatureStreamPtr const &src,VectorFloatFeatureStreamPtr const &weight=NULL,double devNormFactor=0.0,bool runon=false,String const nm="Mean Subtraction"){
      return new MeanSubtractionFeaturePtr(new MeanSubtractionFeature(src, weight, devNormFactor, runon, nm));
    }
SWIGINTERN MeanSubtractionFeaturePtr MeanSubtractionFeaturePtr___iter__(MeanSubtractionFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN FileMeanSubtractionFeaturePtr *new_FileMeanSubtractionFeaturePtr(VectorFloatFeatureStreamPtr const &src,double devNormFactor=0.0,String const nm="MeanSubtraction"){
      return new FileMeanSubtractionFeaturePtr(new FileMeanSubtractionFeature(src, devNormFactor, nm));
    }
SWIGINTERN FileMeanSubtractionFeaturePtr FileMeanSubtractionFeaturePtr___iter__(FileMeanSubtractionFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN AdjacentFeaturePtr *new_AdjacentFeaturePtr(VectorFloatFeatureStreamPtr const &single,unsigned int delta=5,String const &nm="Adjacent"){
      return new AdjacentFeaturePtr(new AdjacentFeature(single, delta, nm));
    }
SWIGINTERN AdjacentFeaturePtr AdjacentFeaturePtr___iter__(AdjacentFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN LinearTransformFeaturePtr *new_LinearTransformFeaturePtr__SWIG_0(VectorFloatFeatureStreamPtr const &src,unsigned int sz=0,String const &nm="Transform"){

      cout << "Allocating 'LinearTransformFeaturePtr'" << endl;
      return new LinearTransformFeaturePtr(new LinearTransformFeature(src, sz, nm));
    }
SWIGINTERN LinearTransformFeaturePtr LinearTransformFeaturePtr___iter__(LinearTransformFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN StorageFeaturePtr *new_StorageFeaturePtr(VectorFloatFeatureStreamPtr const &src=NULL,String const &nm="Storage"){
      return new StorageFeaturePtr(new StorageFeature(src, nm));
    }
SWIGINTERN StorageFeaturePtr StorageFeaturePtr___iter__(StorageFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN StaticStorageFeaturePtr *new_StaticStorageFeaturePtr(unsigned int dim,String const &nm="Storage"){
      return new StaticStorageFeaturePtr(new StaticStorageFeature(dim, nm));
    }
SWIGINTERN StaticStorageFeaturePtr StaticStorageFeaturePtr___iter__(StaticStorageFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN CircularStorageFeaturePtr *new_CircularStorageFeaturePtr(VectorFloatFeatureStreamPtr const &src,int framesN=3,String const &nm="Storage"){
      return new CircularStorageFeaturePtr(new CircularStorageFeature(src, framesN, nm));
    }
SWIGINTERN CircularStorageFeaturePtr CircularStorageFeaturePtr___iter__(CircularStorageFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN FilterFeaturePtr *new_FilterFeaturePtr(VectorFloatFeatureStreamPtr const &src,gsl_vector *coeffA,String const &nm="Filter"){
      return new FilterFeaturePtr(new FilterFeature(src, coeffA, nm));
    }
SWIGINTERN FilterFeaturePtr FilterFeaturePtr___iter__(FilterFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN MergeFeaturePtr *new_MergeFeaturePtr(VectorFloatFeatureStreamPtr &stat,VectorFloatFeatureStreamPtr &delta,VectorFloatFeatureStreamPtr &deltaDelta,String const &nm="Merge"){
      return new MergeFeaturePtr(new MergeFeature(stat, delta, deltaDelta, nm));
    }
SWIGINTERN MergeFeaturePtr MergeFeaturePtr___iter__(MergeFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN MultiModalFeaturePtr *new_MultiModalFeaturePtr(unsigned int nModality,unsigned int totalVecSize,String const &nm="MultiModal"){
      return new MultiModalFeaturePtr(new MultiModalFeature(nModality, totalVecSize, nm));
    }
SWIGINTERN MultiModalFeaturePtr MultiModalFeaturePtr___iter__(MultiModalFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN FeatureSetPtr *new_FeatureSetPtr(String const nm="FeatureSet"){
      return new FeatureSetPtr(new FeatureSet(nm));
    }
SWIGINTERN VectorFloatFeatureStreamPtr FeatureSetPtr___getitem__(FeatureSetPtr *self,String const name){
      return (*self)->feature(name);
    }
SWIGINTERN ZeroCrossingRateHammingFeaturePtr *new_ZeroCrossingRateHammingFeaturePtr(VectorFloatFeatureStreamPtr const &samp,String const &nm="Zero Crossing Rate Hamming"){
      return new ZeroCrossingRateHammingFeaturePtr(new ZeroCrossingRateHammingFeature(samp, nm));
    }
SWIGINTERN ZeroCrossingRateHammingFeaturePtr ZeroCrossingRateHammingFeaturePtr___iter__(ZeroCrossingRateHammingFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN YINPitchFeaturePtr *new_YINPitchFeaturePtr(VectorFloatFeatureStreamPtr const &samp,unsigned int samplerate=16000,float threshold=0.5,String const &nm="YIN Pitch"){
      return new YINPitchFeaturePtr(new YINPitchFeature(samp, samplerate, threshold, nm));
    }
SWIGINTERN YINPitchFeaturePtr YINPitchFeaturePtr___iter__(YINPitchFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SpikeFilterPtr *new_SpikeFilterPtr(VectorFloatFeatureStreamPtr &src,unsigned int tapN=3,String const nm="SpikeFilter"){
      return new SpikeFilterPtr(new SpikeFilter(src, tapN, nm));
    }
SWIGINTERN SpikeFilterPtr SpikeFilterPtr___iter__(SpikeFilterPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SpikeFilter2Ptr *new_SpikeFilter2Ptr(VectorFloatFeatureStreamPtr &src,unsigned int width=3,float maxslope=7000.0,float startslope=100.0,float thresh=15.0,float alpha=0.2,unsigned int verbose=1,String const &nm="Spike Filter2"){
      return new SpikeFilter2Ptr(new SpikeFilter2(src, width, maxslope, startslope, thresh, alpha, verbose, nm));
    }
SWIGINTERN SpikeFilter2Ptr SpikeFilter2Ptr___iter__(SpikeFilter2Ptr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SoundFilePtr *new_SoundFilePtr(String const &fn,int mode,int format=0,int samplerate=16000,int channels=1,bool normalize=false){
      return new SoundFilePtr(new SoundFile(fn,
                                            mode,
                                            format,
                                            samplerate,
                                            channels,
                                            normalize));
    }
SWIGINTERN DirectSampleFeaturePtr *new_DirectSampleFeaturePtr(SoundFilePtr const &sndfile,unsigned int blockLen=320,unsigned int start=0,unsigned int end=(unsigned int) -1,String const &nm="DirectSample"){
      return new DirectSampleFeaturePtr(new DirectSampleFeature(sndfile, blockLen, start, end, nm));
    }
SWIGINTERN DirectSampleFeaturePtr DirectSampleFeaturePtr___iter__(DirectSampleFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN DirectSampleOutputFeaturePtr *new_DirectSampleOutputFeaturePtr(VectorFloatFeatureStreamPtr const &src,SoundFilePtr const &sndfile,String const &nm="DirectSampleOutput"){
      return new DirectSampleOutputFeaturePtr(new DirectSampleOutputFeature(src, sndfile, nm));
    }
SWIGINTERN DirectSampleOutputFeaturePtr DirectSampleOutputFeaturePtr___iter__(DirectSampleOutputFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN ChannelExtractionFeaturePtr *new_ChannelExtractionFeaturePtr(VectorFloatFeatureStreamPtr const &src,unsigned int chX=0,unsigned int chN=1,String const &nm="ChannelExtraction"){
      return new ChannelExtractionFeaturePtr(new ChannelExtractionFeature(src, chX, chN, nm));
    }
SWIGINTERN ChannelExtractionFeaturePtr ChannelExtractionFeaturePtr___iter__(ChannelExtractionFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SignalInterferenceFeaturePtr *new_SignalInterferenceFeaturePtr(VectorFloatFeatureStreamPtr &signal,VectorFloatFeatureStreamPtr &interference,double dBInterference=0.0,unsigned int blockLen=512,String const &nm="SignalInterference"){
      return new SignalInterferenceFeaturePtr(new SignalInterferenceFeature(signal, interference, dBInterference, blockLen, nm));
    }
SWIGINTERN SignalInterferenceFeaturePtr SignalInterferenceFeaturePtr___iter__(SignalInterferenceFeaturePtr *self){
      (*self)->reset(); return *self;
    }
SWIGINTERN AmplificationFeaturePtr *new_AmplificationFeaturePtr(VectorFloatFeatureStreamPtr const &src,double amplify=1.0,String const &nm="Amplification"){
      return new AmplificationFeaturePtr(new AmplificationFeature(src,
                                                                  amplify,
                                                                  nm));
    }
SWIGINTERN AmplificationFeaturePtr AmplificationFeaturePtr___iter__(AmplificationFeaturePtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN LPCSpectrumEstimatorPtr *new_LPCSpectrumEstimatorPtr(VectorFloatFeatureStreamPtr const &source,unsigned int order,unsigned int fftLen,String const &nm="LPC Spectrum Estimator"){
      return new LPCSpectrumEstimatorPtr(new LPCSpectrumEstimator(source, order, fftLen, nm));
    }
SWIGINTERN LPCSpectrumEstimatorPtr LPCSpectrumEstimatorPtr___iter__(LPCSpectrumEstimatorPtr *self){
      (*self)->reset();  return *self;
    }

  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

SWIGINTERN CepstralSpectrumEstimatorPtr *new_CepstralSpectrumEstimatorPtr(VectorComplexFeatureStreamPtr const &source,unsigned int order,unsigned int fftLen,double logPadding=1.0,String const &nm="CepstralSpectrumEstimator"){
      return new CepstralSpectrumEstimatorPtr(new CepstralSpectrumEstimator(source, order, fftLen, logPadding, nm));
    }
SWIGINTERN CepstralSpectrumEstimatorPtr CepstralSpectrumEstimatorPtr___iter__(CepstralSpectrumEstimatorPtr *self){
      (*self)->reset();  return *self;
    }
SWIGINTERN SEMNBPtr *new_SEMNBPtr(unsigned int order,unsigned int fftLen,String const &nm="SEMNBPtr"){
      return new SEMNBPtr(new SEMNB( order, fftLen,  nm ));
    }
SWIGINTERN WriteSoundFilePtr *new_WriteSoundFilePtr(String const &fn,int sampleRate,int nChan=1,int format=sndfile::SF_FORMAT_WAV|sndfile::SF_FORMAT_PCM_32){
      return new WriteSoundFilePtr(new WriteSoundFile( fn, sampleRate, nChan, format));
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_FileFeaturePtr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  String arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FileFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FileFeaturePtr",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FileFeaturePtr" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    arg2 = String (temps);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (FileFeaturePtr *)new_FileFeaturePtr__SWIG_0(arg1,arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileFeaturePtr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FileFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileFeaturePtr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FileFeaturePtr" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (FileFeaturePtr *)new_FileFeaturePtr__SWIG_0(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileFeaturePtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FileFeaturePtr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FileFeaturePtr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FileFeaturePtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FileFeaturePtr::FileFeaturePtr(unsigned int,String const)\n"
    "    FileFeaturePtr::FileFeaturePtr(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< FileFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr___iter__" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = FileFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new FileFeaturePtr(static_cast< const FileFeaturePtr& >(result))), SWIGTYPE_p_FileFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FileFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr___deref__" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (FileFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileFeaturePtr" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_bload__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  String arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FileFeaturePtr_bload",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_bload" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    arg2 = String (temps);
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileFeaturePtr_bload" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->bload(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_bload__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  String arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileFeaturePtr_bload",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_bload" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    arg2 = String (temps);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->bload(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_bload(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FileFeaturePtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileFeaturePtr_bload__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FileFeaturePtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FileFeaturePtr_bload__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FileFeaturePtr_bload'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FileFeature::bload(String const,bool)\n"
    "    FileFeature::bload(String const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_size" "', argument " "1"" of type '" "FileFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_next" "', argument " "1"" of type '" "FileFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  gsl_matrix_float *arg2 = (gsl_matrix_float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileFeaturePtr_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_copy" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gsl_matrix_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileFeaturePtr_copy" "', argument " "2"" of type '" "gsl_matrix_float *""'"); 
  }
  arg2 = reinterpret_cast< gsl_matrix_float * >(argp2);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->copy(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_name" "', argument " "1"" of type '" "FileFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_is_end" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_current" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileFeaturePtr *arg1 = (FileFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileFeaturePtr_reset" "', argument " "1"" of type '" "FileFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FileFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Conversion24bit2Short__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VectorCharFeatureStreamPtr *arg1 = 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Conversion24bit2Short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Conversion24bit2Short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorCharFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Conversion24bit2Short" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Conversion24bit2Short" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorCharFeatureStreamPtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2Short *)new Conversion24bit2Short(*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2Short, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Conversion24bit2Short__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VectorCharFeatureStreamPtr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Conversion24bit2Short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Conversion24bit2Short",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorCharFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Conversion24bit2Short" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Conversion24bit2Short" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorCharFeatureStreamPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2Short *)new Conversion24bit2Short(*arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2Short, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Conversion24bit2Short(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VectorCharFeatureStreamPtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Conversion24bit2Short__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VectorCharFeatureStreamPtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Conversion24bit2Short__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Conversion24bit2Short'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Conversion24bit2Short::Conversion24bit2Short(VectorCharFeatureStreamPtr &,String const &)\n"
    "    Conversion24bit2Short::Conversion24bit2Short(VectorCharFeatureStreamPtr &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2Short_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Conversion24bit2Short *arg1 = (Conversion24bit2Short *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_short *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Conversion24bit2Short_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2Short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2Short_next" "', argument " "1"" of type '" "Conversion24bit2Short *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2Short * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Conversion24bit2Short_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_short *)(arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_SHORT);
        for (int i=0; i < result->size; i++) {
          ((short*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_short_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_SHORT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2Short_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2Short *arg1 = (Conversion24bit2Short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Conversion24bit2Short_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2Short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2Short_reset" "', argument " "1"" of type '" "Conversion24bit2Short *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2Short * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Conversion24bit2Short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2Short *arg1 = (Conversion24bit2Short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Conversion24bit2Short",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2Short, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Conversion24bit2Short" "', argument " "1"" of type '" "Conversion24bit2Short *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2Short * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Conversion24bit2Short_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Conversion24bit2Short, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Conversion24bit2ShortPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorCharFeatureStreamPtr *arg1 = 0 ;
  String const &arg2_defvalue = "Conversion from 24 bit integer to Short" ;
  String *arg2 = (String *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "nm", NULL 
  };
  Conversion24bit2ShortPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_Conversion24bit2ShortPtr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorCharFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Conversion24bit2ShortPtr" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Conversion24bit2ShortPtr" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorCharFeatureStreamPtr * >(argp1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2ShortPtr *)new_Conversion24bit2ShortPtr(*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2ShortPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2ShortPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2ShortPtr *arg1 = (Conversion24bit2ShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Conversion24bit2ShortPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Conversion24bit2ShortPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2ShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2ShortPtr___iter__" "', argument " "1"" of type '" "Conversion24bit2ShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2ShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = Conversion24bit2ShortPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new Conversion24bit2ShortPtr(static_cast< const Conversion24bit2ShortPtr& >(result))), SWIGTYPE_p_Conversion24bit2ShortPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2ShortPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2ShortPtr *arg1 = (Conversion24bit2ShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Conversion24bit2ShortPtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Conversion24bit2ShortPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2ShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2ShortPtr___deref__" "', argument " "1"" of type '" "Conversion24bit2ShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2ShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2ShortPtr *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2ShortPtr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Conversion24bit2ShortPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2ShortPtr *arg1 = (Conversion24bit2ShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Conversion24bit2ShortPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2ShortPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Conversion24bit2ShortPtr" "', argument " "1"" of type '" "Conversion24bit2ShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2ShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Conversion24bit2ShortPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Conversion24bit2ShortPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Conversion24bit2Float__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VectorCharFeatureStreamPtr *arg1 = 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Conversion24bit2Float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Conversion24bit2Float",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorCharFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Conversion24bit2Float" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Conversion24bit2Float" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorCharFeatureStreamPtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2Float *)new Conversion24bit2Float(*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2Float, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Conversion24bit2Float__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VectorCharFeatureStreamPtr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Conversion24bit2Float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Conversion24bit2Float",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorCharFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Conversion24bit2Float" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Conversion24bit2Float" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorCharFeatureStreamPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2Float *)new Conversion24bit2Float(*arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2Float, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Conversion24bit2Float(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VectorCharFeatureStreamPtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Conversion24bit2Float__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VectorCharFeatureStreamPtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Conversion24bit2Float__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Conversion24bit2Float'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Conversion24bit2Float::Conversion24bit2Float(VectorCharFeatureStreamPtr &,String const &)\n"
    "    Conversion24bit2Float::Conversion24bit2Float(VectorCharFeatureStreamPtr &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2Float_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2Float *arg1 = (Conversion24bit2Float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Conversion24bit2Float_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2Float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2Float_reset" "', argument " "1"" of type '" "Conversion24bit2Float *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2Float * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2Float_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Conversion24bit2Float *arg1 = (Conversion24bit2Float *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:Conversion24bit2Float_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2Float, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2Float_next" "', argument " "1"" of type '" "Conversion24bit2Float *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2Float * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Conversion24bit2Float_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Conversion24bit2Float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2Float *arg1 = (Conversion24bit2Float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Conversion24bit2Float",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2Float, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Conversion24bit2Float" "', argument " "1"" of type '" "Conversion24bit2Float *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2Float * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Conversion24bit2Float_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Conversion24bit2Float, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Conversion24bit2FloatPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorCharFeatureStreamPtr *arg1 = 0 ;
  String const &arg2_defvalue = "Conversion from 24 bit integer to Float" ;
  String *arg2 = (String *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "nm", NULL 
  };
  Conversion24bit2FloatPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_Conversion24bit2FloatPtr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorCharFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Conversion24bit2FloatPtr" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Conversion24bit2FloatPtr" "', argument " "1"" of type '" "VectorCharFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorCharFeatureStreamPtr * >(argp1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2FloatPtr *)new_Conversion24bit2FloatPtr(*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2FloatPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2FloatPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2FloatPtr *arg1 = (Conversion24bit2FloatPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< Conversion24bit2FloatPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Conversion24bit2FloatPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2FloatPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2FloatPtr___iter__" "', argument " "1"" of type '" "Conversion24bit2FloatPtr *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2FloatPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = Conversion24bit2FloatPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new Conversion24bit2FloatPtr(static_cast< const Conversion24bit2FloatPtr& >(result))), SWIGTYPE_p_Conversion24bit2FloatPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Conversion24bit2FloatPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2FloatPtr *arg1 = (Conversion24bit2FloatPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Conversion24bit2FloatPtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Conversion24bit2FloatPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2FloatPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Conversion24bit2FloatPtr___deref__" "', argument " "1"" of type '" "Conversion24bit2FloatPtr *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2FloatPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (Conversion24bit2FloatPtr *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Conversion24bit2FloatPtr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Conversion24bit2FloatPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conversion24bit2FloatPtr *arg1 = (Conversion24bit2FloatPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Conversion24bit2FloatPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conversion24bit2FloatPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Conversion24bit2FloatPtr" "', argument " "1"" of type '" "Conversion24bit2FloatPtr *""'"); 
  }
  arg1 = reinterpret_cast< Conversion24bit2FloatPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Conversion24bit2FloatPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Conversion24bit2FloatPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  String arg1 = (String) (String)"" ;
  unsigned int arg2 = (unsigned int) 320 ;
  unsigned int arg3 = (unsigned int) 160 ;
  bool arg4 = (bool) false ;
  String arg5 = (String) (String)"Sample" ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "fn",(char *) "block_len",(char *) "shift_len",(char *) "pad_zeros",(char *) "nm", NULL 
  };
  SampleFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:new_SampleFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  if (obj0) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
      arg1 = String (temps);
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SampleFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SampleFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SampleFeaturePtr" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      arg5 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SampleFeaturePtr *)new_SampleFeaturePtr(arg1,arg2,arg3,arg4,arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SampleFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SampleFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr___iter__" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SampleFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SampleFeaturePtr(static_cast< const SampleFeaturePtr& >(result))), SWIGTYPE_p_SampleFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SampleFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr___deref__" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SampleFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SampleFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SampleFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SampleFeaturePtr" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  int arg3 = (int) 0 ;
  int arg4 = (int) 16000 ;
  int arg5 = (int) 1 ;
  int arg6 = (int) 1 ;
  int arg7 = (int) 0 ;
  int arg8 = (int) -1 ;
  int arg9 = (int) -1 ;
  float arg10 = (float) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fn",(char *) "format",(char *) "samplerate",(char *) "chX",(char *) "chN",(char *) "cfrom",(char *) "to",(char *) "outsamplerate",(char *) "norm", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOOOOOO:SampleFeaturePtr_read",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_read" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeaturePtr_read" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeaturePtr_read" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SampleFeaturePtr_read" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SampleFeaturePtr_read" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_int(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SampleFeaturePtr_read" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_int(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SampleFeaturePtr_read" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
  }
  if (obj8) {
    ecode9 = SWIG_AsVal_int(obj8, &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SampleFeaturePtr_read" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
  }
  if (obj9) {
    ecode10 = SWIG_AsVal_float(obj9, &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SampleFeaturePtr_read" "', argument " "10"" of type '" "float""'");
    } 
    arg10 = static_cast< float >(val10);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->read((String const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  int arg3 = (int) SF_FORMAT_NIST|SF_FORMAT_PCM_16 ;
  int arg4 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fn",(char *) "format",(char *) "sampleRate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:SampleFeaturePtr_write",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_write" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeaturePtr_write" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeaturePtr_write" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->write((String const &)*arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_cut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cfrom",(char *) "cto", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:SampleFeaturePtr_cut",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_cut" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeaturePtr_cut" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeaturePtr_cut" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->cut(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_reset" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SampleFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_next" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_frame_no(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_frame_no",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_frame_no" "', argument " "1"" of type '" "SampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->frame_no();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_exit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_exit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_exit" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->exit();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_randomize(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "startX",(char *) "endX",(char *) "sigma2", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:SampleFeaturePtr_randomize",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_randomize" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeaturePtr_randomize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeaturePtr_randomize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeaturePtr_randomize" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->randomize(arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_data" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->data();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_samplesN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_samplesN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_samplesN" "', argument " "1"" of type '" "SampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->samplesN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_dataDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_dataDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_dataDouble" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->dataDouble();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_zeroMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_zeroMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_zeroMean" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->zeroMean();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_addWhiteNoise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SampleFeaturePtr_addWhiteNoise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_addWhiteNoise" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeaturePtr_addWhiteNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->addWhiteNoise(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_setSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SampleFeaturePtr_setSamples",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_setSamples" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  
  PyArrayObject *_PyVector2;
  gsl_vector vector2;
  
  {
    if (obj1 == Py_None) {
      _PyVector2 = NULL;
      arg2 = NULL;
    } else {
      int len;
      _PyVector2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 1, 1);
      if (_PyVector2 == NULL)
      return NULL;
      len = _PyVector2->dimensions[0];
      vector2.size = len;
      vector2.stride = 1;
      vector2.data = (double*)_PyVector2->data;
      vector2.block = NULL;
      vector2.owner = 1;
      arg2 = &vector2;
    }
  }
  
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeaturePtr_setSamples" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->setSamples((gsl_vector const *)arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return resultobj;
fail:
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_copySamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  SampleFeaturePtr *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SampleFeaturePtr_copySamples",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_copySamples" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SampleFeaturePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SampleFeaturePtr_copySamples" "', argument " "2"" of type '" "SampleFeaturePtr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SampleFeaturePtr_copySamples" "', argument " "2"" of type '" "SampleFeaturePtr &""'"); 
  }
  arg2 = reinterpret_cast< SampleFeaturePtr * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeaturePtr_copySamples" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeaturePtr_copySamples" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->copySamples(*arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_getSampleRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_getSampleRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_getSampleRate" "', argument " "1"" of type '" "SampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->getSampleRate();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_getChanN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_getChanN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_getChanN" "', argument " "1"" of type '" "SampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->getChanN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_name" "', argument " "1"" of type '" "SampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_size" "', argument " "1"" of type '" "SampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_is_end" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeaturePtr *arg1 = (SampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeaturePtr_current" "', argument " "1"" of type '" "SampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SampleFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SampleFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SampleFeatureRunonPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  String arg1 = (String) (String)"" ;
  unsigned int arg2 = (unsigned int) 320 ;
  unsigned int arg3 = (unsigned int) 160 ;
  bool arg4 = (bool) false ;
  String arg5 = (String) (String)"Sample" ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "fn",(char *) "blockLen",(char *) "shiftLen",(char *) "padZeros",(char *) "nm", NULL 
  };
  SampleFeatureRunonPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOOO:new_SampleFeatureRunonPtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  if (obj0) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
      arg1 = String (temps);
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SampleFeatureRunonPtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SampleFeatureRunonPtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SampleFeatureRunonPtr" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      arg5 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SampleFeatureRunonPtr *)new_SampleFeatureRunonPtr(arg1,arg2,arg3,arg4,arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SampleFeatureRunonPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SampleFeatureRunonPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr___iter__" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SampleFeatureRunonPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SampleFeatureRunonPtr(static_cast< const SampleFeatureRunonPtr& >(result))), SWIGTYPE_p_SampleFeatureRunonPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SampleFeatureRunon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr___deref__" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SampleFeatureRunon *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SampleFeatureRunon, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SampleFeatureRunonPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SampleFeatureRunonPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SampleFeatureRunonPtr" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_frame_no(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_frame_no",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_frame_no" "', argument " "1"" of type '" "SampleFeatureRunonPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->frame_no();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_frameN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_frameN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_frameN" "', argument " "1"" of type '" "SampleFeatureRunonPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->frameN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  String *arg2 = 0 ;
  int arg3 = (int) 0 ;
  int arg4 = (int) 16000 ;
  int arg5 = (int) 1 ;
  int arg6 = (int) 1 ;
  int arg7 = (int) 0 ;
  int arg8 = (int) -1 ;
  int arg9 = (int) -1 ;
  float arg10 = (float) 0.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fn",(char *) "format",(char *) "samplerate",(char *) "chX",(char *) "chN",(char *) "cfrom",(char *) "to",(char *) "outsamplerate",(char *) "norm", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOOOOOO:SampleFeatureRunonPtr_read",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_read" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeatureRunonPtr_read" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeatureRunonPtr_read" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SampleFeatureRunonPtr_read" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SampleFeatureRunonPtr_read" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_int(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SampleFeatureRunonPtr_read" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_int(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SampleFeatureRunonPtr_read" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
  }
  if (obj8) {
    ecode9 = SWIG_AsVal_int(obj8, &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SampleFeatureRunonPtr_read" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
  }
  if (obj9) {
    ecode10 = SWIG_AsVal_float(obj9, &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SampleFeatureRunonPtr_read" "', argument " "10"" of type '" "float""'");
    } 
    arg10 = static_cast< float >(val10);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->read((String const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  String *arg2 = 0 ;
  int arg3 = (int) SF_FORMAT_NIST|SF_FORMAT_PCM_16 ;
  int arg4 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fn",(char *) "format",(char *) "sampleRate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:SampleFeatureRunonPtr_write",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_write" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeatureRunonPtr_write" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeatureRunonPtr_write" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->write((String const &)*arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_cut(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cfrom",(char *) "cto", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:SampleFeatureRunonPtr_cut",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_cut" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeatureRunonPtr_cut" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeatureRunonPtr_cut" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->cut(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_reset" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SampleFeatureRunonPtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_next" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeatureRunonPtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_exit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_exit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_exit" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->exit();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_randomize(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "startX",(char *) "endX",(char *) "sigma2", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:SampleFeatureRunonPtr_randomize",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_randomize" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeatureRunonPtr_randomize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeatureRunonPtr_randomize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeatureRunonPtr_randomize" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->randomize(arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_data",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_data" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->data();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_samplesN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_samplesN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_samplesN" "', argument " "1"" of type '" "SampleFeatureRunonPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->samplesN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_dataDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_dataDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_dataDouble" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->dataDouble();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_zeroMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_zeroMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_zeroMean" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->zeroMean();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_addWhiteNoise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SampleFeatureRunonPtr_addWhiteNoise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_addWhiteNoise" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SampleFeatureRunonPtr_addWhiteNoise" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->addWhiteNoise(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_setSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SampleFeatureRunonPtr_setSamples",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_setSamples" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  
  PyArrayObject *_PyVector2;
  gsl_vector vector2;
  
  {
    if (obj1 == Py_None) {
      _PyVector2 = NULL;
      arg2 = NULL;
    } else {
      int len;
      _PyVector2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 1, 1);
      if (_PyVector2 == NULL)
      return NULL;
      len = _PyVector2->dimensions[0];
      vector2.size = len;
      vector2.stride = 1;
      vector2.data = (double*)_PyVector2->data;
      vector2.block = NULL;
      vector2.owner = 1;
      arg2 = &vector2;
    }
  }
  
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeatureRunonPtr_setSamples" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->setSamples((gsl_vector const *)arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return resultobj;
fail:
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_copySamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  SampleFeaturePtr *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SampleFeatureRunonPtr_copySamples",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_copySamples" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SampleFeaturePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SampleFeatureRunonPtr_copySamples" "', argument " "2"" of type '" "SampleFeaturePtr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SampleFeatureRunonPtr_copySamples" "', argument " "2"" of type '" "SampleFeaturePtr &""'"); 
  }
  arg2 = reinterpret_cast< SampleFeaturePtr * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SampleFeatureRunonPtr_copySamples" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SampleFeatureRunonPtr_copySamples" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->copySamples(*arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_getSampleRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_getSampleRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_getSampleRate" "', argument " "1"" of type '" "SampleFeatureRunonPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->getSampleRate();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_getChanN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_getChanN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_getChanN" "', argument " "1"" of type '" "SampleFeatureRunonPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->getChanN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_name" "', argument " "1"" of type '" "SampleFeatureRunonPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_size" "', argument " "1"" of type '" "SampleFeatureRunonPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_is_end" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SampleFeatureRunonPtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SampleFeatureRunonPtr *arg1 = (SampleFeatureRunonPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SampleFeatureRunonPtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SampleFeatureRunonPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SampleFeatureRunonPtr_current" "', argument " "1"" of type '" "SampleFeatureRunonPtr *""'"); 
  }
  arg1 = reinterpret_cast< SampleFeatureRunonPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SampleFeatureRunonPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SampleFeatureRunonPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IterativeSingleChannelSampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 = (unsigned int) 320 ;
  String const &arg2_defvalue = "IterativeSingleChannelSampleFeature" ;
  String *arg2 = (String *) &arg2_defvalue ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "block_len",(char *) "nm", NULL 
  };
  IterativeSingleChannelSampleFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_IterativeSingleChannelSampleFeaturePtr",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IterativeSingleChannelSampleFeaturePtr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
  }
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (IterativeSingleChannelSampleFeaturePtr *)new_IterativeSingleChannelSampleFeaturePtr(arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< IterativeSingleChannelSampleFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr___iter__" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = IterativeSingleChannelSampleFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new IterativeSingleChannelSampleFeaturePtr(static_cast< const IterativeSingleChannelSampleFeaturePtr& >(result))), SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IterativeSingleChannelSampleFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr___deref__" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (IterativeSingleChannelSampleFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IterativeSingleChannelSampleFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IterativeSingleChannelSampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IterativeSingleChannelSampleFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IterativeSingleChannelSampleFeaturePtr" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  int arg3 = (int) 0 ;
  int arg4 = (int) 44100 ;
  int arg5 = (int) 0 ;
  int arg6 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName",(char *) "format",(char *) "samplerate",(char *) "cfrom",(char *) "cto", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOO:IterativeSingleChannelSampleFeaturePtr_read",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_read" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IterativeSingleChannelSampleFeaturePtr_read" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IterativeSingleChannelSampleFeaturePtr_read" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IterativeSingleChannelSampleFeaturePtr_read" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IterativeSingleChannelSampleFeaturePtr_read" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->read((String const &)*arg2,arg3,arg4,arg5,arg6);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:IterativeSingleChannelSampleFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_next" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IterativeSingleChannelSampleFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_reset" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_samplesN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr_samplesN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_samplesN" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->samplesN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_name" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_size" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_is_end" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSingleChannelSampleFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSingleChannelSampleFeaturePtr *arg1 = (IterativeSingleChannelSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSingleChannelSampleFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSingleChannelSampleFeaturePtr_current" "', argument " "1"" of type '" "IterativeSingleChannelSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSingleChannelSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IterativeSingleChannelSampleFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IterativeSingleChannelSampleFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IterativeSampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 = (unsigned int) 320 ;
  unsigned int arg3 = (unsigned int) 0 ;
  String const &arg4_defvalue = "Iterative Sample" ;
  String *arg4 = (String *) &arg4_defvalue ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "chX",(char *) "blockLen",(char *) "firstChanX",(char *) "nm", NULL 
  };
  IterativeSampleFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_IterativeSampleFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IterativeSampleFeaturePtr" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IterativeSampleFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IterativeSampleFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (IterativeSampleFeaturePtr *)new_IterativeSampleFeaturePtr(arg1,arg2,arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IterativeSampleFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< IterativeSampleFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr___iter__" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = IterativeSampleFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new IterativeSampleFeaturePtr(static_cast< const IterativeSampleFeaturePtr& >(result))), SWIGTYPE_p_IterativeSampleFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IterativeSampleFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr___deref__" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (IterativeSampleFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IterativeSampleFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IterativeSampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IterativeSampleFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IterativeSampleFeaturePtr" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  int arg3 = (int) SF_FORMAT_NIST|SF_FORMAT_PCM_32 ;
  int arg4 = (int) 44100 ;
  int arg5 = (int) 64 ;
  int arg6 = (int) 0 ;
  int arg7 = (int) -1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName",(char *) "format",(char *) "samplerate",(char *) "chN",(char *) "cfrom",(char *) "cto", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOOO:IterativeSampleFeaturePtr_read",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_read" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IterativeSampleFeaturePtr_read" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IterativeSampleFeaturePtr_read" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IterativeSampleFeaturePtr_read" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IterativeSampleFeaturePtr_read" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_int(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IterativeSampleFeaturePtr_read" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->read((String const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:IterativeSampleFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_next" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IterativeSampleFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_samplesN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr_samplesN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_samplesN" "', argument " "1"" of type '" "IterativeSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->samplesN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_changeFirstChannelID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IterativeSampleFeaturePtr_changeFirstChannelID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_changeFirstChannelID" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IterativeSampleFeaturePtr_changeFirstChannelID" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->changeFirstChannelID(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_name" "', argument " "1"" of type '" "IterativeSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_size" "', argument " "1"" of type '" "IterativeSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_is_end" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_current" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IterativeSampleFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IterativeSampleFeaturePtr *arg1 = (IterativeSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IterativeSampleFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IterativeSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IterativeSampleFeaturePtr_reset" "', argument " "1"" of type '" "IterativeSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< IterativeSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IterativeSampleFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IterativeSampleFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BlockSizeConversionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 320 ;
  unsigned int arg3 = (unsigned int) 160 ;
  String const &arg4_defvalue = "BlockSizeConversion" ;
  String *arg4 = (String *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "blockLen",(char *) "shiftLen",(char *) "nm", NULL 
  };
  BlockSizeConversionFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_BlockSizeConversionFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlockSizeConversionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BlockSizeConversionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BlockSizeConversionFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BlockSizeConversionFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (BlockSizeConversionFeaturePtr *)new_BlockSizeConversionFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BlockSizeConversionFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BlockSizeConversionFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr___iter__" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = BlockSizeConversionFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new BlockSizeConversionFeaturePtr(static_cast< const BlockSizeConversionFeaturePtr& >(result))), SWIGTYPE_p_BlockSizeConversionFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BlockSizeConversionFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr___deref__" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (BlockSizeConversionFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BlockSizeConversionFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockSizeConversionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockSizeConversionFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockSizeConversionFeaturePtr" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:BlockSizeConversionFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr_next" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockSizeConversionFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr_name" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr_size" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr_is_end" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr_current" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeaturePtr *arg1 = (BlockSizeConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeaturePtr_reset" "', argument " "1"" of type '" "BlockSizeConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockSizeConversionFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BlockSizeConversionFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BlockSizeConversionFeatureShortPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorShortFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 320 ;
  unsigned int arg3 = (unsigned int) 160 ;
  String const &arg4_defvalue = "BlockSizeConversion" ;
  String *arg4 = (String *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "blockLen",(char *) "shiftLen",(char *) "nm", NULL 
  };
  BlockSizeConversionFeatureShortPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_BlockSizeConversionFeatureShortPtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorShortFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlockSizeConversionFeatureShortPtr" "', argument " "1"" of type '" "VectorShortFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BlockSizeConversionFeatureShortPtr" "', argument " "1"" of type '" "VectorShortFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorShortFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BlockSizeConversionFeatureShortPtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BlockSizeConversionFeatureShortPtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (BlockSizeConversionFeatureShortPtr *)new_BlockSizeConversionFeatureShortPtr(*arg1,arg2,arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeatureShortPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeatureShortPtr *arg1 = (BlockSizeConversionFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BlockSizeConversionFeatureShortPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeatureShortPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeatureShortPtr___iter__" "', argument " "1"" of type '" "BlockSizeConversionFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = BlockSizeConversionFeatureShortPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new BlockSizeConversionFeatureShortPtr(static_cast< const BlockSizeConversionFeatureShortPtr& >(result))), SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeatureShortPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeatureShortPtr *arg1 = (BlockSizeConversionFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BlockSizeConversionFeatureShort *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeatureShortPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeatureShortPtr___deref__" "', argument " "1"" of type '" "BlockSizeConversionFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (BlockSizeConversionFeatureShort *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BlockSizeConversionFeatureShort, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockSizeConversionFeatureShortPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeatureShortPtr *arg1 = (BlockSizeConversionFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockSizeConversionFeatureShortPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockSizeConversionFeatureShortPtr" "', argument " "1"" of type '" "BlockSizeConversionFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeatureShortPtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeatureShortPtr *arg1 = (BlockSizeConversionFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeatureShortPtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeatureShortPtr_next" "', argument " "1"" of type '" "BlockSizeConversionFeatureShortPtr const *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_short *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_SHORT);
        for (int i=0; i < result->size; i++) {
          ((short*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_short_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_SHORT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeatureShortPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeatureShortPtr *arg1 = (BlockSizeConversionFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeatureShortPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeatureShortPtr_name" "', argument " "1"" of type '" "BlockSizeConversionFeatureShortPtr const *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeatureShortPtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeatureShortPtr *arg1 = (BlockSizeConversionFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeatureShortPtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeatureShortPtr_size" "', argument " "1"" of type '" "BlockSizeConversionFeatureShortPtr const *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSizeConversionFeatureShortPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSizeConversionFeatureShortPtr *arg1 = (BlockSizeConversionFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSizeConversionFeatureShortPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSizeConversionFeatureShortPtr_reset" "', argument " "1"" of type '" "BlockSizeConversionFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< BlockSizeConversionFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockSizeConversionFeatureShortPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BlockSizeConversionFeatureShortPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PreemphasisFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  double arg2 = (double) 0.95 ;
  String const &arg3_defvalue = "Preemphasis" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "mu",(char *) "nm", NULL 
  };
  PreemphasisFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_PreemphasisFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PreemphasisFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PreemphasisFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PreemphasisFeaturePtr" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (PreemphasisFeaturePtr *)new_PreemphasisFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PreemphasisFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< PreemphasisFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr___iter__" "', argument " "1"" of type '" "PreemphasisFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = PreemphasisFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new PreemphasisFeaturePtr(static_cast< const PreemphasisFeaturePtr& >(result))), SWIGTYPE_p_PreemphasisFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PreemphasisFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr___deref__" "', argument " "1"" of type '" "PreemphasisFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (PreemphasisFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PreemphasisFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PreemphasisFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PreemphasisFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PreemphasisFeaturePtr" "', argument " "1"" of type '" "PreemphasisFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr_next" "', argument " "1"" of type '" "PreemphasisFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr_reset" "', argument " "1"" of type '" "PreemphasisFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr_next_speaker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr_next_speaker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr_next_speaker" "', argument " "1"" of type '" "PreemphasisFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->next_speaker();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr_name" "', argument " "1"" of type '" "PreemphasisFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr_size" "', argument " "1"" of type '" "PreemphasisFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr_is_end" "', argument " "1"" of type '" "PreemphasisFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PreemphasisFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PreemphasisFeaturePtr *arg1 = (PreemphasisFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PreemphasisFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PreemphasisFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PreemphasisFeaturePtr_current" "', argument " "1"" of type '" "PreemphasisFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< PreemphasisFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PreemphasisFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PreemphasisFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HammingFeatureShortPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorShortFeatureStreamPtr *arg1 = 0 ;
  String const &arg2_defvalue = "HammingShort" ;
  String *arg2 = (String *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "nm", NULL 
  };
  HammingFeatureShortPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_HammingFeatureShortPtr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorShortFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HammingFeatureShortPtr" "', argument " "1"" of type '" "VectorShortFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HammingFeatureShortPtr" "', argument " "1"" of type '" "VectorShortFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorShortFeatureStreamPtr * >(argp1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (HammingFeatureShortPtr *)new_HammingFeatureShortPtr((VectorShortFeatureStreamPtr const &)*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HammingFeatureShortPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< HammingFeatureShortPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr___iter__" "', argument " "1"" of type '" "HammingFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = HammingFeatureShortPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new HammingFeatureShortPtr(static_cast< const HammingFeatureShortPtr& >(result))), SWIGTYPE_p_HammingFeatureShortPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HammingFeatureShort *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr___deref__" "', argument " "1"" of type '" "HammingFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (HammingFeatureShort *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HammingFeatureShort, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HammingFeatureShortPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HammingFeatureShortPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HammingFeatureShortPtr" "', argument " "1"" of type '" "HammingFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr_next" "', argument " "1"" of type '" "HammingFeatureShortPtr const *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr_name" "', argument " "1"" of type '" "HammingFeatureShortPtr const *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr_size" "', argument " "1"" of type '" "HammingFeatureShortPtr const *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr_is_end" "', argument " "1"" of type '" "HammingFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr_current" "', argument " "1"" of type '" "HammingFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeatureShortPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeatureShortPtr *arg1 = (HammingFeatureShortPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeatureShortPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeatureShortPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeatureShortPtr_reset" "', argument " "1"" of type '" "HammingFeatureShortPtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeatureShortPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HammingFeatureShortPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HammingFeatureShortPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HammingFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  String const &arg2_defvalue = "Hamming" ;
  String *arg2 = (String *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "nm", NULL 
  };
  HammingFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_HammingFeaturePtr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HammingFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HammingFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (HammingFeaturePtr *)new_HammingFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HammingFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< HammingFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr___iter__" "', argument " "1"" of type '" "HammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = HammingFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new HammingFeaturePtr(static_cast< const HammingFeaturePtr& >(result))), SWIGTYPE_p_HammingFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  HammingFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr___deref__" "', argument " "1"" of type '" "HammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (HammingFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HammingFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HammingFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HammingFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HammingFeaturePtr" "', argument " "1"" of type '" "HammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr_next" "', argument " "1"" of type '" "HammingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr_name" "', argument " "1"" of type '" "HammingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr_size" "', argument " "1"" of type '" "HammingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr_is_end" "', argument " "1"" of type '" "HammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr_current" "', argument " "1"" of type '" "HammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HammingFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HammingFeaturePtr *arg1 = (HammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HammingFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_HammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HammingFeaturePtr_reset" "', argument " "1"" of type '" "HammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< HammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HammingFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HammingFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FFTFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr arg1 ;
  unsigned int arg2 = (unsigned int) 512 ;
  String const &arg3_defvalue = "FFT" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "fft_len",(char *) "nm", NULL 
  };
  FFTFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_FFTFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FFTFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FFTFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const""'");
    } else {
      VectorFloatFeatureStreamPtr * temp = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FFTFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (FFTFeaturePtr *)new_FFTFeaturePtr(arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FFTFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< FFTFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr___iter__" "', argument " "1"" of type '" "FFTFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = FFTFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new FFTFeaturePtr(static_cast< const FFTFeaturePtr& >(result))), SWIGTYPE_p_FFTFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FFTFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr___deref__" "', argument " "1"" of type '" "FFTFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (FFTFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FFTFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FFTFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FFTFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FFTFeaturePtr" "', argument " "1"" of type '" "FFTFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_complex *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:FFTFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_next" "', argument " "1"" of type '" "FFTFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FFTFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_complex *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_CDOUBLE);
        for (int i=0; i < result->size; i++) {
          ((gsl_complex*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_complex_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_CDOUBLE, (char*)result->data);
      //  ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_fftLen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_fftLen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_fftLen" "', argument " "1"" of type '" "FFTFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->fftLen();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_windowLen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_windowLen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_windowLen" "', argument " "1"" of type '" "FFTFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->windowLen();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_nBlocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_nBlocks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_nBlocks" "', argument " "1"" of type '" "FFTFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->nBlocks();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_subsamplerate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_subsamplerate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_subsamplerate" "', argument " "1"" of type '" "FFTFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->subsamplerate();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_name" "', argument " "1"" of type '" "FFTFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_size" "', argument " "1"" of type '" "FFTFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_complex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_current" "', argument " "1"" of type '" "FFTFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_complex *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_CDOUBLE);
        for (int i=0; i < result->size; i++) {
          ((gsl_complex*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_complex_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_CDOUBLE, (char*)result->data);
      //  ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FFTFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FFTFeaturePtr *arg1 = (FFTFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FFTFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FFTFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FFTFeaturePtr_reset" "', argument " "1"" of type '" "FFTFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FFTFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FFTFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FFTFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpectralPowerFloatFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorComplexFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 0 ;
  String arg3 = (String) (String)"Power" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "fft",(char *) "powN",(char *) "nm", NULL 
  };
  SpectralPowerFloatFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_SpectralPowerFloatFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorComplexFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpectralPowerFloatFeaturePtr" "', argument " "1"" of type '" "VectorComplexFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpectralPowerFloatFeaturePtr" "', argument " "1"" of type '" "VectorComplexFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorComplexFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralPowerFloatFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      arg3 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralPowerFloatFeaturePtr *)new_SpectralPowerFloatFeaturePtr((VectorComplexFeatureStreamPtr const &)*arg1,arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralPowerFloatFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SpectralPowerFloatFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr___iter__" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SpectralPowerFloatFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SpectralPowerFloatFeaturePtr(static_cast< const SpectralPowerFloatFeaturePtr& >(result))), SWIGTYPE_p_SpectralPowerFloatFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SpectralPowerFloatFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr___deref__" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralPowerFloatFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralPowerFloatFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpectralPowerFloatFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpectralPowerFloatFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralPowerFloatFeaturePtr" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr_next" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr_name" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr_size" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr_is_end" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr_current" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFloatFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFloatFeaturePtr *arg1 = (SpectralPowerFloatFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFloatFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFloatFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFloatFeaturePtr_reset" "', argument " "1"" of type '" "SpectralPowerFloatFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFloatFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpectralPowerFloatFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralPowerFloatFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpectralPowerFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorComplexFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 0 ;
  String arg3 = (String) (String)"Power" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "fft",(char *) "pow_num",(char *) "nm", NULL 
  };
  SpectralPowerFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_SpectralPowerFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorComplexFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpectralPowerFeaturePtr" "', argument " "1"" of type '" "VectorComplexFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpectralPowerFeaturePtr" "', argument " "1"" of type '" "VectorComplexFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorComplexFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralPowerFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      arg3 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralPowerFeaturePtr *)new_SpectralPowerFeaturePtr((VectorComplexFeatureStreamPtr const &)*arg1,arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralPowerFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SpectralPowerFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFeaturePtr___iter__" "', argument " "1"" of type '" "SpectralPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SpectralPowerFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SpectralPowerFeaturePtr(static_cast< const SpectralPowerFeaturePtr& >(result))), SWIGTYPE_p_SpectralPowerFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SpectralPowerFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFeaturePtr___deref__" "', argument " "1"" of type '" "SpectralPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralPowerFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralPowerFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpectralPowerFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpectralPowerFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralPowerFeaturePtr" "', argument " "1"" of type '" "SpectralPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFeaturePtr_next" "', argument " "1"" of type '" "SpectralPowerFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFeaturePtr_name" "', argument " "1"" of type '" "SpectralPowerFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFeaturePtr_size" "', argument " "1"" of type '" "SpectralPowerFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFeaturePtr_current" "', argument " "1"" of type '" "SpectralPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralPowerFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralPowerFeaturePtr *arg1 = (SpectralPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralPowerFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralPowerFeaturePtr_reset" "', argument " "1"" of type '" "SpectralPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpectralPowerFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralPowerFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SignalPowerFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  String arg2 = (String) (String)"SignalPower" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "nm", NULL 
  };
  SignalPowerFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_SignalPowerFeaturePtr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SignalPowerFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SignalPowerFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      arg2 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SignalPowerFeaturePtr *)new_SignalPowerFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SignalPowerFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SignalPowerFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr___iter__" "', argument " "1"" of type '" "SignalPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SignalPowerFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SignalPowerFeaturePtr(static_cast< const SignalPowerFeaturePtr& >(result))), SWIGTYPE_p_SignalPowerFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SignalPowerFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr___deref__" "', argument " "1"" of type '" "SignalPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SignalPowerFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SignalPowerFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SignalPowerFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SignalPowerFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SignalPowerFeaturePtr" "', argument " "1"" of type '" "SignalPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr_next" "', argument " "1"" of type '" "SignalPowerFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr_name" "', argument " "1"" of type '" "SignalPowerFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr_size" "', argument " "1"" of type '" "SignalPowerFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr_is_end" "', argument " "1"" of type '" "SignalPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr_current" "', argument " "1"" of type '" "SignalPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalPowerFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalPowerFeaturePtr *arg1 = (SignalPowerFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalPowerFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalPowerFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalPowerFeaturePtr_reset" "', argument " "1"" of type '" "SignalPowerFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalPowerFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SignalPowerFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SignalPowerFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ALogFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  double arg2 = (double) 1.0 ;
  double arg3 = (double) 4.0 ;
  bool arg4 = (bool) false ;
  String arg5 = (String) (String)"ALog Power" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "m",(char *) "a",(char *) "runon",(char *) "nm", NULL 
  };
  ALogFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_ALogFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ALogFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ALogFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ALogFeaturePtr" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ALogFeaturePtr" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ALogFeaturePtr" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      arg5 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (ALogFeaturePtr *)new_ALogFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ALogFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< ALogFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr___iter__" "', argument " "1"" of type '" "ALogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = ALogFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new ALogFeaturePtr(static_cast< const ALogFeaturePtr& >(result))), SWIGTYPE_p_ALogFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ALogFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr___deref__" "', argument " "1"" of type '" "ALogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (ALogFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ALogFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ALogFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ALogFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ALogFeaturePtr" "', argument " "1"" of type '" "ALogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr_next" "', argument " "1"" of type '" "ALogFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr_next_speaker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr_next_speaker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr_next_speaker" "', argument " "1"" of type '" "ALogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->next_speaker();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr_name" "', argument " "1"" of type '" "ALogFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr_size" "', argument " "1"" of type '" "ALogFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr_is_end" "', argument " "1"" of type '" "ALogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr_current" "', argument " "1"" of type '" "ALogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALogFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ALogFeaturePtr *arg1 = (ALogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ALogFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ALogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ALogFeaturePtr_reset" "', argument " "1"" of type '" "ALogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ALogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ALogFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ALogFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NormalizeFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  double arg2 = (double) 0.0 ;
  double arg3 = (double) 1.0 ;
  bool arg4 = (bool) false ;
  String arg5 = (String) (String)"Normalize" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "min",(char *) "max",(char *) "runon",(char *) "nm", NULL 
  };
  NormalizeFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_NormalizeFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NormalizeFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalizeFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NormalizeFeaturePtr" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NormalizeFeaturePtr" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_NormalizeFeaturePtr" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      arg5 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (NormalizeFeaturePtr *)new_NormalizeFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NormalizeFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< NormalizeFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr___iter__" "', argument " "1"" of type '" "NormalizeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = NormalizeFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new NormalizeFeaturePtr(static_cast< const NormalizeFeaturePtr& >(result))), SWIGTYPE_p_NormalizeFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NormalizeFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr___deref__" "', argument " "1"" of type '" "NormalizeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (NormalizeFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NormalizeFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NormalizeFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NormalizeFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NormalizeFeaturePtr" "', argument " "1"" of type '" "NormalizeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr_next" "', argument " "1"" of type '" "NormalizeFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr_next_speaker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr_next_speaker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr_next_speaker" "', argument " "1"" of type '" "NormalizeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->next_speaker();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr_name" "', argument " "1"" of type '" "NormalizeFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr_size" "', argument " "1"" of type '" "NormalizeFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr_is_end" "', argument " "1"" of type '" "NormalizeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr_current" "', argument " "1"" of type '" "NormalizeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalizeFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NormalizeFeaturePtr *arg1 = (NormalizeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NormalizeFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NormalizeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalizeFeaturePtr_reset" "', argument " "1"" of type '" "NormalizeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< NormalizeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NormalizeFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NormalizeFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ThresholdFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  double arg2 = (double) 0.0 ;
  double arg3 = (double) 1.0 ;
  String const &arg4_defvalue = "upper" ;
  String *arg4 = (String *) &arg4_defvalue ;
  String const &arg5_defvalue = "Threshold" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "value",(char *) "thresh",(char *) "mode",(char *) "nm", NULL 
  };
  ThresholdFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_ThresholdFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThresholdFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThresholdFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ThresholdFeaturePtr" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ThresholdFeaturePtr" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (ThresholdFeaturePtr *)new_ThresholdFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,(String const &)*arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ThresholdFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< ThresholdFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr___iter__" "', argument " "1"" of type '" "ThresholdFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = ThresholdFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new ThresholdFeaturePtr(static_cast< const ThresholdFeaturePtr& >(result))), SWIGTYPE_p_ThresholdFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ThresholdFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr___deref__" "', argument " "1"" of type '" "ThresholdFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (ThresholdFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ThresholdFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThresholdFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThresholdFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThresholdFeaturePtr" "', argument " "1"" of type '" "ThresholdFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr_next" "', argument " "1"" of type '" "ThresholdFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr_name" "', argument " "1"" of type '" "ThresholdFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr_size" "', argument " "1"" of type '" "ThresholdFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr_is_end" "', argument " "1"" of type '" "ThresholdFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr_current" "', argument " "1"" of type '" "ThresholdFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThresholdFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ThresholdFeaturePtr *arg1 = (ThresholdFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThresholdFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ThresholdFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThresholdFeaturePtr_reset" "', argument " "1"" of type '" "ThresholdFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ThresholdFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThresholdFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ThresholdFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpectralResamplingFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFeatureStreamPtr *arg1 = 0 ;
  double arg2 ;
  unsigned int arg3 = (unsigned int) 0 ;
  String const &arg4_defvalue = "Resampling" ;
  String *arg4 = (String *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "ratio",(char *) "len",(char *) "nm", NULL 
  };
  SpectralResamplingFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_SpectralResamplingFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpectralResamplingFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpectralResamplingFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFeatureStreamPtr * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpectralResamplingFeaturePtr" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpectralResamplingFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralResamplingFeaturePtr *)new_SpectralResamplingFeaturePtr((VectorFeatureStreamPtr const &)*arg1,arg2,arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralResamplingFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralResamplingFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SpectralResamplingFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralResamplingFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralResamplingFeaturePtr___iter__" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SpectralResamplingFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SpectralResamplingFeaturePtr(static_cast< const SpectralResamplingFeaturePtr& >(result))), SWIGTYPE_p_SpectralResamplingFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralResamplingFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SpectralResamplingFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralResamplingFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralResamplingFeaturePtr___deref__" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralResamplingFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralResamplingFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpectralResamplingFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpectralResamplingFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralResamplingFeaturePtr" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralResamplingFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SpectralResamplingFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralResamplingFeaturePtr_next" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpectralResamplingFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralResamplingFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralResamplingFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralResamplingFeaturePtr_name" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralResamplingFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralResamplingFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralResamplingFeaturePtr_size" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralResamplingFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralResamplingFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralResamplingFeaturePtr_current" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralResamplingFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralResamplingFeaturePtr *arg1 = (SpectralResamplingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralResamplingFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralResamplingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralResamplingFeaturePtr_reset" "', argument " "1"" of type '" "SpectralResamplingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralResamplingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpectralResamplingFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralResamplingFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VTLNFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 0 ;
  double arg3 = (double) 1.0 ;
  double arg4 = (double) 1.0 ;
  int arg5 = (int) 1 ;
  String const &arg6_defvalue = "VTLN" ;
  String *arg6 = (String *) &arg6_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  String tempstr6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "pow",(char *) "coeff_num",(char *) "ratio",(char *) "edge",(char *) "version",(char *) "nm", NULL 
  };
  VTLNFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOO:new_VTLNFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VTLNFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VTLNFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VTLNFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VTLNFeaturePtr" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VTLNFeaturePtr" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VTLNFeaturePtr" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj5, &temps, &templ)) return NULL;
      tempstr6 = String(temps);
      arg6 = &tempstr6;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (VTLNFeaturePtr *)new_VTLNFeaturePtr((VectorFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,arg5,(String const &)*arg6);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VTLNFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< VTLNFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VTLNFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr___iter__" "', argument " "1"" of type '" "VTLNFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = VTLNFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new VTLNFeaturePtr(static_cast< const VTLNFeaturePtr& >(result))), SWIGTYPE_p_VTLNFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  VTLNFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VTLNFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr___deref__" "', argument " "1"" of type '" "VTLNFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (VTLNFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VTLNFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VTLNFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VTLNFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VTLNFeaturePtr" "', argument " "1"" of type '" "VTLNFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:VTLNFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr_next" "', argument " "1"" of type '" "VTLNFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VTLNFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  gsl_matrix *arg2 = (gsl_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "matrix", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VTLNFeaturePtr_matrix",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr_matrix" "', argument " "1"" of type '" "VTLNFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  
  PyArrayObject *_PyMatrix2;
  gsl_matrix_view matrix2;
  {
    if (obj1 == Py_None) {
      _PyMatrix2 = NULL;
      arg2 = NULL;
    } else {
      _PyMatrix2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 2, 2);
      if (_PyMatrix2 == NULL)
      return NULL;
      matrix2
      = gsl_matrix_view_array((double*)_PyMatrix2->data,
        _PyMatrix2->dimensions[0],
        _PyMatrix2->dimensions[1]);    
      arg2 = &matrix2.matrix;
    }
  }
  
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->matrix(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  {
    if (_PyMatrix2 != NULL)
    Py_DECREF(_PyMatrix2);
  }
  return resultobj;
fail:
  {
    if (_PyMatrix2 != NULL)
    Py_DECREF(_PyMatrix2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr_warp(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "w", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:VTLNFeaturePtr_warp",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr_warp" "', argument " "1"" of type '" "VTLNFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VTLNFeaturePtr_warp" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->warp(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VTLNFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr_name" "', argument " "1"" of type '" "VTLNFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VTLNFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr_size" "', argument " "1"" of type '" "VTLNFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VTLNFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr_current" "', argument " "1"" of type '" "VTLNFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VTLNFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VTLNFeaturePtr *arg1 = (VTLNFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VTLNFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VTLNFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VTLNFeaturePtr_reset" "', argument " "1"" of type '" "VTLNFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< VTLNFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VTLNFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VTLNFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MelFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFeatureStreamPtr arg1 ;
  int arg2 = (int) 0 ;
  float arg3 = (float) 16000.0 ;
  float arg4 = (float) 0.0 ;
  float arg5 = (float) 0.0 ;
  int arg6 = (int) 30 ;
  int arg7 = (int) 1 ;
  String const &arg8_defvalue = "MelFFT" ;
  String *arg8 = (String *) &arg8_defvalue ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  String tempstr8 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "mag",(char *) "pow_num",(char *) "rate",(char *) "low",(char *) "up",(char *) "filter_num",(char *) "version",(char *) "nm", NULL 
  };
  MelFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOOO:new_MelFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFeatureStreamPtr,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MelFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MelFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const""'");
    } else {
      VectorFeatureStreamPtr * temp = reinterpret_cast< VectorFeatureStreamPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MelFeaturePtr" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MelFeaturePtr" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MelFeaturePtr" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_MelFeaturePtr" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_MelFeaturePtr" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_int(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_MelFeaturePtr" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
  }
  if (obj7) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj7, &temps, &templ)) return NULL;
      tempstr8 = String(temps);
      arg8 = &tempstr8;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (MelFeaturePtr *)new_MelFeaturePtr(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(String const &)*arg8);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< MelFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MelFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr___iter__" "', argument " "1"" of type '" "MelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = MelFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new MelFeaturePtr(static_cast< const MelFeaturePtr& >(result))), SWIGTYPE_p_MelFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MelFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MelFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr___deref__" "', argument " "1"" of type '" "MelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (MelFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MelFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MelFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MelFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MelFeaturePtr" "', argument " "1"" of type '" "MelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MelFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr_next" "', argument " "1"" of type '" "MelFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MelFeaturePtr_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr_read" "', argument " "1"" of type '" "MelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->read((String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  gsl_matrix *arg2 = (gsl_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "matrix", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:MelFeaturePtr_matrix",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr_matrix" "', argument " "1"" of type '" "MelFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  
  PyArrayObject *_PyMatrix2;
  gsl_matrix_view matrix2;
  {
    if (obj1 == Py_None) {
      _PyMatrix2 = NULL;
      arg2 = NULL;
    } else {
      _PyMatrix2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 2, 2);
      if (_PyMatrix2 == NULL)
      return NULL;
      matrix2
      = gsl_matrix_view_array((double*)_PyMatrix2->data,
        _PyMatrix2->dimensions[0],
        _PyMatrix2->dimensions[1]);    
      arg2 = &matrix2.matrix;
    }
  }
  
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->matrix(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  {
    if (_PyMatrix2 != NULL)
    Py_DECREF(_PyMatrix2);
  }
  return resultobj;
fail:
  {
    if (_PyMatrix2 != NULL)
    Py_DECREF(_PyMatrix2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MelFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr_name" "', argument " "1"" of type '" "MelFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MelFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr_size" "', argument " "1"" of type '" "MelFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MelFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr_current" "', argument " "1"" of type '" "MelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MelFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MelFeaturePtr *arg1 = (MelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MelFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MelFeaturePtr_reset" "', argument " "1"" of type '" "MelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MelFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MelFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SphinxMelFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 512 ;
  unsigned int arg3 = (unsigned int) 0 ;
  float arg4 = (float) 16000.0 ;
  float arg5 = (float) 0.0 ;
  float arg6 = (float) 0.0 ;
  unsigned int arg7 = (unsigned int) 30 ;
  String const &arg8_defvalue = "Sphinx Mel Filter Bank" ;
  String *arg8 = (String *) &arg8_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  String tempstr8 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "mag",(char *) "fftN",(char *) "powerN",(char *) "sampleRate",(char *) "lowerF",(char *) "upperF",(char *) "filterN",(char *) "nm", NULL 
  };
  SphinxMelFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOOO:new_SphinxMelFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SphinxMelFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SphinxMelFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SphinxMelFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SphinxMelFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SphinxMelFeaturePtr" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SphinxMelFeaturePtr" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_float(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SphinxMelFeaturePtr" "', argument " "6"" of type '" "float""'");
    } 
    arg6 = static_cast< float >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SphinxMelFeaturePtr" "', argument " "7"" of type '" "unsigned int""'");
    } 
    arg7 = static_cast< unsigned int >(val7);
  }
  if (obj7) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj7, &temps, &templ)) return NULL;
      tempstr8 = String(temps);
      arg8 = &tempstr8;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SphinxMelFeaturePtr *)new_SphinxMelFeaturePtr((VectorFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,(String const &)*arg8);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SphinxMelFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphinxMelFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SphinxMelFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphinxMelFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphinxMelFeaturePtr___iter__" "', argument " "1"" of type '" "SphinxMelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SphinxMelFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SphinxMelFeaturePtr(static_cast< const SphinxMelFeaturePtr& >(result))), SWIGTYPE_p_SphinxMelFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphinxMelFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SphinxMelFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphinxMelFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphinxMelFeaturePtr___deref__" "', argument " "1"" of type '" "SphinxMelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SphinxMelFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SphinxMelFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SphinxMelFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SphinxMelFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SphinxMelFeaturePtr" "', argument " "1"" of type '" "SphinxMelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphinxMelFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphinxMelFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphinxMelFeaturePtr_next" "', argument " "1"" of type '" "SphinxMelFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphinxMelFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphinxMelFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphinxMelFeaturePtr_name" "', argument " "1"" of type '" "SphinxMelFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphinxMelFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphinxMelFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphinxMelFeaturePtr_size" "', argument " "1"" of type '" "SphinxMelFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphinxMelFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphinxMelFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphinxMelFeaturePtr_current" "', argument " "1"" of type '" "SphinxMelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SphinxMelFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SphinxMelFeaturePtr *arg1 = (SphinxMelFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SphinxMelFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SphinxMelFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SphinxMelFeaturePtr_reset" "', argument " "1"" of type '" "SphinxMelFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SphinxMelFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SphinxMelFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SphinxMelFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LogFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFeatureStreamPtr *arg1 = 0 ;
  double arg2 = (double) 1.0 ;
  double arg3 = (double) 1.0 ;
  bool arg4 = (bool) false ;
  String const &arg5_defvalue = "LogMel" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "mel",(char *) "m",(char *) "a",(char *) "sphinxFlooring",(char *) "nm", NULL 
  };
  LogFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_LogFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogFeaturePtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LogFeaturePtr" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LogFeaturePtr" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LogFeaturePtr" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (LogFeaturePtr *)new_LogFeaturePtr((VectorFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LogFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< LogFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr___iter__" "', argument " "1"" of type '" "LogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = LogFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new LogFeaturePtr(static_cast< const LogFeaturePtr& >(result))), SWIGTYPE_p_LogFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LogFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr___deref__" "', argument " "1"" of type '" "LogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (LogFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LogFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LogFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogFeaturePtr" "', argument " "1"" of type '" "LogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr_next" "', argument " "1"" of type '" "LogFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr_name" "', argument " "1"" of type '" "LogFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr_size" "', argument " "1"" of type '" "LogFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr_is_end" "', argument " "1"" of type '" "LogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr_current" "', argument " "1"" of type '" "LogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LogFeaturePtr *arg1 = (LogFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LogFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFeaturePtr_reset" "', argument " "1"" of type '" "LogFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LogFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LogFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FloatToDoubleConversionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  String const &arg2_defvalue = "Float toDoubleConversion" ;
  String *arg2 = (String *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "nm", NULL 
  };
  FloatToDoubleConversionFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_FloatToDoubleConversionFeaturePtr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FloatToDoubleConversionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FloatToDoubleConversionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (FloatToDoubleConversionFeaturePtr *)new_FloatToDoubleConversionFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FloatToDoubleConversionFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatToDoubleConversionFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FloatToDoubleConversionFeaturePtr *arg1 = (FloatToDoubleConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< FloatToDoubleConversionFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatToDoubleConversionFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FloatToDoubleConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatToDoubleConversionFeaturePtr___iter__" "', argument " "1"" of type '" "FloatToDoubleConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FloatToDoubleConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = FloatToDoubleConversionFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new FloatToDoubleConversionFeaturePtr(static_cast< const FloatToDoubleConversionFeaturePtr& >(result))), SWIGTYPE_p_FloatToDoubleConversionFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatToDoubleConversionFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FloatToDoubleConversionFeaturePtr *arg1 = (FloatToDoubleConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FloatToDoubleConversionFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatToDoubleConversionFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FloatToDoubleConversionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatToDoubleConversionFeaturePtr___deref__" "', argument " "1"" of type '" "FloatToDoubleConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FloatToDoubleConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (FloatToDoubleConversionFeaturePtr *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FloatToDoubleConversionFeaturePtr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FloatToDoubleConversionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FloatToDoubleConversionFeaturePtr *arg1 = (FloatToDoubleConversionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FloatToDoubleConversionFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FloatToDoubleConversionFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FloatToDoubleConversionFeaturePtr" "', argument " "1"" of type '" "FloatToDoubleConversionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FloatToDoubleConversionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FloatToDoubleConversionFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FloatToDoubleConversionFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CepstralFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr arg1 ;
  unsigned int arg2 = (unsigned int) 13 ;
  int arg3 = (int) 1 ;
  String arg4 = (String) (String)"Cepstral" ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "mel",(char *) "ncep",(char *) "type",(char *) "nm", NULL 
  };
  CepstralFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_CepstralFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CepstralFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CepstralFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const""'");
    } else {
      VectorFloatFeatureStreamPtr * temp = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CepstralFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CepstralFeaturePtr" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      arg4 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (CepstralFeaturePtr *)new_CepstralFeaturePtr(arg1,arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CepstralFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< CepstralFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr___iter__" "', argument " "1"" of type '" "CepstralFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = CepstralFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new CepstralFeaturePtr(static_cast< const CepstralFeaturePtr& >(result))), SWIGTYPE_p_CepstralFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CepstralFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr___deref__" "', argument " "1"" of type '" "CepstralFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (CepstralFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CepstralFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CepstralFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CepstralFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CepstralFeaturePtr" "', argument " "1"" of type '" "CepstralFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr_next" "', argument " "1"" of type '" "CepstralFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_matrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr_matrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr_matrix" "', argument " "1"" of type '" "CepstralFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_matrix *)(*arg1)->matrix();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[2];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size1;
      dims[1] = result->size2;
      resultobj = PyArray_FromDimsAndData(2, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr_name" "', argument " "1"" of type '" "CepstralFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr_size" "', argument " "1"" of type '" "CepstralFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr_is_end" "', argument " "1"" of type '" "CepstralFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr_current" "', argument " "1"" of type '" "CepstralFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralFeaturePtr *arg1 = (CepstralFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralFeaturePtr_reset" "', argument " "1"" of type '" "CepstralFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CepstralFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CepstralFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WarpMVDRFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 60 ;
  unsigned int arg3 = (unsigned int) 0 ;
  float arg4 = (float) 0.0 ;
  String const &arg5_defvalue = "MVDR" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "order",(char *) "correlate",(char *) "warp",(char *) "nm", NULL 
  };
  WarpMVDRFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_WarpMVDRFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WarpMVDRFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WarpMVDRFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WarpMVDRFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WarpMVDRFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WarpMVDRFeaturePtr" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (WarpMVDRFeaturePtr *)new_WarpMVDRFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WarpMVDRFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpMVDRFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< WarpMVDRFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpMVDRFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpMVDRFeaturePtr___iter__" "', argument " "1"" of type '" "WarpMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = WarpMVDRFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new WarpMVDRFeaturePtr(static_cast< const WarpMVDRFeaturePtr& >(result))), SWIGTYPE_p_WarpMVDRFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpMVDRFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WarpMVDRFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpMVDRFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpMVDRFeaturePtr___deref__" "', argument " "1"" of type '" "WarpMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (WarpMVDRFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WarpMVDRFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WarpMVDRFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WarpMVDRFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WarpMVDRFeaturePtr" "', argument " "1"" of type '" "WarpMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpMVDRFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpMVDRFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpMVDRFeaturePtr_next" "', argument " "1"" of type '" "WarpMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpMVDRFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpMVDRFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpMVDRFeaturePtr_name" "', argument " "1"" of type '" "WarpMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpMVDRFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpMVDRFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpMVDRFeaturePtr_size" "', argument " "1"" of type '" "WarpMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpMVDRFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpMVDRFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpMVDRFeaturePtr_current" "', argument " "1"" of type '" "WarpMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpMVDRFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpMVDRFeaturePtr *arg1 = (WarpMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpMVDRFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpMVDRFeaturePtr_reset" "', argument " "1"" of type '" "WarpMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WarpMVDRFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_WarpMVDRFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BurgMVDRFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 60 ;
  unsigned int arg3 = (unsigned int) 0 ;
  float arg4 = (float) 0.0 ;
  String const &arg5_defvalue = "MVDR" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "order",(char *) "correlate",(char *) "warp",(char *) "nm", NULL 
  };
  BurgMVDRFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_BurgMVDRFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BurgMVDRFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BurgMVDRFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BurgMVDRFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BurgMVDRFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BurgMVDRFeaturePtr" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (BurgMVDRFeaturePtr *)new_BurgMVDRFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BurgMVDRFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgMVDRFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BurgMVDRFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgMVDRFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgMVDRFeaturePtr___iter__" "', argument " "1"" of type '" "BurgMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = BurgMVDRFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new BurgMVDRFeaturePtr(static_cast< const BurgMVDRFeaturePtr& >(result))), SWIGTYPE_p_BurgMVDRFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgMVDRFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BurgMVDRFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgMVDRFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgMVDRFeaturePtr___deref__" "', argument " "1"" of type '" "BurgMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (BurgMVDRFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BurgMVDRFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BurgMVDRFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BurgMVDRFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BurgMVDRFeaturePtr" "', argument " "1"" of type '" "BurgMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgMVDRFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgMVDRFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgMVDRFeaturePtr_next" "', argument " "1"" of type '" "BurgMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgMVDRFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgMVDRFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgMVDRFeaturePtr_name" "', argument " "1"" of type '" "BurgMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgMVDRFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgMVDRFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgMVDRFeaturePtr_size" "', argument " "1"" of type '" "BurgMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgMVDRFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgMVDRFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgMVDRFeaturePtr_current" "', argument " "1"" of type '" "BurgMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgMVDRFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgMVDRFeaturePtr *arg1 = (BurgMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgMVDRFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgMVDRFeaturePtr_reset" "', argument " "1"" of type '" "BurgMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BurgMVDRFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BurgMVDRFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WarpedTwiceMVDRFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 60 ;
  unsigned int arg3 = (unsigned int) 0 ;
  float arg4 = (float) 0.0 ;
  bool arg5 = (bool) false ;
  float arg6 = (float) 0.1 ;
  String const &arg7_defvalue = "WTMVDR" ;
  String *arg7 = (String *) &arg7_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  String tempstr7 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "order",(char *) "correlate",(char *) "warp",(char *) "warpFactorFixed",(char *) "sensibility",(char *) "nm", NULL 
  };
  WarpedTwiceMVDRFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOO:new_WarpedTwiceMVDRFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WarpedTwiceMVDRFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WarpedTwiceMVDRFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WarpedTwiceMVDRFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WarpedTwiceMVDRFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WarpedTwiceMVDRFeaturePtr" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_WarpedTwiceMVDRFeaturePtr" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_float(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_WarpedTwiceMVDRFeaturePtr" "', argument " "6"" of type '" "float""'");
    } 
    arg6 = static_cast< float >(val6);
  }
  if (obj6) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj6, &temps, &templ)) return NULL;
      tempstr7 = String(temps);
      arg7 = &tempstr7;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (WarpedTwiceMVDRFeaturePtr *)new_WarpedTwiceMVDRFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,arg5,arg6,(String const &)*arg7);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedTwiceMVDRFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< WarpedTwiceMVDRFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedTwiceMVDRFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedTwiceMVDRFeaturePtr___iter__" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = WarpedTwiceMVDRFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new WarpedTwiceMVDRFeaturePtr(static_cast< const WarpedTwiceMVDRFeaturePtr& >(result))), SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedTwiceMVDRFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WarpedTwiceMVDRFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedTwiceMVDRFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedTwiceMVDRFeaturePtr___deref__" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (WarpedTwiceMVDRFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WarpedTwiceMVDRFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WarpedTwiceMVDRFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WarpedTwiceMVDRFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WarpedTwiceMVDRFeaturePtr" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedTwiceMVDRFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frameX", NULL 
  };
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:WarpedTwiceMVDRFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedTwiceMVDRFeaturePtr_next" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WarpedTwiceMVDRFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedTwiceMVDRFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedTwiceMVDRFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedTwiceMVDRFeaturePtr_reset" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedTwiceMVDRFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedTwiceMVDRFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedTwiceMVDRFeaturePtr_name" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedTwiceMVDRFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedTwiceMVDRFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedTwiceMVDRFeaturePtr_size" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpedTwiceMVDRFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpedTwiceMVDRFeaturePtr *arg1 = (WarpedTwiceMVDRFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpedTwiceMVDRFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpedTwiceMVDRFeaturePtr_current" "', argument " "1"" of type '" "WarpedTwiceMVDRFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpedTwiceMVDRFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WarpedTwiceMVDRFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_WarpedTwiceMVDRFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WarpLPCFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  float arg4 ;
  String const &arg5_defvalue = "LPC" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "order",(char *) "correlate",(char *) "warp",(char *) "nm", NULL 
  };
  WarpLPCFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:new_WarpLPCFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WarpLPCFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WarpLPCFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WarpLPCFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WarpLPCFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WarpLPCFeaturePtr" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (WarpLPCFeaturePtr *)new_WarpLPCFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WarpLPCFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpLPCFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< WarpLPCFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpLPCFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpLPCFeaturePtr___iter__" "', argument " "1"" of type '" "WarpLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = WarpLPCFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new WarpLPCFeaturePtr(static_cast< const WarpLPCFeaturePtr& >(result))), SWIGTYPE_p_WarpLPCFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpLPCFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WarpLPCFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpLPCFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpLPCFeaturePtr___deref__" "', argument " "1"" of type '" "WarpLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (WarpLPCFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WarpLPCFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WarpLPCFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WarpLPCFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WarpLPCFeaturePtr" "', argument " "1"" of type '" "WarpLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpLPCFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpLPCFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpLPCFeaturePtr_next" "', argument " "1"" of type '" "WarpLPCFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpLPCFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpLPCFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpLPCFeaturePtr_name" "', argument " "1"" of type '" "WarpLPCFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpLPCFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpLPCFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpLPCFeaturePtr_size" "', argument " "1"" of type '" "WarpLPCFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpLPCFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpLPCFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpLPCFeaturePtr_current" "', argument " "1"" of type '" "WarpLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WarpLPCFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WarpLPCFeaturePtr *arg1 = (WarpLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WarpLPCFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WarpLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WarpLPCFeaturePtr_reset" "', argument " "1"" of type '" "WarpLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< WarpLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WarpLPCFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_WarpLPCFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BurgLPCFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  float arg4 ;
  String const &arg5_defvalue = "LPC" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "order",(char *) "correlate",(char *) "warp",(char *) "nm", NULL 
  };
  BurgLPCFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:new_BurgLPCFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BurgLPCFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BurgLPCFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BurgLPCFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BurgLPCFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BurgLPCFeaturePtr" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (BurgLPCFeaturePtr *)new_BurgLPCFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BurgLPCFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgLPCFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< BurgLPCFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgLPCFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgLPCFeaturePtr___iter__" "', argument " "1"" of type '" "BurgLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = BurgLPCFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new BurgLPCFeaturePtr(static_cast< const BurgLPCFeaturePtr& >(result))), SWIGTYPE_p_BurgLPCFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgLPCFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  BurgLPCFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgLPCFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgLPCFeaturePtr___deref__" "', argument " "1"" of type '" "BurgLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (BurgLPCFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BurgLPCFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BurgLPCFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BurgLPCFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BurgLPCFeaturePtr" "', argument " "1"" of type '" "BurgLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgLPCFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgLPCFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgLPCFeaturePtr_next" "', argument " "1"" of type '" "BurgLPCFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgLPCFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgLPCFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgLPCFeaturePtr_name" "', argument " "1"" of type '" "BurgLPCFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgLPCFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgLPCFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgLPCFeaturePtr_size" "', argument " "1"" of type '" "BurgLPCFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgLPCFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgLPCFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgLPCFeaturePtr_current" "', argument " "1"" of type '" "BurgLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BurgLPCFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BurgLPCFeaturePtr *arg1 = (BurgLPCFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BurgLPCFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BurgLPCFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BurgLPCFeaturePtr_reset" "', argument " "1"" of type '" "BurgLPCFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< BurgLPCFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BurgLPCFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BurgLPCFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpectralSmoothingPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFeatureStreamPtr *arg1 = 0 ;
  VectorFeatureStreamPtr *arg2 = 0 ;
  String const &arg3_defvalue = "Spectral Smoothing" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "adjustTo",(char *) "adjustFrom",(char *) "nm", NULL 
  };
  SpectralSmoothingPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_SpectralSmoothingPtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpectralSmoothingPtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpectralSmoothingPtr" "', argument " "1"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFeatureStreamPtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VectorFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpectralSmoothingPtr" "', argument " "2"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpectralSmoothingPtr" "', argument " "2"" of type '" "VectorFeatureStreamPtr const &""'"); 
  }
  arg2 = reinterpret_cast< VectorFeatureStreamPtr * >(argp2);
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralSmoothingPtr *)new_SpectralSmoothingPtr((VectorFeatureStreamPtr const &)*arg1,(VectorFeatureStreamPtr const &)*arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralSmoothingPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralSmoothingPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SpectralSmoothingPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralSmoothingPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralSmoothingPtr___iter__" "', argument " "1"" of type '" "SpectralSmoothingPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SpectralSmoothingPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SpectralSmoothingPtr(static_cast< const SpectralSmoothingPtr& >(result))), SWIGTYPE_p_SpectralSmoothingPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralSmoothingPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SpectralSmoothing *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralSmoothingPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralSmoothingPtr___deref__" "', argument " "1"" of type '" "SpectralSmoothingPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpectralSmoothing *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpectralSmoothing, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpectralSmoothingPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpectralSmoothingPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpectralSmoothingPtr" "', argument " "1"" of type '" "SpectralSmoothingPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralSmoothingPtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralSmoothingPtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralSmoothingPtr_next" "', argument " "1"" of type '" "SpectralSmoothingPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralSmoothingPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralSmoothingPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralSmoothingPtr_name" "', argument " "1"" of type '" "SpectralSmoothingPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralSmoothingPtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralSmoothingPtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralSmoothingPtr_size" "', argument " "1"" of type '" "SpectralSmoothingPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralSmoothingPtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralSmoothingPtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralSmoothingPtr_current" "', argument " "1"" of type '" "SpectralSmoothingPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpectralSmoothingPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpectralSmoothingPtr *arg1 = (SpectralSmoothingPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpectralSmoothingPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpectralSmoothingPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpectralSmoothingPtr_reset" "', argument " "1"" of type '" "SpectralSmoothingPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpectralSmoothingPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpectralSmoothingPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpectralSmoothingPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MeanSubtractionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  VectorFloatFeatureStreamPtr const &arg2_defvalue = NULL ;
  VectorFloatFeatureStreamPtr *arg2 = (VectorFloatFeatureStreamPtr *) &arg2_defvalue ;
  double arg3 = (double) 0.0 ;
  bool arg4 = (bool) false ;
  String arg5 = (String) (String)"Mean Subtraction" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "weight",(char *) "devNormFactor",(char *) "runon",(char *) "nm", NULL 
  };
  MeanSubtractionFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_MeanSubtractionFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeanSubtractionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeanSubtractionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MeanSubtractionFeaturePtr" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeanSubtractionFeaturePtr" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
    }
    arg2 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MeanSubtractionFeaturePtr" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MeanSubtractionFeaturePtr" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      arg5 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (MeanSubtractionFeaturePtr *)new_MeanSubtractionFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,(VectorFloatFeatureStreamPtr const &)*arg2,arg3,arg4,arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MeanSubtractionFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< MeanSubtractionFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr___iter__" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = MeanSubtractionFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new MeanSubtractionFeaturePtr(static_cast< const MeanSubtractionFeaturePtr& >(result))), SWIGTYPE_p_MeanSubtractionFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MeanSubtractionFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr___deref__" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (MeanSubtractionFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MeanSubtractionFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeanSubtractionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MeanSubtractionFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeanSubtractionFeaturePtr" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:MeanSubtractionFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_next" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeanSubtractionFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr_mean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_mean" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->mean();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName",(char *) "variance", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:MeanSubtractionFeaturePtr_write",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_write" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeanSubtractionFeaturePtr_write" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->write((String const &)*arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_next_speaker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr_next_speaker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_next_speaker" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->next_speaker();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_name" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_size" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_is_end" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_current" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeanSubtractionFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MeanSubtractionFeaturePtr *arg1 = (MeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeanSubtractionFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeanSubtractionFeaturePtr_reset" "', argument " "1"" of type '" "MeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeanSubtractionFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MeanSubtractionFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileMeanSubtractionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  double arg2 = (double) 0.0 ;
  String arg3 = (String) (String)"MeanSubtraction" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "devNormFactor",(char *) "nm", NULL 
  };
  FileMeanSubtractionFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_FileMeanSubtractionFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileMeanSubtractionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileMeanSubtractionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileMeanSubtractionFeaturePtr" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      arg3 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (FileMeanSubtractionFeaturePtr *)new_FileMeanSubtractionFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileMeanSubtractionFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< FileMeanSubtractionFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileMeanSubtractionFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr___iter__" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = FileMeanSubtractionFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new FileMeanSubtractionFeaturePtr(static_cast< const FileMeanSubtractionFeaturePtr& >(result))), SWIGTYPE_p_FileMeanSubtractionFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FileMeanSubtractionFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileMeanSubtractionFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr___deref__" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (FileMeanSubtractionFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileMeanSubtractionFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileMeanSubtractionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileMeanSubtractionFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileMeanSubtractionFeaturePtr" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:FileMeanSubtractionFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr_next" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileMeanSubtractionFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName",(char *) "variance", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:FileMeanSubtractionFeaturePtr_read",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr_read" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileMeanSubtractionFeaturePtr_read" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->read((String const &)*arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileMeanSubtractionFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr_name" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileMeanSubtractionFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr_size" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileMeanSubtractionFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr_is_end" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileMeanSubtractionFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr_current" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileMeanSubtractionFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileMeanSubtractionFeaturePtr *arg1 = (FileMeanSubtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileMeanSubtractionFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileMeanSubtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileMeanSubtractionFeaturePtr_reset" "', argument " "1"" of type '" "FileMeanSubtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FileMeanSubtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileMeanSubtractionFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FileMeanSubtractionFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AdjacentFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 5 ;
  String const &arg3_defvalue = "Adjacent" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "single",(char *) "delta",(char *) "nm", NULL 
  };
  AdjacentFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_AdjacentFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdjacentFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdjacentFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdjacentFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (AdjacentFeaturePtr *)new_AdjacentFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AdjacentFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< AdjacentFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr___iter__" "', argument " "1"" of type '" "AdjacentFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = AdjacentFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new AdjacentFeaturePtr(static_cast< const AdjacentFeaturePtr& >(result))), SWIGTYPE_p_AdjacentFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  AdjacentFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr___deref__" "', argument " "1"" of type '" "AdjacentFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (AdjacentFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AdjacentFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AdjacentFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AdjacentFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AdjacentFeaturePtr" "', argument " "1"" of type '" "AdjacentFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr_next" "', argument " "1"" of type '" "AdjacentFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr_name" "', argument " "1"" of type '" "AdjacentFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr_size" "', argument " "1"" of type '" "AdjacentFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr_is_end" "', argument " "1"" of type '" "AdjacentFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr_current" "', argument " "1"" of type '" "AdjacentFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdjacentFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AdjacentFeaturePtr *arg1 = (AdjacentFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdjacentFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AdjacentFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdjacentFeaturePtr_reset" "', argument " "1"" of type '" "AdjacentFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AdjacentFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AdjacentFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AdjacentFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LinearTransformFeaturePtr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 ;
  String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  LinearTransformFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LinearTransformFeaturePtr",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearTransformFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearTransformFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearTransformFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
    tempstr3 = String(temps);
    arg3 = &tempstr3;
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (LinearTransformFeaturePtr *)new_LinearTransformFeaturePtr__SWIG_0((VectorFloatFeatureStreamPtr const &)*arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LinearTransformFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinearTransformFeaturePtr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LinearTransformFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LinearTransformFeaturePtr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearTransformFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearTransformFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearTransformFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    //jpython_error *pe = NULL;
    try {
      result = (LinearTransformFeaturePtr *)new_LinearTransformFeaturePtr__SWIG_0((VectorFloatFeatureStreamPtr const &)*arg1,arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LinearTransformFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinearTransformFeaturePtr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LinearTransformFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LinearTransformFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearTransformFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearTransformFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (LinearTransformFeaturePtr *)new_LinearTransformFeaturePtr__SWIG_0((VectorFloatFeatureStreamPtr const &)*arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LinearTransformFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinearTransformFeaturePtr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_VectorFloatFeatureStreamPtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearTransformFeaturePtr__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_VectorFloatFeatureStreamPtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LinearTransformFeaturePtr__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_VectorFloatFeatureStreamPtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_String, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_LinearTransformFeaturePtr__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LinearTransformFeaturePtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    LinearTransformFeaturePtr::LinearTransformFeaturePtr(VectorFloatFeatureStreamPtr const &,unsigned int,String const &)\n"
    "    LinearTransformFeaturePtr::LinearTransformFeaturePtr(VectorFloatFeatureStreamPtr const &,unsigned int)\n"
    "    LinearTransformFeaturePtr::LinearTransformFeaturePtr(VectorFloatFeatureStreamPtr const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< LinearTransformFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr___iter__" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = LinearTransformFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new LinearTransformFeaturePtr(static_cast< const LinearTransformFeaturePtr& >(result))), SWIGTYPE_p_LinearTransformFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LinearTransformFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr___deref__" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (LinearTransformFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LinearTransformFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LinearTransformFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LinearTransformFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearTransformFeaturePtr" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:LinearTransformFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_next" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearTransformFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_matrix_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr_matrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_matrix" "', argument " "1"" of type '" "LinearTransformFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_matrix_float *)(*arg1)->matrix();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gsl_matrix_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName",(char *) "old", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:LinearTransformFeaturePtr_load",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_load" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LinearTransformFeaturePtr_load" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->load((String const &)*arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_identity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr_identity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_identity" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->identity();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_name" "', argument " "1"" of type '" "LinearTransformFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_size" "', argument " "1"" of type '" "LinearTransformFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_is_end" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_current" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearTransformFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LinearTransformFeaturePtr *arg1 = (LinearTransformFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearTransformFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LinearTransformFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearTransformFeaturePtr_reset" "', argument " "1"" of type '" "LinearTransformFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< LinearTransformFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearTransformFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LinearTransformFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StorageFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr const &arg1_defvalue = NULL ;
  VectorFloatFeatureStreamPtr *arg1 = (VectorFloatFeatureStreamPtr *) &arg1_defvalue ;
  String const &arg2_defvalue = "Storage" ;
  String *arg2 = (String *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "nm", NULL 
  };
  StorageFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OO:new_StorageFeaturePtr",kwnames,&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StorageFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StorageFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
    }
    arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  }
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (StorageFeaturePtr *)new_StorageFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StorageFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< StorageFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr___iter__" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = StorageFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new StorageFeaturePtr(static_cast< const StorageFeaturePtr& >(result))), SWIGTYPE_p_StorageFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  StorageFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr___deref__" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (StorageFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StorageFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StorageFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StorageFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StorageFeaturePtr" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:StorageFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_next" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StorageFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  bool arg3 = (bool) false ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName",(char *) "plainText", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:StorageFeaturePtr_write",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_write" "', argument " "1"" of type '" "StorageFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StorageFeaturePtr_write" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->write((String const &)*arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StorageFeaturePtr_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_read" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->read((String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr_evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_evaluate" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->evaluate();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_reset" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_name" "', argument " "1"" of type '" "StorageFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_size" "', argument " "1"" of type '" "StorageFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_is_end" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StorageFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StorageFeaturePtr *arg1 = (StorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StorageFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StorageFeaturePtr_current" "', argument " "1"" of type '" "StorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StorageFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StorageFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StaticStorageFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  String const &arg2_defvalue = "Storage" ;
  String *arg2 = (String *) &arg2_defvalue ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "dim",(char *) "nm", NULL 
  };
  StaticStorageFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_StaticStorageFeaturePtr",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StaticStorageFeaturePtr" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (StaticStorageFeaturePtr *)new_StaticStorageFeaturePtr(arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StaticStorageFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< StaticStorageFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr___iter__" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = StaticStorageFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new StaticStorageFeaturePtr(static_cast< const StaticStorageFeaturePtr& >(result))), SWIGTYPE_p_StaticStorageFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  StaticStorageFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr___deref__" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (StaticStorageFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StaticStorageFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StaticStorageFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StaticStorageFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StaticStorageFeaturePtr" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:StaticStorageFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_next" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StaticStorageFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fileName", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:StaticStorageFeaturePtr_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_read" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    tempstr2 = String(temps);
    arg2 = &tempstr2;
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->read((String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_evaluate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr_evaluate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_evaluate" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->evaluate();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_reset" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_currentNFrames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr_currentNFrames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_currentNFrames" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->currentNFrames();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_name" "', argument " "1"" of type '" "StaticStorageFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_size" "', argument " "1"" of type '" "StaticStorageFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_is_end" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StaticStorageFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StaticStorageFeaturePtr *arg1 = (StaticStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StaticStorageFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_StaticStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StaticStorageFeaturePtr_current" "', argument " "1"" of type '" "StaticStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< StaticStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StaticStorageFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StaticStorageFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CircularStorageFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  int arg2 = (int) 3 ;
  String const &arg3_defvalue = "Storage" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "framesN",(char *) "nm", NULL 
  };
  CircularStorageFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_CircularStorageFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CircularStorageFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CircularStorageFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CircularStorageFeaturePtr" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (CircularStorageFeaturePtr *)new_CircularStorageFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CircularStorageFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< CircularStorageFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircularStorageFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr___iter__" "', argument " "1"" of type '" "CircularStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = CircularStorageFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new CircularStorageFeaturePtr(static_cast< const CircularStorageFeaturePtr& >(result))), SWIGTYPE_p_CircularStorageFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CircularStorageFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircularStorageFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr___deref__" "', argument " "1"" of type '" "CircularStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (CircularStorageFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CircularStorageFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CircularStorageFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CircularStorageFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CircularStorageFeaturePtr" "', argument " "1"" of type '" "CircularStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:CircularStorageFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr_next" "', argument " "1"" of type '" "CircularStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CircularStorageFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircularStorageFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr_name" "', argument " "1"" of type '" "CircularStorageFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircularStorageFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr_size" "', argument " "1"" of type '" "CircularStorageFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircularStorageFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr_is_end" "', argument " "1"" of type '" "CircularStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircularStorageFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr_current" "', argument " "1"" of type '" "CircularStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircularStorageFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CircularStorageFeaturePtr *arg1 = (CircularStorageFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircularStorageFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CircularStorageFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircularStorageFeaturePtr_reset" "', argument " "1"" of type '" "CircularStorageFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< CircularStorageFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CircularStorageFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CircularStorageFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FilterFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  String const &arg3_defvalue = "Filter" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "coeffA",(char *) "nm", NULL 
  };
  FilterFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_FilterFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FilterFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FilterFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  
  PyArrayObject *_PyVector2;
  gsl_vector vector2;
  
  {
    if (obj1 == Py_None) {
      _PyVector2 = NULL;
      arg2 = NULL;
    } else {
      int len;
      _PyVector2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 1, 1);
      if (_PyVector2 == NULL)
      return NULL;
      len = _PyVector2->dimensions[0];
      vector2.size = len;
      vector2.stride = 1;
      vector2.data = (double*)_PyVector2->data;
      vector2.block = NULL;
      vector2.owner = 1;
      arg2 = &vector2;
    }
  }
  
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (FilterFeaturePtr *)new_FilterFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FilterFeaturePtr, SWIG_POINTER_NEW |  0 );
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return resultobj;
fail:
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< FilterFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr___iter__" "', argument " "1"" of type '" "FilterFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = FilterFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new FilterFeaturePtr(static_cast< const FilterFeaturePtr& >(result))), SWIGTYPE_p_FilterFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FilterFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr___deref__" "', argument " "1"" of type '" "FilterFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (FilterFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FilterFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FilterFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FilterFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FilterFeaturePtr" "', argument " "1"" of type '" "FilterFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:FilterFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr_next" "', argument " "1"" of type '" "FilterFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FilterFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr_name" "', argument " "1"" of type '" "FilterFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr_size" "', argument " "1"" of type '" "FilterFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr_is_end" "', argument " "1"" of type '" "FilterFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr_current" "', argument " "1"" of type '" "FilterFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FilterFeaturePtr *arg1 = (FilterFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FilterFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterFeaturePtr_reset" "', argument " "1"" of type '" "FilterFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< FilterFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FilterFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FilterFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MergeFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  VectorFloatFeatureStreamPtr *arg2 = 0 ;
  VectorFloatFeatureStreamPtr *arg3 = 0 ;
  String const &arg4_defvalue = "Merge" ;
  String *arg4 = (String *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "stat",(char *) "delta",(char *) "deltaDelta",(char *) "nm", NULL 
  };
  MergeFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:new_MergeFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MergeFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MergeFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MergeFeaturePtr" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MergeFeaturePtr" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg2 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MergeFeaturePtr" "', argument " "3"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MergeFeaturePtr" "', argument " "3"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg3 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp3);
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (MergeFeaturePtr *)new_MergeFeaturePtr(*arg1,*arg2,*arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MergeFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< MergeFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr___iter__" "', argument " "1"" of type '" "MergeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = MergeFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new MergeFeaturePtr(static_cast< const MergeFeaturePtr& >(result))), SWIGTYPE_p_MergeFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MergeFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr___deref__" "', argument " "1"" of type '" "MergeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (MergeFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MergeFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MergeFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MergeFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MergeFeaturePtr" "', argument " "1"" of type '" "MergeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:MergeFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr_next" "', argument " "1"" of type '" "MergeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MergeFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr_name" "', argument " "1"" of type '" "MergeFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr_size" "', argument " "1"" of type '" "MergeFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr_is_end" "', argument " "1"" of type '" "MergeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr_current" "', argument " "1"" of type '" "MergeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeFeaturePtr *arg1 = (MergeFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeFeaturePtr_reset" "', argument " "1"" of type '" "MergeFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MergeFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MergeFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MergeFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MultiModalFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  String const &arg3_defvalue = "MultiModal" ;
  String *arg3 = (String *) &arg3_defvalue ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "nModality",(char *) "totalVecSize",(char *) "nm", NULL 
  };
  MultiModalFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_MultiModalFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MultiModalFeaturePtr" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MultiModalFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (MultiModalFeaturePtr *)new_MultiModalFeaturePtr(arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MultiModalFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< MultiModalFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiModalFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr___iter__" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = MultiModalFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new MultiModalFeaturePtr(static_cast< const MultiModalFeaturePtr& >(result))), SWIGTYPE_p_MultiModalFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MultiModalFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiModalFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr___deref__" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (MultiModalFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MultiModalFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiModalFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultiModalFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiModalFeaturePtr" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:MultiModalFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_next" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiModalFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_addModalFeature__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  VectorFloatFeatureStreamPtr *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiModalFeaturePtr_addModalFeature",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_addModalFeature" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiModalFeaturePtr_addModalFeature" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiModalFeaturePtr_addModalFeature" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg2 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiModalFeaturePtr_addModalFeature" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->addModalFeature(*arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_addModalFeature__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  VectorFloatFeatureStreamPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiModalFeaturePtr_addModalFeature",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_addModalFeature" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiModalFeaturePtr_addModalFeature" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiModalFeaturePtr_addModalFeature" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg2 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp2);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->addModalFeature(*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_addModalFeature(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MultiModalFeaturePtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VectorFloatFeatureStreamPtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MultiModalFeaturePtr_addModalFeature__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MultiModalFeaturePtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_VectorFloatFeatureStreamPtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MultiModalFeaturePtr_addModalFeature__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MultiModalFeaturePtr_addModalFeature'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MultiModalFeature::addModalFeature(VectorFloatFeatureStreamPtr &,unsigned int)\n"
    "    MultiModalFeature::addModalFeature(VectorFloatFeatureStreamPtr &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiModalFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_name" "', argument " "1"" of type '" "MultiModalFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiModalFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_size" "', argument " "1"" of type '" "MultiModalFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiModalFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_is_end" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiModalFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_current" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiModalFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MultiModalFeaturePtr *arg1 = (MultiModalFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiModalFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MultiModalFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiModalFeaturePtr_reset" "', argument " "1"" of type '" "MultiModalFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< MultiModalFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiModalFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MultiModalFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FeatureSetPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  String arg1 = (String) (String)"FeatureSet" ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "nm", NULL 
  };
  FeatureSetPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:new_FeatureSetPtr",kwnames,&obj0)) SWIG_fail;
  if (obj0) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
      arg1 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (FeatureSetPtr *)new_FeatureSetPtr(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FeatureSetPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureSetPtr___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FeatureSetPtr *arg1 = (FeatureSetPtr *) 0 ;
  String arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  VectorFloatFeatureStreamPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureSetPtr___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FeatureSetPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureSetPtr___getitem__" "', argument " "1"" of type '" "FeatureSetPtr *""'"); 
  }
  arg1 = reinterpret_cast< FeatureSetPtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    arg2 = String (temps);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = FeatureSetPtr___getitem__(arg1,arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new VectorFloatFeatureStreamPtr(static_cast< const VectorFloatFeatureStreamPtr& >(result))), SWIGTYPE_p_VectorFloatFeatureStreamPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureSetPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FeatureSetPtr *arg1 = (FeatureSetPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FeatureSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureSetPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FeatureSetPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureSetPtr___deref__" "', argument " "1"" of type '" "FeatureSetPtr *""'"); 
  }
  arg1 = reinterpret_cast< FeatureSetPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (FeatureSet *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FeatureSet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FeatureSetPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FeatureSetPtr *arg1 = (FeatureSetPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FeatureSetPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FeatureSetPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FeatureSetPtr" "', argument " "1"" of type '" "FeatureSetPtr *""'"); 
  }
  arg1 = reinterpret_cast< FeatureSetPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureSetPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FeatureSetPtr *arg1 = (FeatureSetPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureSetPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FeatureSetPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureSetPtr_name" "', argument " "1"" of type '" "FeatureSetPtr const *""'"); 
  }
  arg1 = reinterpret_cast< FeatureSetPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new String(static_cast< const String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureSetPtr_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  FeatureSetPtr *arg1 = (FeatureSetPtr *) 0 ;
  VectorFloatFeatureStreamPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "feat", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FeatureSetPtr_add",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FeatureSetPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureSetPtr_add" "', argument " "1"" of type '" "FeatureSetPtr *""'"); 
  }
  arg1 = reinterpret_cast< FeatureSetPtr * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureSetPtr_add" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureSetPtr_add" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr""'");
    } else {
      VectorFloatFeatureStreamPtr * temp = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->add(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureSetPtr_feature(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  FeatureSetPtr *arg1 = (FeatureSetPtr *) 0 ;
  String arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "nm", NULL 
  };
  VectorFloatFeatureStreamPtr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FeatureSetPtr_feature",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FeatureSetPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureSetPtr_feature" "', argument " "1"" of type '" "FeatureSetPtr *""'"); 
  }
  arg1 = reinterpret_cast< FeatureSetPtr * >(argp1);
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
    arg2 = String (temps);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->feature(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new VectorFloatFeatureStreamPtr(static_cast< const VectorFloatFeatureStreamPtr& >(result))), SWIGTYPE_p_VectorFloatFeatureStreamPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FeatureSetPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FeatureSetPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_writeGSLMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  String *arg1 = 0 ;
  gsl_matrix *arg2 = (gsl_matrix *) 0 ;
  String tempstr1 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:writeGSLMatrix",&obj0,&obj1)) SWIG_fail;
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
    tempstr1 = String(temps);
    arg1 = &tempstr1;
  }
  
  PyArrayObject *_PyMatrix2;
  gsl_matrix_view matrix2;
  {
    if (obj1 == Py_None) {
      _PyMatrix2 = NULL;
      arg2 = NULL;
    } else {
      _PyMatrix2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 2, 2);
      if (_PyMatrix2 == NULL)
      return NULL;
      matrix2
      = gsl_matrix_view_array((double*)_PyMatrix2->data,
        _PyMatrix2->dimensions[0],
        _PyMatrix2->dimensions[1]);    
      arg2 = &matrix2.matrix;
    }
  }
  
  {
    //jpython_error *pe = NULL;
    try {
      writeGSLMatrix((String const &)*arg1,(gsl_matrix const *)arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  {
    if (_PyMatrix2 != NULL)
    Py_DECREF(_PyMatrix2);
  }
  return resultobj;
fail:
  {
    if (_PyMatrix2 != NULL)
    Py_DECREF(_PyMatrix2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ZeroCrossingRateHammingFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  String const &arg2_defvalue = "Zero Crossing Rate Hamming" ;
  String *arg2 = (String *) &arg2_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  String tempstr2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "nm", NULL 
  };
  ZeroCrossingRateHammingFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:new_ZeroCrossingRateHammingFeaturePtr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ZeroCrossingRateHammingFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ZeroCrossingRateHammingFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj1, &temps, &templ)) return NULL;
      tempstr2 = String(temps);
      arg2 = &tempstr2;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (ZeroCrossingRateHammingFeaturePtr *)new_ZeroCrossingRateHammingFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,(String const &)*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< ZeroCrossingRateHammingFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr___iter__" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = ZeroCrossingRateHammingFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new ZeroCrossingRateHammingFeaturePtr(static_cast< const ZeroCrossingRateHammingFeaturePtr& >(result))), SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ZeroCrossingRateHammingFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr___deref__" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (ZeroCrossingRateHammingFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZeroCrossingRateHammingFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ZeroCrossingRateHammingFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ZeroCrossingRateHammingFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ZeroCrossingRateHammingFeaturePtr" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr_next" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr_name" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr_size" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr_is_end" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr_current" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroCrossingRateHammingFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroCrossingRateHammingFeaturePtr *arg1 = (ZeroCrossingRateHammingFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroCrossingRateHammingFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroCrossingRateHammingFeaturePtr_reset" "', argument " "1"" of type '" "ZeroCrossingRateHammingFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ZeroCrossingRateHammingFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ZeroCrossingRateHammingFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ZeroCrossingRateHammingFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_YINPitchFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 16000 ;
  float arg3 = (float) 0.5 ;
  String const &arg4_defvalue = "YIN Pitch" ;
  String *arg4 = (String *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "samp",(char *) "samplerate",(char *) "threshold",(char *) "nm", NULL 
  };
  YINPitchFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_YINPitchFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_YINPitchFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_YINPitchFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_YINPitchFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_YINPitchFeaturePtr" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (YINPitchFeaturePtr *)new_YINPitchFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_YINPitchFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< YINPitchFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr___iter__" "', argument " "1"" of type '" "YINPitchFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = YINPitchFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new YINPitchFeaturePtr(static_cast< const YINPitchFeaturePtr& >(result))), SWIGTYPE_p_YINPitchFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  YINPitchFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr___deref__" "', argument " "1"" of type '" "YINPitchFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (YINPitchFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_YINPitchFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_YINPitchFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_YINPitchFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_YINPitchFeaturePtr" "', argument " "1"" of type '" "YINPitchFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr_next" "', argument " "1"" of type '" "YINPitchFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr_name" "', argument " "1"" of type '" "YINPitchFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr_size" "', argument " "1"" of type '" "YINPitchFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr_is_end" "', argument " "1"" of type '" "YINPitchFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr_current" "', argument " "1"" of type '" "YINPitchFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_YINPitchFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  YINPitchFeaturePtr *arg1 = (YINPitchFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:YINPitchFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_YINPitchFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "YINPitchFeaturePtr_reset" "', argument " "1"" of type '" "YINPitchFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< YINPitchFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *YINPitchFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_YINPitchFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpikeFilterPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 3 ;
  String arg3 = (String) (String)"SpikeFilter" ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "tapN",(char *) "nm", NULL 
  };
  SpikeFilterPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_SpikeFilterPtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpikeFilterPtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeFilterPtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpikeFilterPtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      arg3 = String (temps);
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpikeFilterPtr *)new_SpikeFilterPtr(*arg1,arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpikeFilterPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SpikeFilterPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr___iter__" "', argument " "1"" of type '" "SpikeFilterPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SpikeFilterPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SpikeFilterPtr(static_cast< const SpikeFilterPtr& >(result))), SWIGTYPE_p_SpikeFilterPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SpikeFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr___deref__" "', argument " "1"" of type '" "SpikeFilterPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpikeFilter *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpikeFilter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpikeFilterPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpikeFilterPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpikeFilterPtr" "', argument " "1"" of type '" "SpikeFilterPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr_size" "', argument " "1"" of type '" "SpikeFilterPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr_next" "', argument " "1"" of type '" "SpikeFilterPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr_name" "', argument " "1"" of type '" "SpikeFilterPtr const *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr_is_end" "', argument " "1"" of type '" "SpikeFilterPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr_current" "', argument " "1"" of type '" "SpikeFilterPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilterPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilterPtr *arg1 = (SpikeFilterPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilterPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilterPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilterPtr_reset" "', argument " "1"" of type '" "SpikeFilterPtr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilterPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpikeFilterPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpikeFilterPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpikeFilter2Ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 3 ;
  float arg3 = (float) 7000.0 ;
  float arg4 = (float) 100.0 ;
  float arg5 = (float) 15.0 ;
  float arg6 = (float) 0.2 ;
  unsigned int arg7 = (unsigned int) 1 ;
  String const &arg8_defvalue = "Spike Filter2" ;
  String *arg8 = (String *) &arg8_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  String tempstr8 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "width",(char *) "maxslope",(char *) "startslope",(char *) "thresh",(char *) "alpha",(char *) "verbose",(char *) "nm", NULL 
  };
  SpikeFilter2Ptr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOOOOO:new_SpikeFilter2Ptr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpikeFilter2Ptr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeFilter2Ptr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpikeFilter2Ptr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpikeFilter2Ptr" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SpikeFilter2Ptr" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_float(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SpikeFilter2Ptr" "', argument " "5"" of type '" "float""'");
    } 
    arg5 = static_cast< float >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_float(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SpikeFilter2Ptr" "', argument " "6"" of type '" "float""'");
    } 
    arg6 = static_cast< float >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SpikeFilter2Ptr" "', argument " "7"" of type '" "unsigned int""'");
    } 
    arg7 = static_cast< unsigned int >(val7);
  }
  if (obj7) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj7, &temps, &templ)) return NULL;
      tempstr8 = String(temps);
      arg8 = &tempstr8;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpikeFilter2Ptr *)new_SpikeFilter2Ptr(*arg1,arg2,arg3,arg4,arg5,arg6,arg7,(String const &)*arg8);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpikeFilter2Ptr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SpikeFilter2Ptr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr___iter__" "', argument " "1"" of type '" "SpikeFilter2Ptr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SpikeFilter2Ptr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SpikeFilter2Ptr(static_cast< const SpikeFilter2Ptr& >(result))), SWIGTYPE_p_SpikeFilter2Ptr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SpikeFilter2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr___deref__" "', argument " "1"" of type '" "SpikeFilter2Ptr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SpikeFilter2 *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpikeFilter2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpikeFilter2Ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpikeFilter2Ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpikeFilter2Ptr" "', argument " "1"" of type '" "SpikeFilter2Ptr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr_size" "', argument " "1"" of type '" "SpikeFilter2Ptr const *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr_next" "', argument " "1"" of type '" "SpikeFilter2Ptr const *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr_spikesN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr_spikesN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr_spikesN" "', argument " "1"" of type '" "SpikeFilter2Ptr const *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->spikesN();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr_name" "', argument " "1"" of type '" "SpikeFilter2Ptr const *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr_is_end" "', argument " "1"" of type '" "SpikeFilter2Ptr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr_current" "', argument " "1"" of type '" "SpikeFilter2Ptr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeFilter2Ptr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpikeFilter2Ptr *arg1 = (SpikeFilter2Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SpikeFilter2Ptr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpikeFilter2Ptr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeFilter2Ptr_reset" "', argument " "1"" of type '" "SpikeFilter2Ptr *""'"); 
  }
  arg1 = reinterpret_cast< SpikeFilter2Ptr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpikeFilter2Ptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpikeFilter2Ptr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SoundFilePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  String *arg1 = 0 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  int arg4 = (int) 16000 ;
  int arg5 = (int) 1 ;
  bool arg6 = (bool) false ;
  String tempstr1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "fn",(char *) "mode",(char *) "format",(char *) "samplerate",(char *) "channels",(char *) "normalize", NULL 
  };
  SoundFilePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOO:new_SoundFilePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
    tempstr1 = String(temps);
    arg1 = &tempstr1;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SoundFilePtr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SoundFilePtr" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SoundFilePtr" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SoundFilePtr" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_bool(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SoundFilePtr" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SoundFilePtr *)new_SoundFilePtr((String const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SoundFilePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SoundFile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoundFilePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr___deref__" "', argument " "1"" of type '" "SoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SoundFile *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SoundFile, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SoundFilePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SoundFilePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SoundFilePtr" "', argument " "1"" of type '" "SoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_frames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  sf_count_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoundFilePtr_frames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_frames" "', argument " "1"" of type '" "SoundFilePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->frames();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new sf_count_t(static_cast< const sf_count_t& >(result))), SWIGTYPE_p_sf_count_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_samplerate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoundFilePtr_samplerate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_samplerate" "', argument " "1"" of type '" "SoundFilePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->samplerate();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_channels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoundFilePtr_channels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_channels" "', argument " "1"" of type '" "SoundFilePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->channels();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_format(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoundFilePtr_format",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_format" "', argument " "1"" of type '" "SoundFilePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->format();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_sections(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoundFilePtr_sections",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_sections" "', argument " "1"" of type '" "SoundFilePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->sections();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_seekable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoundFilePtr_seekable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_seekable" "', argument " "1"" of type '" "SoundFilePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->seekable();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_readf(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  float *arg2 = (float *) 0 ;
  sf_count_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ptr",(char *) "frames", NULL 
  };
  sf_count_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:SoundFilePtr_readf",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_readf" "', argument " "1"" of type '" "SoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoundFilePtr_readf" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_sf_count_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SoundFilePtr_readf" "', argument " "3"" of type '" "sf_count_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoundFilePtr_readf" "', argument " "3"" of type '" "sf_count_t""'");
    } else {
      sf_count_t * temp = reinterpret_cast< sf_count_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->readf(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new sf_count_t(static_cast< const sf_count_t& >(result))), SWIGTYPE_p_sf_count_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_writef(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  float *arg2 = (float *) 0 ;
  sf_count_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ptr",(char *) "frames", NULL 
  };
  sf_count_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:SoundFilePtr_writef",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_writef" "', argument " "1"" of type '" "SoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoundFilePtr_writef" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_sf_count_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SoundFilePtr_writef" "', argument " "3"" of type '" "sf_count_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoundFilePtr_writef" "', argument " "3"" of type '" "sf_count_t""'");
    } else {
      sf_count_t * temp = reinterpret_cast< sf_count_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->writef(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new sf_count_t(static_cast< const sf_count_t& >(result))), SWIGTYPE_p_sf_count_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  float *arg2 = (float *) 0 ;
  sf_count_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ptr",(char *) "items", NULL 
  };
  sf_count_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:SoundFilePtr_read",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_read" "', argument " "1"" of type '" "SoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoundFilePtr_read" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_sf_count_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SoundFilePtr_read" "', argument " "3"" of type '" "sf_count_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoundFilePtr_read" "', argument " "3"" of type '" "sf_count_t""'");
    } else {
      sf_count_t * temp = reinterpret_cast< sf_count_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->read(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new sf_count_t(static_cast< const sf_count_t& >(result))), SWIGTYPE_p_sf_count_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  float *arg2 = (float *) 0 ;
  sf_count_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ptr",(char *) "items", NULL 
  };
  sf_count_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:SoundFilePtr_write",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_write" "', argument " "1"" of type '" "SoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoundFilePtr_write" "', argument " "2"" of type '" "float *""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_sf_count_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SoundFilePtr_write" "', argument " "3"" of type '" "sf_count_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoundFilePtr_write" "', argument " "3"" of type '" "sf_count_t""'");
    } else {
      sf_count_t * temp = reinterpret_cast< sf_count_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->write(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new sf_count_t(static_cast< const sf_count_t& >(result))), SWIGTYPE_p_sf_count_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoundFilePtr_seek(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = (SoundFilePtr *) 0 ;
  sf_count_t arg2 ;
  int arg3 = (int) SEEK_SET ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frames",(char *) "whence", NULL 
  };
  sf_count_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:SoundFilePtr_seek",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoundFilePtr_seek" "', argument " "1"" of type '" "SoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_sf_count_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoundFilePtr_seek" "', argument " "2"" of type '" "sf_count_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoundFilePtr_seek" "', argument " "2"" of type '" "sf_count_t""'");
    } else {
      sf_count_t * temp = reinterpret_cast< sf_count_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SoundFilePtr_seek" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (*arg1)->seek(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new sf_count_t(static_cast< const sf_count_t& >(result))), SWIGTYPE_p_sf_count_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SoundFilePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SoundFilePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DirectSampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SoundFilePtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 320 ;
  unsigned int arg3 = (unsigned int) 0 ;
  unsigned int arg4 = (unsigned int) (unsigned int) -1 ;
  String const &arg5_defvalue = "DirectSample" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "sndfile",(char *) "blockLen",(char *) "start",(char *) "end",(char *) "nm", NULL 
  };
  DirectSampleFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:new_DirectSampleFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SoundFilePtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DirectSampleFeaturePtr" "', argument " "1"" of type '" "SoundFilePtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DirectSampleFeaturePtr" "', argument " "1"" of type '" "SoundFilePtr const &""'"); 
  }
  arg1 = reinterpret_cast< SoundFilePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DirectSampleFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DirectSampleFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DirectSampleFeaturePtr" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (DirectSampleFeaturePtr *)new_DirectSampleFeaturePtr((SoundFilePtr const &)*arg1,arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DirectSampleFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< DirectSampleFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr___iter__" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = DirectSampleFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new DirectSampleFeaturePtr(static_cast< const DirectSampleFeaturePtr& >(result))), SWIGTYPE_p_DirectSampleFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DirectSampleFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr___deref__" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (DirectSampleFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DirectSampleFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DirectSampleFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DirectSampleFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DirectSampleFeaturePtr" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DirectSampleFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_next" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectSampleFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_reset" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_channels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_channels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_channels" "', argument " "1"" of type '" "DirectSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->channels();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_sampleRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_sampleRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_sampleRate" "', argument " "1"" of type '" "DirectSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->sampleRate();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_setRegion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DirectSampleFeaturePtr_setRegion",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_setRegion" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectSampleFeaturePtr_setRegion" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DirectSampleFeaturePtr_setRegion" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->setRegion(arg2,arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_setRegion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DirectSampleFeaturePtr_setRegion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_setRegion" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectSampleFeaturePtr_setRegion" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->setRegion(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_setRegion__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_setRegion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_setRegion" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->setRegion();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_setRegion(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DirectSampleFeaturePtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DirectSampleFeaturePtr_setRegion__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DirectSampleFeaturePtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DirectSampleFeaturePtr_setRegion__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DirectSampleFeaturePtr, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DirectSampleFeaturePtr_setRegion__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DirectSampleFeaturePtr_setRegion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DirectSampleFeature::setRegion(unsigned int,unsigned int)\n"
    "    DirectSampleFeature::setRegion(unsigned int)\n"
    "    DirectSampleFeature::setRegion()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_name" "', argument " "1"" of type '" "DirectSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_size" "', argument " "1"" of type '" "DirectSampleFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_is_end" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleFeaturePtr *arg1 = (DirectSampleFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleFeaturePtr_current" "', argument " "1"" of type '" "DirectSampleFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DirectSampleFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DirectSampleFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DirectSampleOutputFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  SoundFilePtr *arg2 = 0 ;
  String const &arg3_defvalue = "DirectSampleOutput" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "sndfile",(char *) "nm", NULL 
  };
  DirectSampleOutputFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_DirectSampleOutputFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DirectSampleOutputFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DirectSampleOutputFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SoundFilePtr,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DirectSampleOutputFeaturePtr" "', argument " "2"" of type '" "SoundFilePtr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DirectSampleOutputFeaturePtr" "', argument " "2"" of type '" "SoundFilePtr const &""'"); 
  }
  arg2 = reinterpret_cast< SoundFilePtr * >(argp2);
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (DirectSampleOutputFeaturePtr *)new_DirectSampleOutputFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,(SoundFilePtr const &)*arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DirectSampleOutputFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< DirectSampleOutputFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleOutputFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr___iter__" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = DirectSampleOutputFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new DirectSampleOutputFeaturePtr(static_cast< const DirectSampleOutputFeaturePtr& >(result))), SWIGTYPE_p_DirectSampleOutputFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DirectSampleOutputFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleOutputFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr___deref__" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (DirectSampleOutputFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DirectSampleOutputFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DirectSampleOutputFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DirectSampleOutputFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DirectSampleOutputFeaturePtr" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:DirectSampleOutputFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr_next" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DirectSampleOutputFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleOutputFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr_reset" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleOutputFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr_name" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleOutputFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr_size" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleOutputFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr_is_end" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DirectSampleOutputFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DirectSampleOutputFeaturePtr *arg1 = (DirectSampleOutputFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DirectSampleOutputFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DirectSampleOutputFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DirectSampleOutputFeaturePtr_current" "', argument " "1"" of type '" "DirectSampleOutputFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< DirectSampleOutputFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DirectSampleOutputFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DirectSampleOutputFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ChannelExtractionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 = (unsigned int) 0 ;
  unsigned int arg3 = (unsigned int) 1 ;
  String const &arg4_defvalue = "ChannelExtraction" ;
  String *arg4 = (String *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "chX",(char *) "chN",(char *) "nm", NULL 
  };
  ChannelExtractionFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:new_ChannelExtractionFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ChannelExtractionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ChannelExtractionFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ChannelExtractionFeaturePtr" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ChannelExtractionFeaturePtr" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
  }
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (ChannelExtractionFeaturePtr *)new_ChannelExtractionFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ChannelExtractionFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< ChannelExtractionFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelExtractionFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr___iter__" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = ChannelExtractionFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new ChannelExtractionFeaturePtr(static_cast< const ChannelExtractionFeaturePtr& >(result))), SWIGTYPE_p_ChannelExtractionFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ChannelExtractionFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelExtractionFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr___deref__" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (ChannelExtractionFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ChannelExtractionFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChannelExtractionFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ChannelExtractionFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelExtractionFeaturePtr" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ChannelExtractionFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr_next" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelExtractionFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelExtractionFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr_name" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelExtractionFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr_size" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelExtractionFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr_is_end" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelExtractionFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr_current" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelExtractionFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ChannelExtractionFeaturePtr *arg1 = (ChannelExtractionFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChannelExtractionFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ChannelExtractionFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelExtractionFeaturePtr_reset" "', argument " "1"" of type '" "ChannelExtractionFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< ChannelExtractionFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChannelExtractionFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ChannelExtractionFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SignalInterferenceFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  VectorFloatFeatureStreamPtr *arg2 = 0 ;
  double arg3 = (double) 0.0 ;
  unsigned int arg4 = (unsigned int) 512 ;
  String const &arg5_defvalue = "SignalInterference" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "signal",(char *) "interference",(char *) "dBInterference",(char *) "blockLen",(char *) "nm", NULL 
  };
  SignalInterferenceFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:new_SignalInterferenceFeaturePtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SignalInterferenceFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SignalInterferenceFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SignalInterferenceFeaturePtr" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SignalInterferenceFeaturePtr" "', argument " "2"" of type '" "VectorFloatFeatureStreamPtr &""'"); 
  }
  arg2 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SignalInterferenceFeaturePtr" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SignalInterferenceFeaturePtr" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SignalInterferenceFeaturePtr *)new_SignalInterferenceFeaturePtr(*arg1,*arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SignalInterferenceFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< SignalInterferenceFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalInterferenceFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr___iter__" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = SignalInterferenceFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new SignalInterferenceFeaturePtr(static_cast< const SignalInterferenceFeaturePtr& >(result))), SWIGTYPE_p_SignalInterferenceFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SignalInterferenceFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalInterferenceFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr___deref__" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SignalInterferenceFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SignalInterferenceFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SignalInterferenceFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SignalInterferenceFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SignalInterferenceFeaturePtr" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SignalInterferenceFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr_next" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SignalInterferenceFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalInterferenceFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr_name" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalInterferenceFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr_size" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalInterferenceFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr_is_end" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalInterferenceFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr_current" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SignalInterferenceFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SignalInterferenceFeaturePtr *arg1 = (SignalInterferenceFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SignalInterferenceFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SignalInterferenceFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SignalInterferenceFeaturePtr_reset" "', argument " "1"" of type '" "SignalInterferenceFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< SignalInterferenceFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SignalInterferenceFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SignalInterferenceFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AmplificationFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  double arg2 = (double) 1.0 ;
  String const &arg3_defvalue = "Amplification" ;
  String *arg3 = (String *) &arg3_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "src",(char *) "amplify",(char *) "nm", NULL 
  };
  AmplificationFeaturePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:new_AmplificationFeaturePtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AmplificationFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AmplificationFeaturePtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AmplificationFeaturePtr" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (AmplificationFeaturePtr *)new_AmplificationFeaturePtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AmplificationFeaturePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< AmplificationFeaturePtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplificationFeaturePtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr___iter__" "', argument " "1"" of type '" "AmplificationFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = AmplificationFeaturePtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new AmplificationFeaturePtr(static_cast< const AmplificationFeaturePtr& >(result))), SWIGTYPE_p_AmplificationFeaturePtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  AmplificationFeature *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplificationFeaturePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr___deref__" "', argument " "1"" of type '" "AmplificationFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (AmplificationFeature *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AmplificationFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AmplificationFeaturePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AmplificationFeaturePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AmplificationFeaturePtr" "', argument " "1"" of type '" "AmplificationFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:AmplificationFeaturePtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr_next" "', argument " "1"" of type '" "AmplificationFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AmplificationFeaturePtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplificationFeaturePtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr_reset" "', argument " "1"" of type '" "AmplificationFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplificationFeaturePtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr_name" "', argument " "1"" of type '" "AmplificationFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplificationFeaturePtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr_size" "', argument " "1"" of type '" "AmplificationFeaturePtr const *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplificationFeaturePtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr_is_end" "', argument " "1"" of type '" "AmplificationFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AmplificationFeaturePtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AmplificationFeaturePtr *arg1 = (AmplificationFeaturePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AmplificationFeaturePtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AmplificationFeaturePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AmplificationFeaturePtr_current" "', argument " "1"" of type '" "AmplificationFeaturePtr *""'"); 
  }
  arg1 = reinterpret_cast< AmplificationFeaturePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AmplificationFeaturePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AmplificationFeaturePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LPCSpectrumEstimatorPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorFloatFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  String const &arg4_defvalue = "LPC Spectrum Estimator" ;
  String *arg4 = (String *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  String tempstr4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "source",(char *) "order",(char *) "fftLen",(char *) "nm", NULL 
  };
  LPCSpectrumEstimatorPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:new_LPCSpectrumEstimatorPtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorFloatFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LPCSpectrumEstimatorPtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LPCSpectrumEstimatorPtr" "', argument " "1"" of type '" "VectorFloatFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorFloatFeatureStreamPtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LPCSpectrumEstimatorPtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LPCSpectrumEstimatorPtr" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  if (obj3) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj3, &temps, &templ)) return NULL;
      tempstr4 = String(temps);
      arg4 = &tempstr4;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (LPCSpectrumEstimatorPtr *)new_LPCSpectrumEstimatorPtr((VectorFloatFeatureStreamPtr const &)*arg1,arg2,arg3,(String const &)*arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LPCSpectrumEstimatorPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< LPCSpectrumEstimatorPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr___iter__" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = LPCSpectrumEstimatorPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new LPCSpectrumEstimatorPtr(static_cast< const LPCSpectrumEstimatorPtr& >(result))), SWIGTYPE_p_LPCSpectrumEstimatorPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LPCSpectrumEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr___deref__" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (LPCSpectrumEstimator *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LPCSpectrumEstimator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LPCSpectrumEstimatorPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LPCSpectrumEstimatorPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LPCSpectrumEstimatorPtr" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:LPCSpectrumEstimatorPtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_next" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPCSpectrumEstimatorPtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_reset" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_getLPCs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_getLPCs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_getLPCs" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr const *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->getLPCs();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_getAutoCorrelationVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_getAutoCorrelationVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_getAutoCorrelationVector" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->getAutoCorrelationVector();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_getPredictionError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_getPredictionError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_getPredictionError" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (float)(*arg1)->getPredictionError();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_name" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr const *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_size" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr const *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_is_end" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LPCSpectrumEstimatorPtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LPCSpectrumEstimatorPtr *arg1 = (LPCSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LPCSpectrumEstimatorPtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LPCSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LPCSpectrumEstimatorPtr_current" "', argument " "1"" of type '" "LPCSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LPCSpectrumEstimatorPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LPCSpectrumEstimatorPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CepstralSpectrumEstimatorPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  VectorComplexFeatureStreamPtr *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 = (double) 1.0 ;
  String const &arg5_defvalue = "CepstralSpectrumEstimator" ;
  String *arg5 = (String *) &arg5_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  String tempstr5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "source",(char *) "order",(char *) "fftLen",(char *) "logPadding",(char *) "nm", NULL 
  };
  CepstralSpectrumEstimatorPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:new_CepstralSpectrumEstimatorPtr",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_VectorComplexFeatureStreamPtr,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CepstralSpectrumEstimatorPtr" "', argument " "1"" of type '" "VectorComplexFeatureStreamPtr const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CepstralSpectrumEstimatorPtr" "', argument " "1"" of type '" "VectorComplexFeatureStreamPtr const &""'"); 
  }
  arg1 = reinterpret_cast< VectorComplexFeatureStreamPtr * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CepstralSpectrumEstimatorPtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CepstralSpectrumEstimatorPtr" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CepstralSpectrumEstimatorPtr" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj4, &temps, &templ)) return NULL;
      tempstr5 = String(temps);
      arg5 = &tempstr5;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (CepstralSpectrumEstimatorPtr *)new_CepstralSpectrumEstimatorPtr((VectorComplexFeatureStreamPtr const &)*arg1,arg2,arg3,arg4,(String const &)*arg5);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CepstralSpectrumEstimatorPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< CepstralSpectrumEstimatorPtr > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralSpectrumEstimatorPtr___iter__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr___iter__" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = CepstralSpectrumEstimatorPtr___iter__(arg1);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj((new CepstralSpectrumEstimatorPtr(static_cast< const CepstralSpectrumEstimatorPtr& >(result))), SWIGTYPE_p_CepstralSpectrumEstimatorPtr, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CepstralSpectrumEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralSpectrumEstimatorPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr___deref__" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (CepstralSpectrumEstimator *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CepstralSpectrumEstimator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CepstralSpectrumEstimatorPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CepstralSpectrumEstimatorPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CepstralSpectrumEstimatorPtr" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  int arg2 = (int) -5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_no", NULL 
  };
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:CepstralSpectrumEstimatorPtr_next",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr_next" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CepstralSpectrumEstimatorPtr_next" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->next(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralSpectrumEstimatorPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr_reset" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  String *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralSpectrumEstimatorPtr_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr_name" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr const *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (String *) &(*arg1)->name();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    resultobj = PyString_FromStringAndSize(result->data(), result->length());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralSpectrumEstimatorPtr_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr_size" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr const *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (unsigned int)(*arg1)->size();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr_is_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralSpectrumEstimatorPtr_is_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr_is_end" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (bool)(*arg1)->is_end();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CepstralSpectrumEstimatorPtr_current(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CepstralSpectrumEstimatorPtr *arg1 = (CepstralSpectrumEstimatorPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector_float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CepstralSpectrumEstimatorPtr_current",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CepstralSpectrumEstimatorPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CepstralSpectrumEstimatorPtr_current" "', argument " "1"" of type '" "CepstralSpectrumEstimatorPtr *""'"); 
  }
  arg1 = reinterpret_cast< CepstralSpectrumEstimatorPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector_float *)(*arg1)->current();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_FLOAT);
        for (int i=0; i < result->size; i++) {
          ((float*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_float_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_FLOAT, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CepstralSpectrumEstimatorPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CepstralSpectrumEstimatorPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SEMNBPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  String const &arg3_defvalue = "SEMNBPtr" ;
  String *arg3 = (String *) &arg3_defvalue ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  String tempstr3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "order",(char *) "fftLen",(char *) "nm", NULL 
  };
  SEMNBPtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:new_SEMNBPtr",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SEMNBPtr" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SEMNBPtr" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (obj2) {
    {
      char * temps; Py_ssize_t templ;
      if (PyString_AsStringAndSize(obj2, &temps, &templ)) return NULL;
      tempstr3 = String(temps);
      arg3 = &tempstr3;
    }
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (SEMNBPtr *)new_SEMNBPtr(arg1,arg2,(String const &)*arg3);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEMNBPtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEMNBPtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEMNBPtr *arg1 = (SEMNBPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SEMNB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEMNBPtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEMNBPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEMNBPtr___deref__" "', argument " "1"" of type '" "SEMNBPtr *""'"); 
  }
  arg1 = reinterpret_cast< SEMNBPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (SEMNB *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SEMNB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SEMNBPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEMNBPtr *arg1 = (SEMNBPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SEMNBPtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEMNBPtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SEMNBPtr" "', argument " "1"" of type '" "SEMNBPtr *""'"); 
  }
  arg1 = reinterpret_cast< SEMNBPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEMNBPtr_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEMNBPtr *arg1 = (SEMNBPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEMNBPtr_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEMNBPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEMNBPtr_reset" "', argument " "1"" of type '" "SEMNBPtr *""'"); 
  }
  arg1 = reinterpret_cast< SEMNBPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      (*arg1)->reset();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEMNBPtr_calcDerivativeOfDeviation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEMNBPtr *arg1 = (SEMNBPtr *) 0 ;
  LPCSpectrumEstimatorPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SEMNBPtr_calcDerivativeOfDeviation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEMNBPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEMNBPtr_calcDerivativeOfDeviation" "', argument " "1"" of type '" "SEMNBPtr *""'"); 
  }
  arg1 = reinterpret_cast< SEMNBPtr * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LPCSpectrumEstimatorPtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SEMNBPtr_calcDerivativeOfDeviation" "', argument " "2"" of type '" "LPCSpectrumEstimatorPtr &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SEMNBPtr_calcDerivativeOfDeviation" "', argument " "2"" of type '" "LPCSpectrumEstimatorPtr &""'"); 
  }
  arg2 = reinterpret_cast< LPCSpectrumEstimatorPtr * >(argp2);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->calcDerivativeOfDeviation(*arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SEMNBPtr_getLPEnvelope(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SEMNBPtr *arg1 = (SEMNBPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gsl_vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SEMNBPtr_getLPEnvelope",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SEMNBPtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SEMNBPtr_getLPEnvelope" "', argument " "1"" of type '" "SEMNBPtr *""'"); 
  }
  arg1 = reinterpret_cast< SEMNBPtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (gsl_vector *)(*arg1)->getLPEnvelope();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  {
    int dims[1];
    if (result == NULL) {
      resultobj = Py_None;
    } else {
      dims[0] = result->size;
      if (result->stride != 1) {
        resultobj = PyArray_FromDims(1, dims, PyArray_DOUBLE);
        for (int i=0; i < result->size; i++) {
          ((double*)((PyArrayObject*)resultobj)->data)[i] = gsl_vector_get(result, i);
        }
      } else
      resultobj = PyArray_FromDimsAndData(1, dims, PyArray_DOUBLE, (char*)result->data);
      // ((PyArrayObject*)resultobj)->flags |= 8;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SEMNBPtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SEMNBPtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WriteSoundFilePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  String *arg1 = 0 ;
  int arg2 ;
  int arg3 = (int) 1 ;
  int arg4 = (int) sndfile::SF_FORMAT_WAV|sndfile::SF_FORMAT_PCM_32 ;
  String tempstr1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "fn",(char *) "sampleRate",(char *) "nChan",(char *) "format", NULL 
  };
  WriteSoundFilePtr *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:new_WriteSoundFilePtr",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    char * temps; Py_ssize_t templ;
    if (PyString_AsStringAndSize(obj0, &temps, &templ)) return NULL;
    tempstr1 = String(temps);
    arg1 = &tempstr1;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WriteSoundFilePtr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WriteSoundFilePtr" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WriteSoundFilePtr" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    //jpython_error *pe = NULL;
    try {
      result = (WriteSoundFilePtr *)new_WriteSoundFilePtr((String const &)*arg1,arg2,arg3,arg4);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WriteSoundFilePtr, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteSoundFilePtr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WriteSoundFilePtr *arg1 = (WriteSoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  WriteSoundFile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WriteSoundFilePtr___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WriteSoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteSoundFilePtr___deref__" "', argument " "1"" of type '" "WriteSoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< WriteSoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      result = (WriteSoundFile *)(arg1)->operator ->();
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WriteSoundFile, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WriteSoundFilePtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WriteSoundFilePtr *arg1 = (WriteSoundFilePtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WriteSoundFilePtr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WriteSoundFilePtr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WriteSoundFilePtr" "', argument " "1"" of type '" "WriteSoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< WriteSoundFilePtr * >(argp1);
  {
    //jpython_error *pe = NULL;
    try {
      delete arg1;
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteSoundFilePtr_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  WriteSoundFilePtr *arg1 = (WriteSoundFilePtr *) 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "vector", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:WriteSoundFilePtr_write",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WriteSoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteSoundFilePtr_write" "', argument " "1"" of type '" "WriteSoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< WriteSoundFilePtr * >(argp1);
  
  PyArrayObject *_PyVector2;
  gsl_vector vector2;
  
  {
    if (obj1 == Py_None) {
      _PyVector2 = NULL;
      arg2 = NULL;
    } else {
      int len;
      _PyVector2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 1, 1);
      if (_PyVector2 == NULL)
      return NULL;
      len = _PyVector2->dimensions[0];
      vector2.size = len;
      vector2.stride = 1;
      vector2.data = (double*)_PyVector2->data;
      vector2.block = NULL;
      vector2.owner = 1;
      arg2 = &vector2;
    }
  }
  
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->write(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return resultobj;
fail:
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteSoundFilePtr_writeInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WriteSoundFilePtr *arg1 = (WriteSoundFilePtr *) 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WriteSoundFilePtr_writeInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WriteSoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteSoundFilePtr_writeInt" "', argument " "1"" of type '" "WriteSoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< WriteSoundFilePtr * >(argp1);
  
  PyArrayObject *_PyVector2;
  gsl_vector vector2;
  
  {
    if (obj1 == Py_None) {
      _PyVector2 = NULL;
      arg2 = NULL;
    } else {
      int len;
      _PyVector2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 1, 1);
      if (_PyVector2 == NULL)
      return NULL;
      len = _PyVector2->dimensions[0];
      vector2.size = len;
      vector2.stride = 1;
      vector2.data = (double*)_PyVector2->data;
      vector2.block = NULL;
      vector2.owner = 1;
      arg2 = &vector2;
    }
  }
  
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->writeInt(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return resultobj;
fail:
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteSoundFilePtr_writeShort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WriteSoundFilePtr *arg1 = (WriteSoundFilePtr *) 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WriteSoundFilePtr_writeShort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WriteSoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteSoundFilePtr_writeShort" "', argument " "1"" of type '" "WriteSoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< WriteSoundFilePtr * >(argp1);
  
  PyArrayObject *_PyVector2;
  gsl_vector vector2;
  
  {
    if (obj1 == Py_None) {
      _PyVector2 = NULL;
      arg2 = NULL;
    } else {
      int len;
      _PyVector2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 1, 1);
      if (_PyVector2 == NULL)
      return NULL;
      len = _PyVector2->dimensions[0];
      vector2.size = len;
      vector2.stride = 1;
      vector2.data = (double*)_PyVector2->data;
      vector2.block = NULL;
      vector2.owner = 1;
      arg2 = &vector2;
    }
  }
  
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->writeShort(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return resultobj;
fail:
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_WriteSoundFilePtr_writeFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  WriteSoundFilePtr *arg1 = (WriteSoundFilePtr *) 0 ;
  gsl_vector *arg2 = (gsl_vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WriteSoundFilePtr_writeFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_WriteSoundFilePtr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WriteSoundFilePtr_writeFloat" "', argument " "1"" of type '" "WriteSoundFilePtr *""'"); 
  }
  arg1 = reinterpret_cast< WriteSoundFilePtr * >(argp1);
  
  PyArrayObject *_PyVector2;
  gsl_vector vector2;
  
  {
    if (obj1 == Py_None) {
      _PyVector2 = NULL;
      arg2 = NULL;
    } else {
      int len;
      _PyVector2 = (PyArrayObject*)
      PyArray_ContiguousFromObject(obj1, PyArray_DOUBLE, 1, 1);
      if (_PyVector2 == NULL)
      return NULL;
      len = _PyVector2->dimensions[0];
      vector2.size = len;
      vector2.stride = 1;
      vector2.data = (double*)_PyVector2->data;
      vector2.block = NULL;
      vector2.owner = 1;
      arg2 = &vector2;
    }
  }
  
  {
    //jpython_error *pe = NULL;
    try {
      result = (int)(*arg1)->writeFloat(arg2);
    }
    catch(jiterator_error& e) {
      //PyErr_SetNone(PyExc_StopIteration);
      PyErr_SetString(PyExc_StopIteration, "stop iteration");
      return NULL;
    }
    catch(jallocation_error& e) {
      PyErr_SetString(PyExc_MemoryError, e.what());
      return NULL;
    }
    catch(jarithmetic_error& e) {
      PyErr_SetString(PyExc_ArithmeticError, e.what());
      return NULL;
    }
    catch(jnumeric_error& e) {
      PyErr_SetString(PyExc_FloatingPointError, e.what());
      return NULL;
    }
    catch(jindex_error& e) {
      PyErr_SetString(PyExc_IndexError, e.what());
      return NULL;
    }
    catch(jio_error& e) {
      PyErr_SetString(PyExc_IOError, e.what());
      return NULL;
    }
    catch(jkey_error& e) {
      PyErr_SetString(PyExc_KeyError, e.what());
      return NULL;
    }
    catch(jparameter_error& e) {
      PyErr_SetString(PyExc_ValueError, e.what());
      return NULL;
    }
    catch(jparse_error& e) {
      PyErr_SetString(PyExc_SyntaxError, e.what());
      return NULL;
    }
    catch(jtype_error& e) {
      PyErr_SetString(PyExc_TypeError, e.what());
      return NULL;
    }
    catch(jconsistency_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jinitialization_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(jdimension_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch(j_error& e) {
      PyErr_SetString(PyExc_Exception, e.what());
      return NULL;
    }
    catch (...) {
      PyErr_SetString(PyExc_Exception, "Unknown error");
      return NULL;
    };
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return resultobj;
fail:
  {
    if (_PyVector2 != NULL)
    Py_DECREF(_PyVector2);
  }
  return NULL;
}


SWIGINTERN PyObject *WriteSoundFilePtr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_WriteSoundFilePtr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"new_FileFeaturePtr", _wrap_new_FileFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr___iter__", _wrap_FileFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr___deref__", _wrap_FileFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_FileFeaturePtr", _wrap_delete_FileFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_bload", _wrap_FileFeaturePtr_bload, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_size", _wrap_FileFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_next", _wrap_FileFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_copy", _wrap_FileFeaturePtr_copy, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_name", _wrap_FileFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_is_end", _wrap_FileFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_current", _wrap_FileFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_reset", _wrap_FileFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"FileFeaturePtr_swigregister", FileFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Conversion24bit2Short", _wrap_new_Conversion24bit2Short, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2Short_next", (PyCFunction) _wrap_Conversion24bit2Short_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Conversion24bit2Short_reset", _wrap_Conversion24bit2Short_reset, METH_VARARGS, NULL},
	 { (char *)"delete_Conversion24bit2Short", _wrap_delete_Conversion24bit2Short, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2Short_swigregister", Conversion24bit2Short_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Conversion24bit2ShortPtr", (PyCFunction) _wrap_new_Conversion24bit2ShortPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Conversion24bit2ShortPtr___iter__", _wrap_Conversion24bit2ShortPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2ShortPtr___deref__", _wrap_Conversion24bit2ShortPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_Conversion24bit2ShortPtr", _wrap_delete_Conversion24bit2ShortPtr, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2ShortPtr_swigregister", Conversion24bit2ShortPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Conversion24bit2Float", _wrap_new_Conversion24bit2Float, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2Float_reset", _wrap_Conversion24bit2Float_reset, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2Float_next", (PyCFunction) _wrap_Conversion24bit2Float_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"delete_Conversion24bit2Float", _wrap_delete_Conversion24bit2Float, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2Float_swigregister", Conversion24bit2Float_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Conversion24bit2FloatPtr", (PyCFunction) _wrap_new_Conversion24bit2FloatPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"Conversion24bit2FloatPtr___iter__", _wrap_Conversion24bit2FloatPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2FloatPtr___deref__", _wrap_Conversion24bit2FloatPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_Conversion24bit2FloatPtr", _wrap_delete_Conversion24bit2FloatPtr, METH_VARARGS, NULL},
	 { (char *)"Conversion24bit2FloatPtr_swigregister", Conversion24bit2FloatPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SampleFeaturePtr", (PyCFunction) _wrap_new_SampleFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeaturePtr___iter__", _wrap_SampleFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr___deref__", _wrap_SampleFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SampleFeaturePtr", _wrap_delete_SampleFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_read", (PyCFunction) _wrap_SampleFeaturePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeaturePtr_write", (PyCFunction) _wrap_SampleFeaturePtr_write, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeaturePtr_cut", (PyCFunction) _wrap_SampleFeaturePtr_cut, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeaturePtr_reset", _wrap_SampleFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_next", (PyCFunction) _wrap_SampleFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeaturePtr_frame_no", _wrap_SampleFeaturePtr_frame_no, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_exit", _wrap_SampleFeaturePtr_exit, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_randomize", (PyCFunction) _wrap_SampleFeaturePtr_randomize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeaturePtr_data", _wrap_SampleFeaturePtr_data, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_samplesN", _wrap_SampleFeaturePtr_samplesN, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_dataDouble", _wrap_SampleFeaturePtr_dataDouble, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_zeroMean", _wrap_SampleFeaturePtr_zeroMean, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_addWhiteNoise", _wrap_SampleFeaturePtr_addWhiteNoise, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_setSamples", _wrap_SampleFeaturePtr_setSamples, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_copySamples", _wrap_SampleFeaturePtr_copySamples, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_getSampleRate", _wrap_SampleFeaturePtr_getSampleRate, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_getChanN", _wrap_SampleFeaturePtr_getChanN, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_name", _wrap_SampleFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_size", _wrap_SampleFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_is_end", _wrap_SampleFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_current", _wrap_SampleFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"SampleFeaturePtr_swigregister", SampleFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SampleFeatureRunonPtr", (PyCFunction) _wrap_new_SampleFeatureRunonPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeatureRunonPtr___iter__", _wrap_SampleFeatureRunonPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr___deref__", _wrap_SampleFeatureRunonPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SampleFeatureRunonPtr", _wrap_delete_SampleFeatureRunonPtr, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_frame_no", _wrap_SampleFeatureRunonPtr_frame_no, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_frameN", _wrap_SampleFeatureRunonPtr_frameN, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_read", (PyCFunction) _wrap_SampleFeatureRunonPtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeatureRunonPtr_write", (PyCFunction) _wrap_SampleFeatureRunonPtr_write, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeatureRunonPtr_cut", (PyCFunction) _wrap_SampleFeatureRunonPtr_cut, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeatureRunonPtr_reset", _wrap_SampleFeatureRunonPtr_reset, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_next", (PyCFunction) _wrap_SampleFeatureRunonPtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeatureRunonPtr_exit", _wrap_SampleFeatureRunonPtr_exit, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_randomize", (PyCFunction) _wrap_SampleFeatureRunonPtr_randomize, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SampleFeatureRunonPtr_data", _wrap_SampleFeatureRunonPtr_data, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_samplesN", _wrap_SampleFeatureRunonPtr_samplesN, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_dataDouble", _wrap_SampleFeatureRunonPtr_dataDouble, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_zeroMean", _wrap_SampleFeatureRunonPtr_zeroMean, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_addWhiteNoise", _wrap_SampleFeatureRunonPtr_addWhiteNoise, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_setSamples", _wrap_SampleFeatureRunonPtr_setSamples, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_copySamples", _wrap_SampleFeatureRunonPtr_copySamples, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_getSampleRate", _wrap_SampleFeatureRunonPtr_getSampleRate, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_getChanN", _wrap_SampleFeatureRunonPtr_getChanN, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_name", _wrap_SampleFeatureRunonPtr_name, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_size", _wrap_SampleFeatureRunonPtr_size, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_is_end", _wrap_SampleFeatureRunonPtr_is_end, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_current", _wrap_SampleFeatureRunonPtr_current, METH_VARARGS, NULL},
	 { (char *)"SampleFeatureRunonPtr_swigregister", SampleFeatureRunonPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IterativeSingleChannelSampleFeaturePtr", (PyCFunction) _wrap_new_IterativeSingleChannelSampleFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr___iter__", _wrap_IterativeSingleChannelSampleFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr___deref__", _wrap_IterativeSingleChannelSampleFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_IterativeSingleChannelSampleFeaturePtr", _wrap_delete_IterativeSingleChannelSampleFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_read", (PyCFunction) _wrap_IterativeSingleChannelSampleFeaturePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_next", (PyCFunction) _wrap_IterativeSingleChannelSampleFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_reset", _wrap_IterativeSingleChannelSampleFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_samplesN", _wrap_IterativeSingleChannelSampleFeaturePtr_samplesN, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_name", _wrap_IterativeSingleChannelSampleFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_size", _wrap_IterativeSingleChannelSampleFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_is_end", _wrap_IterativeSingleChannelSampleFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_current", _wrap_IterativeSingleChannelSampleFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"IterativeSingleChannelSampleFeaturePtr_swigregister", IterativeSingleChannelSampleFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IterativeSampleFeaturePtr", (PyCFunction) _wrap_new_IterativeSampleFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IterativeSampleFeaturePtr___iter__", _wrap_IterativeSampleFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr___deref__", _wrap_IterativeSampleFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_IterativeSampleFeaturePtr", _wrap_delete_IterativeSampleFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_read", (PyCFunction) _wrap_IterativeSampleFeaturePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_next", (PyCFunction) _wrap_IterativeSampleFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_samplesN", _wrap_IterativeSampleFeaturePtr_samplesN, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_changeFirstChannelID", _wrap_IterativeSampleFeaturePtr_changeFirstChannelID, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_name", _wrap_IterativeSampleFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_size", _wrap_IterativeSampleFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_is_end", _wrap_IterativeSampleFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_current", _wrap_IterativeSampleFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_reset", _wrap_IterativeSampleFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"IterativeSampleFeaturePtr_swigregister", IterativeSampleFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BlockSizeConversionFeaturePtr", (PyCFunction) _wrap_new_BlockSizeConversionFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr___iter__", _wrap_BlockSizeConversionFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr___deref__", _wrap_BlockSizeConversionFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_BlockSizeConversionFeaturePtr", _wrap_delete_BlockSizeConversionFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr_next", (PyCFunction) _wrap_BlockSizeConversionFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr_name", _wrap_BlockSizeConversionFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr_size", _wrap_BlockSizeConversionFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr_is_end", _wrap_BlockSizeConversionFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr_current", _wrap_BlockSizeConversionFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr_reset", _wrap_BlockSizeConversionFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeaturePtr_swigregister", BlockSizeConversionFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BlockSizeConversionFeatureShortPtr", (PyCFunction) _wrap_new_BlockSizeConversionFeatureShortPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BlockSizeConversionFeatureShortPtr___iter__", _wrap_BlockSizeConversionFeatureShortPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeatureShortPtr___deref__", _wrap_BlockSizeConversionFeatureShortPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_BlockSizeConversionFeatureShortPtr", _wrap_delete_BlockSizeConversionFeatureShortPtr, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeatureShortPtr_next", _wrap_BlockSizeConversionFeatureShortPtr_next, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeatureShortPtr_name", _wrap_BlockSizeConversionFeatureShortPtr_name, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeatureShortPtr_size", _wrap_BlockSizeConversionFeatureShortPtr_size, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeatureShortPtr_reset", _wrap_BlockSizeConversionFeatureShortPtr_reset, METH_VARARGS, NULL},
	 { (char *)"BlockSizeConversionFeatureShortPtr_swigregister", BlockSizeConversionFeatureShortPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PreemphasisFeaturePtr", (PyCFunction) _wrap_new_PreemphasisFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"PreemphasisFeaturePtr___iter__", _wrap_PreemphasisFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr___deref__", _wrap_PreemphasisFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_PreemphasisFeaturePtr", _wrap_delete_PreemphasisFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_next", _wrap_PreemphasisFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_reset", _wrap_PreemphasisFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_next_speaker", _wrap_PreemphasisFeaturePtr_next_speaker, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_name", _wrap_PreemphasisFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_size", _wrap_PreemphasisFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_is_end", _wrap_PreemphasisFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_current", _wrap_PreemphasisFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"PreemphasisFeaturePtr_swigregister", PreemphasisFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HammingFeatureShortPtr", (PyCFunction) _wrap_new_HammingFeatureShortPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HammingFeatureShortPtr___iter__", _wrap_HammingFeatureShortPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr___deref__", _wrap_HammingFeatureShortPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_HammingFeatureShortPtr", _wrap_delete_HammingFeatureShortPtr, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr_next", _wrap_HammingFeatureShortPtr_next, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr_name", _wrap_HammingFeatureShortPtr_name, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr_size", _wrap_HammingFeatureShortPtr_size, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr_is_end", _wrap_HammingFeatureShortPtr_is_end, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr_current", _wrap_HammingFeatureShortPtr_current, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr_reset", _wrap_HammingFeatureShortPtr_reset, METH_VARARGS, NULL},
	 { (char *)"HammingFeatureShortPtr_swigregister", HammingFeatureShortPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HammingFeaturePtr", (PyCFunction) _wrap_new_HammingFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"HammingFeaturePtr___iter__", _wrap_HammingFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr___deref__", _wrap_HammingFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_HammingFeaturePtr", _wrap_delete_HammingFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr_next", _wrap_HammingFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr_name", _wrap_HammingFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr_size", _wrap_HammingFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr_is_end", _wrap_HammingFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr_current", _wrap_HammingFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr_reset", _wrap_HammingFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"HammingFeaturePtr_swigregister", HammingFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FFTFeaturePtr", (PyCFunction) _wrap_new_FFTFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FFTFeaturePtr___iter__", _wrap_FFTFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr___deref__", _wrap_FFTFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_FFTFeaturePtr", _wrap_delete_FFTFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_next", (PyCFunction) _wrap_FFTFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FFTFeaturePtr_fftLen", _wrap_FFTFeaturePtr_fftLen, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_windowLen", _wrap_FFTFeaturePtr_windowLen, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_nBlocks", _wrap_FFTFeaturePtr_nBlocks, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_subsamplerate", _wrap_FFTFeaturePtr_subsamplerate, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_name", _wrap_FFTFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_size", _wrap_FFTFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_current", _wrap_FFTFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_reset", _wrap_FFTFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"FFTFeaturePtr_swigregister", FFTFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpectralPowerFloatFeaturePtr", (PyCFunction) _wrap_new_SpectralPowerFloatFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr___iter__", _wrap_SpectralPowerFloatFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr___deref__", _wrap_SpectralPowerFloatFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SpectralPowerFloatFeaturePtr", _wrap_delete_SpectralPowerFloatFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr_next", _wrap_SpectralPowerFloatFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr_name", _wrap_SpectralPowerFloatFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr_size", _wrap_SpectralPowerFloatFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr_is_end", _wrap_SpectralPowerFloatFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr_current", _wrap_SpectralPowerFloatFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr_reset", _wrap_SpectralPowerFloatFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFloatFeaturePtr_swigregister", SpectralPowerFloatFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpectralPowerFeaturePtr", (PyCFunction) _wrap_new_SpectralPowerFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SpectralPowerFeaturePtr___iter__", _wrap_SpectralPowerFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFeaturePtr___deref__", _wrap_SpectralPowerFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SpectralPowerFeaturePtr", _wrap_delete_SpectralPowerFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFeaturePtr_next", _wrap_SpectralPowerFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFeaturePtr_name", _wrap_SpectralPowerFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFeaturePtr_size", _wrap_SpectralPowerFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFeaturePtr_current", _wrap_SpectralPowerFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFeaturePtr_reset", _wrap_SpectralPowerFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"SpectralPowerFeaturePtr_swigregister", SpectralPowerFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SignalPowerFeaturePtr", (PyCFunction) _wrap_new_SignalPowerFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SignalPowerFeaturePtr___iter__", _wrap_SignalPowerFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr___deref__", _wrap_SignalPowerFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SignalPowerFeaturePtr", _wrap_delete_SignalPowerFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr_next", _wrap_SignalPowerFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr_name", _wrap_SignalPowerFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr_size", _wrap_SignalPowerFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr_is_end", _wrap_SignalPowerFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr_current", _wrap_SignalPowerFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr_reset", _wrap_SignalPowerFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"SignalPowerFeaturePtr_swigregister", SignalPowerFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ALogFeaturePtr", (PyCFunction) _wrap_new_ALogFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ALogFeaturePtr___iter__", _wrap_ALogFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr___deref__", _wrap_ALogFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_ALogFeaturePtr", _wrap_delete_ALogFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_next", _wrap_ALogFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_next_speaker", _wrap_ALogFeaturePtr_next_speaker, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_name", _wrap_ALogFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_size", _wrap_ALogFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_is_end", _wrap_ALogFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_current", _wrap_ALogFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_reset", _wrap_ALogFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"ALogFeaturePtr_swigregister", ALogFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NormalizeFeaturePtr", (PyCFunction) _wrap_new_NormalizeFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"NormalizeFeaturePtr___iter__", _wrap_NormalizeFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr___deref__", _wrap_NormalizeFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_NormalizeFeaturePtr", _wrap_delete_NormalizeFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_next", _wrap_NormalizeFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_next_speaker", _wrap_NormalizeFeaturePtr_next_speaker, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_name", _wrap_NormalizeFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_size", _wrap_NormalizeFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_is_end", _wrap_NormalizeFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_current", _wrap_NormalizeFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_reset", _wrap_NormalizeFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"NormalizeFeaturePtr_swigregister", NormalizeFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ThresholdFeaturePtr", (PyCFunction) _wrap_new_ThresholdFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ThresholdFeaturePtr___iter__", _wrap_ThresholdFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr___deref__", _wrap_ThresholdFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_ThresholdFeaturePtr", _wrap_delete_ThresholdFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr_next", _wrap_ThresholdFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr_name", _wrap_ThresholdFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr_size", _wrap_ThresholdFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr_is_end", _wrap_ThresholdFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr_current", _wrap_ThresholdFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr_reset", _wrap_ThresholdFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"ThresholdFeaturePtr_swigregister", ThresholdFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpectralResamplingFeaturePtr", (PyCFunction) _wrap_new_SpectralResamplingFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr___iter__", _wrap_SpectralResamplingFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr___deref__", _wrap_SpectralResamplingFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SpectralResamplingFeaturePtr", _wrap_delete_SpectralResamplingFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr_next", (PyCFunction) _wrap_SpectralResamplingFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr_name", _wrap_SpectralResamplingFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr_size", _wrap_SpectralResamplingFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr_current", _wrap_SpectralResamplingFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr_reset", _wrap_SpectralResamplingFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"SpectralResamplingFeaturePtr_swigregister", SpectralResamplingFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VTLNFeaturePtr", (PyCFunction) _wrap_new_VTLNFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VTLNFeaturePtr___iter__", _wrap_VTLNFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"VTLNFeaturePtr___deref__", _wrap_VTLNFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_VTLNFeaturePtr", _wrap_delete_VTLNFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"VTLNFeaturePtr_next", (PyCFunction) _wrap_VTLNFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VTLNFeaturePtr_matrix", (PyCFunction) _wrap_VTLNFeaturePtr_matrix, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VTLNFeaturePtr_warp", (PyCFunction) _wrap_VTLNFeaturePtr_warp, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"VTLNFeaturePtr_name", _wrap_VTLNFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"VTLNFeaturePtr_size", _wrap_VTLNFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"VTLNFeaturePtr_current", _wrap_VTLNFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"VTLNFeaturePtr_reset", _wrap_VTLNFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"VTLNFeaturePtr_swigregister", VTLNFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MelFeaturePtr", (PyCFunction) _wrap_new_MelFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MelFeaturePtr___iter__", _wrap_MelFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"MelFeaturePtr___deref__", _wrap_MelFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_MelFeaturePtr", _wrap_delete_MelFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"MelFeaturePtr_next", _wrap_MelFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"MelFeaturePtr_read", (PyCFunction) _wrap_MelFeaturePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MelFeaturePtr_matrix", (PyCFunction) _wrap_MelFeaturePtr_matrix, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MelFeaturePtr_name", _wrap_MelFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"MelFeaturePtr_size", _wrap_MelFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"MelFeaturePtr_current", _wrap_MelFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"MelFeaturePtr_reset", _wrap_MelFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"MelFeaturePtr_swigregister", MelFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SphinxMelFeaturePtr", (PyCFunction) _wrap_new_SphinxMelFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SphinxMelFeaturePtr___iter__", _wrap_SphinxMelFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SphinxMelFeaturePtr___deref__", _wrap_SphinxMelFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SphinxMelFeaturePtr", _wrap_delete_SphinxMelFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"SphinxMelFeaturePtr_next", _wrap_SphinxMelFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"SphinxMelFeaturePtr_name", _wrap_SphinxMelFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"SphinxMelFeaturePtr_size", _wrap_SphinxMelFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"SphinxMelFeaturePtr_current", _wrap_SphinxMelFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"SphinxMelFeaturePtr_reset", _wrap_SphinxMelFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"SphinxMelFeaturePtr_swigregister", SphinxMelFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LogFeaturePtr", (PyCFunction) _wrap_new_LogFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LogFeaturePtr___iter__", _wrap_LogFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr___deref__", _wrap_LogFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_LogFeaturePtr", _wrap_delete_LogFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr_next", _wrap_LogFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr_name", _wrap_LogFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr_size", _wrap_LogFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr_is_end", _wrap_LogFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr_current", _wrap_LogFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr_reset", _wrap_LogFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"LogFeaturePtr_swigregister", LogFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FloatToDoubleConversionFeaturePtr", (PyCFunction) _wrap_new_FloatToDoubleConversionFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FloatToDoubleConversionFeaturePtr___iter__", _wrap_FloatToDoubleConversionFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"FloatToDoubleConversionFeaturePtr___deref__", _wrap_FloatToDoubleConversionFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_FloatToDoubleConversionFeaturePtr", _wrap_delete_FloatToDoubleConversionFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"FloatToDoubleConversionFeaturePtr_swigregister", FloatToDoubleConversionFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CepstralFeaturePtr", (PyCFunction) _wrap_new_CepstralFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CepstralFeaturePtr___iter__", _wrap_CepstralFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr___deref__", _wrap_CepstralFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_CepstralFeaturePtr", _wrap_delete_CepstralFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_next", _wrap_CepstralFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_matrix", _wrap_CepstralFeaturePtr_matrix, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_name", _wrap_CepstralFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_size", _wrap_CepstralFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_is_end", _wrap_CepstralFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_current", _wrap_CepstralFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_reset", _wrap_CepstralFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"CepstralFeaturePtr_swigregister", CepstralFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WarpMVDRFeaturePtr", (PyCFunction) _wrap_new_WarpMVDRFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WarpMVDRFeaturePtr___iter__", _wrap_WarpMVDRFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"WarpMVDRFeaturePtr___deref__", _wrap_WarpMVDRFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_WarpMVDRFeaturePtr", _wrap_delete_WarpMVDRFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"WarpMVDRFeaturePtr_next", _wrap_WarpMVDRFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"WarpMVDRFeaturePtr_name", _wrap_WarpMVDRFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"WarpMVDRFeaturePtr_size", _wrap_WarpMVDRFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"WarpMVDRFeaturePtr_current", _wrap_WarpMVDRFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"WarpMVDRFeaturePtr_reset", _wrap_WarpMVDRFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"WarpMVDRFeaturePtr_swigregister", WarpMVDRFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BurgMVDRFeaturePtr", (PyCFunction) _wrap_new_BurgMVDRFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BurgMVDRFeaturePtr___iter__", _wrap_BurgMVDRFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"BurgMVDRFeaturePtr___deref__", _wrap_BurgMVDRFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_BurgMVDRFeaturePtr", _wrap_delete_BurgMVDRFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"BurgMVDRFeaturePtr_next", _wrap_BurgMVDRFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"BurgMVDRFeaturePtr_name", _wrap_BurgMVDRFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"BurgMVDRFeaturePtr_size", _wrap_BurgMVDRFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"BurgMVDRFeaturePtr_current", _wrap_BurgMVDRFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"BurgMVDRFeaturePtr_reset", _wrap_BurgMVDRFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"BurgMVDRFeaturePtr_swigregister", BurgMVDRFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WarpedTwiceMVDRFeaturePtr", (PyCFunction) _wrap_new_WarpedTwiceMVDRFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr___iter__", _wrap_WarpedTwiceMVDRFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr___deref__", _wrap_WarpedTwiceMVDRFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_WarpedTwiceMVDRFeaturePtr", _wrap_delete_WarpedTwiceMVDRFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr_next", (PyCFunction) _wrap_WarpedTwiceMVDRFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr_reset", _wrap_WarpedTwiceMVDRFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr_name", _wrap_WarpedTwiceMVDRFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr_size", _wrap_WarpedTwiceMVDRFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr_current", _wrap_WarpedTwiceMVDRFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"WarpedTwiceMVDRFeaturePtr_swigregister", WarpedTwiceMVDRFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WarpLPCFeaturePtr", (PyCFunction) _wrap_new_WarpLPCFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WarpLPCFeaturePtr___iter__", _wrap_WarpLPCFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"WarpLPCFeaturePtr___deref__", _wrap_WarpLPCFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_WarpLPCFeaturePtr", _wrap_delete_WarpLPCFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"WarpLPCFeaturePtr_next", _wrap_WarpLPCFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"WarpLPCFeaturePtr_name", _wrap_WarpLPCFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"WarpLPCFeaturePtr_size", _wrap_WarpLPCFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"WarpLPCFeaturePtr_current", _wrap_WarpLPCFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"WarpLPCFeaturePtr_reset", _wrap_WarpLPCFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"WarpLPCFeaturePtr_swigregister", WarpLPCFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BurgLPCFeaturePtr", (PyCFunction) _wrap_new_BurgLPCFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"BurgLPCFeaturePtr___iter__", _wrap_BurgLPCFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"BurgLPCFeaturePtr___deref__", _wrap_BurgLPCFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_BurgLPCFeaturePtr", _wrap_delete_BurgLPCFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"BurgLPCFeaturePtr_next", _wrap_BurgLPCFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"BurgLPCFeaturePtr_name", _wrap_BurgLPCFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"BurgLPCFeaturePtr_size", _wrap_BurgLPCFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"BurgLPCFeaturePtr_current", _wrap_BurgLPCFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"BurgLPCFeaturePtr_reset", _wrap_BurgLPCFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"BurgLPCFeaturePtr_swigregister", BurgLPCFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpectralSmoothingPtr", (PyCFunction) _wrap_new_SpectralSmoothingPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SpectralSmoothingPtr___iter__", _wrap_SpectralSmoothingPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SpectralSmoothingPtr___deref__", _wrap_SpectralSmoothingPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SpectralSmoothingPtr", _wrap_delete_SpectralSmoothingPtr, METH_VARARGS, NULL},
	 { (char *)"SpectralSmoothingPtr_next", _wrap_SpectralSmoothingPtr_next, METH_VARARGS, NULL},
	 { (char *)"SpectralSmoothingPtr_name", _wrap_SpectralSmoothingPtr_name, METH_VARARGS, NULL},
	 { (char *)"SpectralSmoothingPtr_size", _wrap_SpectralSmoothingPtr_size, METH_VARARGS, NULL},
	 { (char *)"SpectralSmoothingPtr_current", _wrap_SpectralSmoothingPtr_current, METH_VARARGS, NULL},
	 { (char *)"SpectralSmoothingPtr_reset", _wrap_SpectralSmoothingPtr_reset, METH_VARARGS, NULL},
	 { (char *)"SpectralSmoothingPtr_swigregister", SpectralSmoothingPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MeanSubtractionFeaturePtr", (PyCFunction) _wrap_new_MeanSubtractionFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr___iter__", _wrap_MeanSubtractionFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr___deref__", _wrap_MeanSubtractionFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_MeanSubtractionFeaturePtr", _wrap_delete_MeanSubtractionFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_next", (PyCFunction) _wrap_MeanSubtractionFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_mean", _wrap_MeanSubtractionFeaturePtr_mean, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_write", (PyCFunction) _wrap_MeanSubtractionFeaturePtr_write, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_next_speaker", _wrap_MeanSubtractionFeaturePtr_next_speaker, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_name", _wrap_MeanSubtractionFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_size", _wrap_MeanSubtractionFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_is_end", _wrap_MeanSubtractionFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_current", _wrap_MeanSubtractionFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_reset", _wrap_MeanSubtractionFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"MeanSubtractionFeaturePtr_swigregister", MeanSubtractionFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileMeanSubtractionFeaturePtr", (PyCFunction) _wrap_new_FileMeanSubtractionFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr___iter__", _wrap_FileMeanSubtractionFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr___deref__", _wrap_FileMeanSubtractionFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_FileMeanSubtractionFeaturePtr", _wrap_delete_FileMeanSubtractionFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_next", (PyCFunction) _wrap_FileMeanSubtractionFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_read", (PyCFunction) _wrap_FileMeanSubtractionFeaturePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_name", _wrap_FileMeanSubtractionFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_size", _wrap_FileMeanSubtractionFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_is_end", _wrap_FileMeanSubtractionFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_current", _wrap_FileMeanSubtractionFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_reset", _wrap_FileMeanSubtractionFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"FileMeanSubtractionFeaturePtr_swigregister", FileMeanSubtractionFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AdjacentFeaturePtr", (PyCFunction) _wrap_new_AdjacentFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"AdjacentFeaturePtr___iter__", _wrap_AdjacentFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr___deref__", _wrap_AdjacentFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_AdjacentFeaturePtr", _wrap_delete_AdjacentFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr_next", _wrap_AdjacentFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr_name", _wrap_AdjacentFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr_size", _wrap_AdjacentFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr_is_end", _wrap_AdjacentFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr_current", _wrap_AdjacentFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr_reset", _wrap_AdjacentFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"AdjacentFeaturePtr_swigregister", AdjacentFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LinearTransformFeaturePtr", _wrap_new_LinearTransformFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr___iter__", _wrap_LinearTransformFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr___deref__", _wrap_LinearTransformFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_LinearTransformFeaturePtr", _wrap_delete_LinearTransformFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_next", (PyCFunction) _wrap_LinearTransformFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LinearTransformFeaturePtr_matrix", _wrap_LinearTransformFeaturePtr_matrix, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_load", (PyCFunction) _wrap_LinearTransformFeaturePtr_load, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LinearTransformFeaturePtr_identity", _wrap_LinearTransformFeaturePtr_identity, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_name", _wrap_LinearTransformFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_size", _wrap_LinearTransformFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_is_end", _wrap_LinearTransformFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_current", _wrap_LinearTransformFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_reset", _wrap_LinearTransformFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"LinearTransformFeaturePtr_swigregister", LinearTransformFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StorageFeaturePtr", (PyCFunction) _wrap_new_StorageFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StorageFeaturePtr___iter__", _wrap_StorageFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr___deref__", _wrap_StorageFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_StorageFeaturePtr", _wrap_delete_StorageFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr_next", (PyCFunction) _wrap_StorageFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StorageFeaturePtr_write", (PyCFunction) _wrap_StorageFeaturePtr_write, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StorageFeaturePtr_read", (PyCFunction) _wrap_StorageFeaturePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StorageFeaturePtr_evaluate", _wrap_StorageFeaturePtr_evaluate, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr_reset", _wrap_StorageFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr_name", _wrap_StorageFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr_size", _wrap_StorageFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr_is_end", _wrap_StorageFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr_current", _wrap_StorageFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"StorageFeaturePtr_swigregister", StorageFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StaticStorageFeaturePtr", (PyCFunction) _wrap_new_StaticStorageFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StaticStorageFeaturePtr___iter__", _wrap_StaticStorageFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr___deref__", _wrap_StaticStorageFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_StaticStorageFeaturePtr", _wrap_delete_StaticStorageFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_next", (PyCFunction) _wrap_StaticStorageFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StaticStorageFeaturePtr_read", (PyCFunction) _wrap_StaticStorageFeaturePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"StaticStorageFeaturePtr_evaluate", _wrap_StaticStorageFeaturePtr_evaluate, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_reset", _wrap_StaticStorageFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_currentNFrames", _wrap_StaticStorageFeaturePtr_currentNFrames, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_name", _wrap_StaticStorageFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_size", _wrap_StaticStorageFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_is_end", _wrap_StaticStorageFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_current", _wrap_StaticStorageFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"StaticStorageFeaturePtr_swigregister", StaticStorageFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CircularStorageFeaturePtr", (PyCFunction) _wrap_new_CircularStorageFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CircularStorageFeaturePtr___iter__", _wrap_CircularStorageFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"CircularStorageFeaturePtr___deref__", _wrap_CircularStorageFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_CircularStorageFeaturePtr", _wrap_delete_CircularStorageFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"CircularStorageFeaturePtr_next", (PyCFunction) _wrap_CircularStorageFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CircularStorageFeaturePtr_name", _wrap_CircularStorageFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"CircularStorageFeaturePtr_size", _wrap_CircularStorageFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"CircularStorageFeaturePtr_is_end", _wrap_CircularStorageFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"CircularStorageFeaturePtr_current", _wrap_CircularStorageFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"CircularStorageFeaturePtr_reset", _wrap_CircularStorageFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"CircularStorageFeaturePtr_swigregister", CircularStorageFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FilterFeaturePtr", (PyCFunction) _wrap_new_FilterFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FilterFeaturePtr___iter__", _wrap_FilterFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"FilterFeaturePtr___deref__", _wrap_FilterFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_FilterFeaturePtr", _wrap_delete_FilterFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"FilterFeaturePtr_next", (PyCFunction) _wrap_FilterFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FilterFeaturePtr_name", _wrap_FilterFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"FilterFeaturePtr_size", _wrap_FilterFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"FilterFeaturePtr_is_end", _wrap_FilterFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"FilterFeaturePtr_current", _wrap_FilterFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"FilterFeaturePtr_reset", _wrap_FilterFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"FilterFeaturePtr_swigregister", FilterFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MergeFeaturePtr", (PyCFunction) _wrap_new_MergeFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MergeFeaturePtr___iter__", _wrap_MergeFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"MergeFeaturePtr___deref__", _wrap_MergeFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_MergeFeaturePtr", _wrap_delete_MergeFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"MergeFeaturePtr_next", (PyCFunction) _wrap_MergeFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MergeFeaturePtr_name", _wrap_MergeFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"MergeFeaturePtr_size", _wrap_MergeFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"MergeFeaturePtr_is_end", _wrap_MergeFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"MergeFeaturePtr_current", _wrap_MergeFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"MergeFeaturePtr_reset", _wrap_MergeFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"MergeFeaturePtr_swigregister", MergeFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiModalFeaturePtr", (PyCFunction) _wrap_new_MultiModalFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultiModalFeaturePtr___iter__", _wrap_MultiModalFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr___deref__", _wrap_MultiModalFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_MultiModalFeaturePtr", _wrap_delete_MultiModalFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr_next", (PyCFunction) _wrap_MultiModalFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"MultiModalFeaturePtr_addModalFeature", _wrap_MultiModalFeaturePtr_addModalFeature, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr_name", _wrap_MultiModalFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr_size", _wrap_MultiModalFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr_is_end", _wrap_MultiModalFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr_current", _wrap_MultiModalFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr_reset", _wrap_MultiModalFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"MultiModalFeaturePtr_swigregister", MultiModalFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FeatureSetPtr", (PyCFunction) _wrap_new_FeatureSetPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FeatureSetPtr___getitem__", _wrap_FeatureSetPtr___getitem__, METH_VARARGS, NULL},
	 { (char *)"FeatureSetPtr___deref__", _wrap_FeatureSetPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_FeatureSetPtr", _wrap_delete_FeatureSetPtr, METH_VARARGS, NULL},
	 { (char *)"FeatureSetPtr_name", _wrap_FeatureSetPtr_name, METH_VARARGS, NULL},
	 { (char *)"FeatureSetPtr_add", (PyCFunction) _wrap_FeatureSetPtr_add, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FeatureSetPtr_feature", (PyCFunction) _wrap_FeatureSetPtr_feature, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"FeatureSetPtr_swigregister", FeatureSetPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"writeGSLMatrix", _wrap_writeGSLMatrix, METH_VARARGS, NULL},
	 { (char *)"new_ZeroCrossingRateHammingFeaturePtr", (PyCFunction) _wrap_new_ZeroCrossingRateHammingFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr___iter__", _wrap_ZeroCrossingRateHammingFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr___deref__", _wrap_ZeroCrossingRateHammingFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_ZeroCrossingRateHammingFeaturePtr", _wrap_delete_ZeroCrossingRateHammingFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr_next", _wrap_ZeroCrossingRateHammingFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr_name", _wrap_ZeroCrossingRateHammingFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr_size", _wrap_ZeroCrossingRateHammingFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr_is_end", _wrap_ZeroCrossingRateHammingFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr_current", _wrap_ZeroCrossingRateHammingFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr_reset", _wrap_ZeroCrossingRateHammingFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"ZeroCrossingRateHammingFeaturePtr_swigregister", ZeroCrossingRateHammingFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_YINPitchFeaturePtr", (PyCFunction) _wrap_new_YINPitchFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"YINPitchFeaturePtr___iter__", _wrap_YINPitchFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr___deref__", _wrap_YINPitchFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_YINPitchFeaturePtr", _wrap_delete_YINPitchFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr_next", _wrap_YINPitchFeaturePtr_next, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr_name", _wrap_YINPitchFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr_size", _wrap_YINPitchFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr_is_end", _wrap_YINPitchFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr_current", _wrap_YINPitchFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr_reset", _wrap_YINPitchFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"YINPitchFeaturePtr_swigregister", YINPitchFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpikeFilterPtr", (PyCFunction) _wrap_new_SpikeFilterPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SpikeFilterPtr___iter__", _wrap_SpikeFilterPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr___deref__", _wrap_SpikeFilterPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SpikeFilterPtr", _wrap_delete_SpikeFilterPtr, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr_size", _wrap_SpikeFilterPtr_size, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr_next", _wrap_SpikeFilterPtr_next, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr_name", _wrap_SpikeFilterPtr_name, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr_is_end", _wrap_SpikeFilterPtr_is_end, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr_current", _wrap_SpikeFilterPtr_current, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr_reset", _wrap_SpikeFilterPtr_reset, METH_VARARGS, NULL},
	 { (char *)"SpikeFilterPtr_swigregister", SpikeFilterPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpikeFilter2Ptr", (PyCFunction) _wrap_new_SpikeFilter2Ptr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SpikeFilter2Ptr___iter__", _wrap_SpikeFilter2Ptr___iter__, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr___deref__", _wrap_SpikeFilter2Ptr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SpikeFilter2Ptr", _wrap_delete_SpikeFilter2Ptr, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_size", _wrap_SpikeFilter2Ptr_size, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_next", _wrap_SpikeFilter2Ptr_next, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_spikesN", _wrap_SpikeFilter2Ptr_spikesN, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_name", _wrap_SpikeFilter2Ptr_name, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_is_end", _wrap_SpikeFilter2Ptr_is_end, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_current", _wrap_SpikeFilter2Ptr_current, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_reset", _wrap_SpikeFilter2Ptr_reset, METH_VARARGS, NULL},
	 { (char *)"SpikeFilter2Ptr_swigregister", SpikeFilter2Ptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SoundFilePtr", (PyCFunction) _wrap_new_SoundFilePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SoundFilePtr___deref__", _wrap_SoundFilePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SoundFilePtr", _wrap_delete_SoundFilePtr, METH_VARARGS, NULL},
	 { (char *)"SoundFilePtr_frames", _wrap_SoundFilePtr_frames, METH_VARARGS, NULL},
	 { (char *)"SoundFilePtr_samplerate", _wrap_SoundFilePtr_samplerate, METH_VARARGS, NULL},
	 { (char *)"SoundFilePtr_channels", _wrap_SoundFilePtr_channels, METH_VARARGS, NULL},
	 { (char *)"SoundFilePtr_format", _wrap_SoundFilePtr_format, METH_VARARGS, NULL},
	 { (char *)"SoundFilePtr_sections", _wrap_SoundFilePtr_sections, METH_VARARGS, NULL},
	 { (char *)"SoundFilePtr_seekable", _wrap_SoundFilePtr_seekable, METH_VARARGS, NULL},
	 { (char *)"SoundFilePtr_readf", (PyCFunction) _wrap_SoundFilePtr_readf, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SoundFilePtr_writef", (PyCFunction) _wrap_SoundFilePtr_writef, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SoundFilePtr_read", (PyCFunction) _wrap_SoundFilePtr_read, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SoundFilePtr_write", (PyCFunction) _wrap_SoundFilePtr_write, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SoundFilePtr_seek", (PyCFunction) _wrap_SoundFilePtr_seek, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SoundFilePtr_swigregister", SoundFilePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DirectSampleFeaturePtr", (PyCFunction) _wrap_new_DirectSampleFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DirectSampleFeaturePtr___iter__", _wrap_DirectSampleFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr___deref__", _wrap_DirectSampleFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DirectSampleFeaturePtr", _wrap_delete_DirectSampleFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_next", (PyCFunction) _wrap_DirectSampleFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DirectSampleFeaturePtr_reset", _wrap_DirectSampleFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_channels", _wrap_DirectSampleFeaturePtr_channels, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_sampleRate", _wrap_DirectSampleFeaturePtr_sampleRate, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_setRegion", _wrap_DirectSampleFeaturePtr_setRegion, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_name", _wrap_DirectSampleFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_size", _wrap_DirectSampleFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_is_end", _wrap_DirectSampleFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_current", _wrap_DirectSampleFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"DirectSampleFeaturePtr_swigregister", DirectSampleFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DirectSampleOutputFeaturePtr", (PyCFunction) _wrap_new_DirectSampleOutputFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr___iter__", _wrap_DirectSampleOutputFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr___deref__", _wrap_DirectSampleOutputFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_DirectSampleOutputFeaturePtr", _wrap_delete_DirectSampleOutputFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr_next", (PyCFunction) _wrap_DirectSampleOutputFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr_reset", _wrap_DirectSampleOutputFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr_name", _wrap_DirectSampleOutputFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr_size", _wrap_DirectSampleOutputFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr_is_end", _wrap_DirectSampleOutputFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr_current", _wrap_DirectSampleOutputFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"DirectSampleOutputFeaturePtr_swigregister", DirectSampleOutputFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ChannelExtractionFeaturePtr", (PyCFunction) _wrap_new_ChannelExtractionFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr___iter__", _wrap_ChannelExtractionFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr___deref__", _wrap_ChannelExtractionFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_ChannelExtractionFeaturePtr", _wrap_delete_ChannelExtractionFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr_next", (PyCFunction) _wrap_ChannelExtractionFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr_name", _wrap_ChannelExtractionFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr_size", _wrap_ChannelExtractionFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr_is_end", _wrap_ChannelExtractionFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr_current", _wrap_ChannelExtractionFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr_reset", _wrap_ChannelExtractionFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"ChannelExtractionFeaturePtr_swigregister", ChannelExtractionFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SignalInterferenceFeaturePtr", (PyCFunction) _wrap_new_SignalInterferenceFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr___iter__", _wrap_SignalInterferenceFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr___deref__", _wrap_SignalInterferenceFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SignalInterferenceFeaturePtr", _wrap_delete_SignalInterferenceFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr_next", (PyCFunction) _wrap_SignalInterferenceFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr_name", _wrap_SignalInterferenceFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr_size", _wrap_SignalInterferenceFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr_is_end", _wrap_SignalInterferenceFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr_current", _wrap_SignalInterferenceFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr_reset", _wrap_SignalInterferenceFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"SignalInterferenceFeaturePtr_swigregister", SignalInterferenceFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AmplificationFeaturePtr", (PyCFunction) _wrap_new_AmplificationFeaturePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"AmplificationFeaturePtr___iter__", _wrap_AmplificationFeaturePtr___iter__, METH_VARARGS, NULL},
	 { (char *)"AmplificationFeaturePtr___deref__", _wrap_AmplificationFeaturePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_AmplificationFeaturePtr", _wrap_delete_AmplificationFeaturePtr, METH_VARARGS, NULL},
	 { (char *)"AmplificationFeaturePtr_next", (PyCFunction) _wrap_AmplificationFeaturePtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"AmplificationFeaturePtr_reset", _wrap_AmplificationFeaturePtr_reset, METH_VARARGS, NULL},
	 { (char *)"AmplificationFeaturePtr_name", _wrap_AmplificationFeaturePtr_name, METH_VARARGS, NULL},
	 { (char *)"AmplificationFeaturePtr_size", _wrap_AmplificationFeaturePtr_size, METH_VARARGS, NULL},
	 { (char *)"AmplificationFeaturePtr_is_end", _wrap_AmplificationFeaturePtr_is_end, METH_VARARGS, NULL},
	 { (char *)"AmplificationFeaturePtr_current", _wrap_AmplificationFeaturePtr_current, METH_VARARGS, NULL},
	 { (char *)"AmplificationFeaturePtr_swigregister", AmplificationFeaturePtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LPCSpectrumEstimatorPtr", (PyCFunction) _wrap_new_LPCSpectrumEstimatorPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr___iter__", _wrap_LPCSpectrumEstimatorPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr___deref__", _wrap_LPCSpectrumEstimatorPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_LPCSpectrumEstimatorPtr", _wrap_delete_LPCSpectrumEstimatorPtr, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_next", (PyCFunction) _wrap_LPCSpectrumEstimatorPtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_reset", _wrap_LPCSpectrumEstimatorPtr_reset, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_getLPCs", _wrap_LPCSpectrumEstimatorPtr_getLPCs, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_getAutoCorrelationVector", _wrap_LPCSpectrumEstimatorPtr_getAutoCorrelationVector, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_getPredictionError", _wrap_LPCSpectrumEstimatorPtr_getPredictionError, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_name", _wrap_LPCSpectrumEstimatorPtr_name, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_size", _wrap_LPCSpectrumEstimatorPtr_size, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_is_end", _wrap_LPCSpectrumEstimatorPtr_is_end, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_current", _wrap_LPCSpectrumEstimatorPtr_current, METH_VARARGS, NULL},
	 { (char *)"LPCSpectrumEstimatorPtr_swigregister", LPCSpectrumEstimatorPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CepstralSpectrumEstimatorPtr", (PyCFunction) _wrap_new_CepstralSpectrumEstimatorPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr___iter__", _wrap_CepstralSpectrumEstimatorPtr___iter__, METH_VARARGS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr___deref__", _wrap_CepstralSpectrumEstimatorPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_CepstralSpectrumEstimatorPtr", _wrap_delete_CepstralSpectrumEstimatorPtr, METH_VARARGS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr_next", (PyCFunction) _wrap_CepstralSpectrumEstimatorPtr_next, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr_reset", _wrap_CepstralSpectrumEstimatorPtr_reset, METH_VARARGS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr_name", _wrap_CepstralSpectrumEstimatorPtr_name, METH_VARARGS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr_size", _wrap_CepstralSpectrumEstimatorPtr_size, METH_VARARGS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr_is_end", _wrap_CepstralSpectrumEstimatorPtr_is_end, METH_VARARGS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr_current", _wrap_CepstralSpectrumEstimatorPtr_current, METH_VARARGS, NULL},
	 { (char *)"CepstralSpectrumEstimatorPtr_swigregister", CepstralSpectrumEstimatorPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SEMNBPtr", (PyCFunction) _wrap_new_SEMNBPtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"SEMNBPtr___deref__", _wrap_SEMNBPtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SEMNBPtr", _wrap_delete_SEMNBPtr, METH_VARARGS, NULL},
	 { (char *)"SEMNBPtr_reset", _wrap_SEMNBPtr_reset, METH_VARARGS, NULL},
	 { (char *)"SEMNBPtr_calcDerivativeOfDeviation", _wrap_SEMNBPtr_calcDerivativeOfDeviation, METH_VARARGS, NULL},
	 { (char *)"SEMNBPtr_getLPEnvelope", _wrap_SEMNBPtr_getLPEnvelope, METH_VARARGS, NULL},
	 { (char *)"SEMNBPtr_swigregister", SEMNBPtr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WriteSoundFilePtr", (PyCFunction) _wrap_new_WriteSoundFilePtr, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WriteSoundFilePtr___deref__", _wrap_WriteSoundFilePtr___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_WriteSoundFilePtr", _wrap_delete_WriteSoundFilePtr, METH_VARARGS, NULL},
	 { (char *)"WriteSoundFilePtr_write", (PyCFunction) _wrap_WriteSoundFilePtr_write, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"WriteSoundFilePtr_writeInt", _wrap_WriteSoundFilePtr_writeInt, METH_VARARGS, NULL},
	 { (char *)"WriteSoundFilePtr_writeShort", _wrap_WriteSoundFilePtr_writeShort, METH_VARARGS, NULL},
	 { (char *)"WriteSoundFilePtr_writeFloat", _wrap_WriteSoundFilePtr_writeFloat, METH_VARARGS, NULL},
	 { (char *)"WriteSoundFilePtr_swigregister", WriteSoundFilePtr_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_PyVectorFeatureStreamTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((PyVectorFeatureStream *) x));
}
static void *_p_SpectralSmoothingTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((SpectralSmoothing *) x));
}
static void *_p_SpectralPowerFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((SpectralPowerFeature *) x));
}
static void *_p_SpectralResamplingFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((SpectralResamplingFeature *) x));
}
static void *_p_VTLNFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((VTLNFeature *) x));
}
static void *_p_MelFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((MelFeature *) x));
}
static void *_p_SphinxMelFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((SphinxMelFeature *) x));
}
static void *_p_FloatToDoubleConversionFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((FloatToDoubleConversionFeature *) x));
}
static void *_p_WarpMVDRFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((WarpMVDRFeature *) x));
}
static void *_p_BurgMVDRFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((BurgMVDRFeature *) x));
}
static void *_p_WarpedTwiceMVDRFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((WarpedTwiceMVDRFeature *) x));
}
static void *_p_WarpLPCFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((WarpLPCFeature *) x));
}
static void *_p_BurgLPCFeatureTo_p_VectorFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStream *)  ((BurgLPCFeature *) x));
}
static void *_p_PyVectorComplexFeatureStreamTo_p_VectorComplexFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorComplexFeatureStream *)  ((PyVectorComplexFeatureStream *) x));
}
static void *_p_FFTFeatureTo_p_VectorComplexFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorComplexFeatureStream *)  ((FFTFeature *) x));
}
static void *_p_PyVectorShortFeatureStreamTo_p_VectorShortFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorShortFeatureStream *)  ((PyVectorShortFeatureStream *) x));
}
static void *_p_Conversion24bit2ShortTo_p_VectorShortFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorShortFeatureStream *)  ((Conversion24bit2Short *) x));
}
static void *_p_BlockSizeConversionFeatureShortTo_p_VectorShortFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorShortFeatureStream *)  ((BlockSizeConversionFeatureShort *) x));
}
static void *_p_DirectSampleOutputFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((DirectSampleOutputFeature *) x));
}
static void *_p_DirectSampleFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((DirectSampleFeature *) x));
}
static void *_p_YINPitchFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((YINPitchFeature *) x));
}
static void *_p_ZeroCrossingRateHammingFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((ZeroCrossingRateHammingFeature *) x));
}
static void *_p_MultiModalFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((MultiModalFeature *) x));
}
static void *_p_MergeFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((MergeFeature *) x));
}
static void *_p_FilterFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((FilterFeature *) x));
}
static void *_p_CircularStorageFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((CircularStorageFeature *) x));
}
static void *_p_StaticStorageFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((StaticStorageFeature *) x));
}
static void *_p_StorageFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((StorageFeature *) x));
}
static void *_p_LinearTransformFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((LinearTransformFeature *) x));
}
static void *_p_AdjacentFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((AdjacentFeature *) x));
}
static void *_p_FileMeanSubtractionFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((FileMeanSubtractionFeature *) x));
}
static void *_p_MeanSubtractionFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((MeanSubtractionFeature *) x));
}
static void *_p_CepstralFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((CepstralFeature *) x));
}
static void *_p_LogFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((LogFeature *) x));
}
static void *_p_ThresholdFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((ThresholdFeature *) x));
}
static void *_p_NormalizeFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((NormalizeFeature *) x));
}
static void *_p_FileFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((FileFeature *) x));
}
static void *_p_SampleFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((SampleFeature *) x));
}
static void *_p_IterativeSingleChannelSampleFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((IterativeSingleChannelSampleFeature *) x));
}
static void *_p_IterativeSampleFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((IterativeSampleFeature *) x));
}
static void *_p_BlockSizeConversionFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((BlockSizeConversionFeature *) x));
}
static void *_p_PreemphasisFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((PreemphasisFeature *) x));
}
static void *_p_HammingFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((HammingFeature *) x));
}
static void *_p_SpectralPowerFloatFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((SpectralPowerFloatFeature *) x));
}
static void *_p_SignalPowerFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((SignalPowerFeature *) x));
}
static void *_p_ALogFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((ALogFeature *) x));
}
static void *_p_ChannelExtractionFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((ChannelExtractionFeature *) x));
}
static void *_p_SignalInterferenceFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((SignalInterferenceFeature *) x));
}
static void *_p_AmplificationFeatureTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((AmplificationFeature *) x));
}
static void *_p_SpikeFilterTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((SpikeFilter *) x));
}
static void *_p_LPCSpectrumEstimatorTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((LPCSpectrumEstimator *) x));
}
static void *_p_CepstralSpectrumEstimatorTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((CepstralSpectrumEstimator *) x));
}
static void *_p_SampleFeatureRunonTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *) (SampleFeature *) ((SampleFeatureRunon *) x));
}
static void *_p_HammingFeatureShortTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((HammingFeatureShort *) x));
}
static void *_p_Conversion24bit2FloatTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((Conversion24bit2Float *) x));
}
static void *_p_SpikeFilter2To_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((SpikeFilter2 *) x));
}
static void *_p_PyVectorFloatFeatureStreamTo_p_VectorFloatFeatureStream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStream *)  ((PyVectorFloatFeatureStream *) x));
}
static void *_p_SampleFeatureRunonPtrTo_p_SampleFeaturePtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SampleFeaturePtr *)  ((SampleFeatureRunonPtr *) x));
}
static void *_p_PyVectorFeatureStreamPtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((PyVectorFeatureStreamPtr *) x));
}
static void *_p_SpectralPowerFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((SpectralPowerFeaturePtr *) x));
}
static void *_p_SpectralResamplingFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((SpectralResamplingFeaturePtr *) x));
}
static void *_p_VTLNFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((VTLNFeaturePtr *) x));
}
static void *_p_MelFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((MelFeaturePtr *) x));
}
static void *_p_SphinxMelFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((SphinxMelFeaturePtr *) x));
}
static void *_p_FloatToDoubleConversionFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((FloatToDoubleConversionFeaturePtr *) x));
}
static void *_p_WarpMVDRFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((WarpMVDRFeaturePtr *) x));
}
static void *_p_BurgMVDRFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((BurgMVDRFeaturePtr *) x));
}
static void *_p_WarpedTwiceMVDRFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((WarpedTwiceMVDRFeaturePtr *) x));
}
static void *_p_WarpLPCFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((WarpLPCFeaturePtr *) x));
}
static void *_p_BurgLPCFeaturePtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((BurgLPCFeaturePtr *) x));
}
static void *_p_SpectralSmoothingPtrTo_p_VectorFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFeatureStreamPtr *)  ((SpectralSmoothingPtr *) x));
}
static void *_p_PyVectorComplexFeatureStreamPtrTo_p_VectorComplexFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorComplexFeatureStreamPtr *)  ((PyVectorComplexFeatureStreamPtr *) x));
}
static void *_p_FFTFeaturePtrTo_p_VectorComplexFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorComplexFeatureStreamPtr *)  ((FFTFeaturePtr *) x));
}
static void *_p_PyVectorShortFeatureStreamPtrTo_p_VectorShortFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorShortFeatureStreamPtr *)  ((PyVectorShortFeatureStreamPtr *) x));
}
static void *_p_Conversion24bit2ShortPtrTo_p_VectorShortFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorShortFeatureStreamPtr *)  ((Conversion24bit2ShortPtr *) x));
}
static void *_p_BlockSizeConversionFeatureShortPtrTo_p_VectorShortFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorShortFeatureStreamPtr *)  ((BlockSizeConversionFeatureShortPtr *) x));
}
static void *_p_LPCSpectrumEstimatorPtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((LPCSpectrumEstimatorPtr *) x));
}
static void *_p_CepstralSpectrumEstimatorPtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((CepstralSpectrumEstimatorPtr *) x));
}
static void *_p_SpikeFilter2PtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((SpikeFilter2Ptr *) x));
}
static void *_p_SampleFeatureRunonPtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *) (SampleFeaturePtr *) ((SampleFeatureRunonPtr *) x));
}
static void *_p_Conversion24bit2FloatPtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((Conversion24bit2FloatPtr *) x));
}
static void *_p_SpikeFilterPtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((SpikeFilterPtr *) x));
}
static void *_p_DirectSampleOutputFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((DirectSampleOutputFeaturePtr *) x));
}
static void *_p_DirectSampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((DirectSampleFeaturePtr *) x));
}
static void *_p_YINPitchFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((YINPitchFeaturePtr *) x));
}
static void *_p_ZeroCrossingRateHammingFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((ZeroCrossingRateHammingFeaturePtr *) x));
}
static void *_p_MultiModalFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((MultiModalFeaturePtr *) x));
}
static void *_p_MergeFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((MergeFeaturePtr *) x));
}
static void *_p_FilterFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((FilterFeaturePtr *) x));
}
static void *_p_CircularStorageFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((CircularStorageFeaturePtr *) x));
}
static void *_p_StaticStorageFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((StaticStorageFeaturePtr *) x));
}
static void *_p_StorageFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((StorageFeaturePtr *) x));
}
static void *_p_LinearTransformFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((LinearTransformFeaturePtr *) x));
}
static void *_p_AdjacentFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((AdjacentFeaturePtr *) x));
}
static void *_p_FileMeanSubtractionFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((FileMeanSubtractionFeaturePtr *) x));
}
static void *_p_MeanSubtractionFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((MeanSubtractionFeaturePtr *) x));
}
static void *_p_CepstralFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((CepstralFeaturePtr *) x));
}
static void *_p_LogFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((LogFeaturePtr *) x));
}
static void *_p_ThresholdFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((ThresholdFeaturePtr *) x));
}
static void *_p_NormalizeFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((NormalizeFeaturePtr *) x));
}
static void *_p_FileFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((FileFeaturePtr *) x));
}
static void *_p_SampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((SampleFeaturePtr *) x));
}
static void *_p_IterativeSingleChannelSampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((IterativeSingleChannelSampleFeaturePtr *) x));
}
static void *_p_IterativeSampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((IterativeSampleFeaturePtr *) x));
}
static void *_p_BlockSizeConversionFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((BlockSizeConversionFeaturePtr *) x));
}
static void *_p_PreemphasisFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((PreemphasisFeaturePtr *) x));
}
static void *_p_HammingFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((HammingFeaturePtr *) x));
}
static void *_p_SpectralPowerFloatFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((SpectralPowerFloatFeaturePtr *) x));
}
static void *_p_SignalPowerFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((SignalPowerFeaturePtr *) x));
}
static void *_p_ALogFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((ALogFeaturePtr *) x));
}
static void *_p_ChannelExtractionFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((ChannelExtractionFeaturePtr *) x));
}
static void *_p_SignalInterferenceFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((SignalInterferenceFeaturePtr *) x));
}
static void *_p_AmplificationFeaturePtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((AmplificationFeaturePtr *) x));
}
static void *_p_HammingFeatureShortPtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((HammingFeatureShortPtr *) x));
}
static void *_p_PyVectorFloatFeatureStreamPtrTo_p_VectorFloatFeatureStreamPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VectorFloatFeatureStreamPtr *)  ((PyVectorFloatFeatureStreamPtr *) x));
}
static void *_p_SampleFeatureRunonTo_p_SampleFeature(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SampleFeature *)  ((SampleFeatureRunon *) x));
}
static swig_type_info _swigt__p_ALogFeature = {"_p_ALogFeature", "ALogFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ALogFeaturePtr = {"_p_ALogFeaturePtr", "ALogFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AdjacentFeature = {"_p_AdjacentFeature", "AdjacentFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AdjacentFeaturePtr = {"_p_AdjacentFeaturePtr", "AdjacentFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AmplificationFeature = {"_p_AmplificationFeature", "AmplificationFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AmplificationFeaturePtr = {"_p_AmplificationFeaturePtr", "AmplificationFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BlockSizeConversionFeature = {"_p_BlockSizeConversionFeature", "BlockSizeConversionFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BlockSizeConversionFeaturePtr = {"_p_BlockSizeConversionFeaturePtr", "BlockSizeConversionFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BlockSizeConversionFeatureShort = {"_p_BlockSizeConversionFeatureShort", "BlockSizeConversionFeatureShort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BlockSizeConversionFeatureShortPtr = {"_p_BlockSizeConversionFeatureShortPtr", "BlockSizeConversionFeatureShortPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BurgLPCFeature = {"_p_BurgLPCFeature", "BurgLPCFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BurgLPCFeaturePtr = {"_p_BurgLPCFeaturePtr", "BurgLPCFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BurgMVDRFeature = {"_p_BurgMVDRFeature", "BurgMVDRFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BurgMVDRFeaturePtr = {"_p_BurgMVDRFeaturePtr", "BurgMVDRFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CepstralFeature = {"_p_CepstralFeature", "CepstralFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CepstralFeaturePtr = {"_p_CepstralFeaturePtr", "CepstralFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CepstralSpectrumEstimator = {"_p_CepstralSpectrumEstimator", "CepstralSpectrumEstimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CepstralSpectrumEstimatorPtr = {"_p_CepstralSpectrumEstimatorPtr", "CepstralSpectrumEstimatorPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChannelExtractionFeature = {"_p_ChannelExtractionFeature", "ChannelExtractionFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChannelExtractionFeaturePtr = {"_p_ChannelExtractionFeaturePtr", "ChannelExtractionFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CircularStorageFeature = {"_p_CircularStorageFeature", "CircularStorageFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CircularStorageFeaturePtr = {"_p_CircularStorageFeaturePtr", "CircularStorageFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Conversion24bit2Float = {"_p_Conversion24bit2Float", "Conversion24bit2Float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Conversion24bit2FloatPtr = {"_p_Conversion24bit2FloatPtr", "Conversion24bit2FloatPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Conversion24bit2Short = {"_p_Conversion24bit2Short", "Conversion24bit2Short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Conversion24bit2ShortPtr = {"_p_Conversion24bit2ShortPtr", "Conversion24bit2ShortPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DirectSampleFeature = {"_p_DirectSampleFeature", "DirectSampleFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DirectSampleFeaturePtr = {"_p_DirectSampleFeaturePtr", "DirectSampleFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DirectSampleOutputFeature = {"_p_DirectSampleOutputFeature", "DirectSampleOutputFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DirectSampleOutputFeaturePtr = {"_p_DirectSampleOutputFeaturePtr", "DirectSampleOutputFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FFTFeature = {"_p_FFTFeature", "FFTFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FFTFeaturePtr = {"_p_FFTFeaturePtr", "FFTFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FeatureSet = {"_p_FeatureSet", "FeatureSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FeatureSetPtr = {"_p_FeatureSetPtr", "FeatureSetPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileFeature = {"_p_FileFeature", "FileFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileFeaturePtr = {"_p_FileFeaturePtr", "FileFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileMeanSubtractionFeature = {"_p_FileMeanSubtractionFeature", "FileMeanSubtractionFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileMeanSubtractionFeaturePtr = {"_p_FileMeanSubtractionFeaturePtr", "FileMeanSubtractionFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilterFeature = {"_p_FilterFeature", "FilterFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilterFeaturePtr = {"_p_FilterFeaturePtr", "FilterFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatToDoubleConversionFeaturePtr = {"_p_FloatToDoubleConversionFeaturePtr", "FloatToDoubleConversionFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HammingFeature = {"_p_HammingFeature", "HammingFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HammingFeaturePtr = {"_p_HammingFeaturePtr", "HammingFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HammingFeatureShort = {"_p_HammingFeatureShort", "HammingFeatureShort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HammingFeatureShortPtr = {"_p_HammingFeatureShortPtr", "HammingFeatureShortPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IterativeSampleFeature = {"_p_IterativeSampleFeature", "IterativeSampleFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IterativeSampleFeaturePtr = {"_p_IterativeSampleFeaturePtr", "IterativeSampleFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IterativeSingleChannelSampleFeature = {"_p_IterativeSingleChannelSampleFeature", "IterativeSingleChannelSampleFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IterativeSingleChannelSampleFeaturePtr = {"_p_IterativeSingleChannelSampleFeaturePtr", "IterativeSingleChannelSampleFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPCSpectrumEstimator = {"_p_LPCSpectrumEstimator", "LPCSpectrumEstimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LPCSpectrumEstimatorPtr = {"_p_LPCSpectrumEstimatorPtr", "LPCSpectrumEstimatorPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearTransformFeature = {"_p_LinearTransformFeature", "LinearTransformFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearTransformFeaturePtr = {"_p_LinearTransformFeaturePtr", "LinearTransformFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LogFeature = {"_p_LogFeature", "LogFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LogFeaturePtr = {"_p_LogFeaturePtr", "LogFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeanSubtractionFeature = {"_p_MeanSubtractionFeature", "MeanSubtractionFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeanSubtractionFeaturePtr = {"_p_MeanSubtractionFeaturePtr", "MeanSubtractionFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MelFeature = {"_p_MelFeature", "MelFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MelFeaturePtr = {"_p_MelFeaturePtr", "MelFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MergeFeature = {"_p_MergeFeature", "MergeFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MergeFeaturePtr = {"_p_MergeFeaturePtr", "MergeFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultiModalFeature = {"_p_MultiModalFeature", "MultiModalFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultiModalFeaturePtr = {"_p_MultiModalFeaturePtr", "MultiModalFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NormalizeFeature = {"_p_NormalizeFeature", "NormalizeFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NormalizeFeaturePtr = {"_p_NormalizeFeaturePtr", "NormalizeFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PreemphasisFeature = {"_p_PreemphasisFeature", "PreemphasisFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PreemphasisFeaturePtr = {"_p_PreemphasisFeaturePtr", "PreemphasisFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SEMNB = {"_p_SEMNB", "SEMNB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SEMNBPtr = {"_p_SEMNBPtr", "SEMNBPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SampleFeature = {"_p_SampleFeature", "SampleFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SampleFeaturePtr = {"_p_SampleFeaturePtr", "SampleFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SampleFeatureRunon = {"_p_SampleFeatureRunon", "SampleFeatureRunon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SampleFeatureRunonPtr = {"_p_SampleFeatureRunonPtr", "SampleFeatureRunonPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalInterferenceFeature = {"_p_SignalInterferenceFeature", "SignalInterferenceFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalInterferenceFeaturePtr = {"_p_SignalInterferenceFeaturePtr", "SignalInterferenceFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalPowerFeature = {"_p_SignalPowerFeature", "SignalPowerFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SignalPowerFeaturePtr = {"_p_SignalPowerFeaturePtr", "SignalPowerFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundFile = {"_p_SoundFile", "SoundFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundFilePtr = {"_p_SoundFilePtr", "SoundFilePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralPowerFeature = {"_p_SpectralPowerFeature", "SpectralPowerFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralPowerFeaturePtr = {"_p_SpectralPowerFeaturePtr", "SpectralPowerFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralPowerFloatFeature = {"_p_SpectralPowerFloatFeature", "SpectralPowerFloatFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralPowerFloatFeaturePtr = {"_p_SpectralPowerFloatFeaturePtr", "SpectralPowerFloatFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralResamplingFeature = {"_p_SpectralResamplingFeature", "SpectralResamplingFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralResamplingFeaturePtr = {"_p_SpectralResamplingFeaturePtr", "SpectralResamplingFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralSmoothing = {"_p_SpectralSmoothing", "SpectralSmoothing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectralSmoothingPtr = {"_p_SpectralSmoothingPtr", "SpectralSmoothingPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SphinxMelFeature = {"_p_SphinxMelFeature", "SphinxMelFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SphinxMelFeaturePtr = {"_p_SphinxMelFeaturePtr", "SphinxMelFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpikeFilter = {"_p_SpikeFilter", "SpikeFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpikeFilter2 = {"_p_SpikeFilter2", "SpikeFilter2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpikeFilter2Ptr = {"_p_SpikeFilter2Ptr", "SpikeFilter2Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpikeFilterPtr = {"_p_SpikeFilterPtr", "SpikeFilterPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StaticStorageFeature = {"_p_StaticStorageFeature", "StaticStorageFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StaticStorageFeaturePtr = {"_p_StaticStorageFeaturePtr", "StaticStorageFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StorageFeature = {"_p_StorageFeature", "StorageFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StorageFeaturePtr = {"_p_StorageFeaturePtr", "StorageFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_String = {"_p_String", "String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ThresholdFeature = {"_p_ThresholdFeature", "ThresholdFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ThresholdFeaturePtr = {"_p_ThresholdFeaturePtr", "ThresholdFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VTLNFeature = {"_p_VTLNFeature", "VTLNFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VTLNFeaturePtr = {"_p_VTLNFeaturePtr", "VTLNFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorCharFeatureStreamPtr = {"_p_VectorCharFeatureStreamPtr", "VectorCharFeatureStreamPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorComplexFeatureStream = {"_p_VectorComplexFeatureStream", "VectorComplexFeatureStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyVectorComplexFeatureStream = {"_p_PyVectorComplexFeatureStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_VectorComplexFeatureStreamPtr = {"_p_VectorComplexFeatureStreamPtr", "VectorComplexFeatureStreamPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyVectorComplexFeatureStreamPtr = {"_p_PyVectorComplexFeatureStreamPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_VectorFeatureStream = {"_p_VectorFeatureStream", "VectorFeatureStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatToDoubleConversionFeature = {"_p_FloatToDoubleConversionFeature", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_PyVectorFeatureStream = {"_p_PyVectorFeatureStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_VectorFeatureStreamPtr = {"_p_VectorFeatureStreamPtr", "VectorFeatureStreamPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyVectorFeatureStreamPtr = {"_p_PyVectorFeatureStreamPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_VectorFloatFeatureStream = {"_p_VectorFloatFeatureStream", "VectorFloatFeatureStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyVectorFloatFeatureStream = {"_p_PyVectorFloatFeatureStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_VectorFloatFeatureStreamPtr = {"_p_VectorFloatFeatureStreamPtr", "VectorFloatFeatureStreamPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyVectorFloatFeatureStreamPtr = {"_p_PyVectorFloatFeatureStreamPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_VectorShortFeatureStream = {"_p_VectorShortFeatureStream", "VectorShortFeatureStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyVectorShortFeatureStream = {"_p_PyVectorShortFeatureStream", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_VectorShortFeatureStreamPtr = {"_p_VectorShortFeatureStreamPtr", "VectorShortFeatureStreamPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyVectorShortFeatureStreamPtr = {"_p_PyVectorShortFeatureStreamPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_WarpLPCFeature = {"_p_WarpLPCFeature", "WarpLPCFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WarpLPCFeaturePtr = {"_p_WarpLPCFeaturePtr", "WarpLPCFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WarpMVDRFeature = {"_p_WarpMVDRFeature", "WarpMVDRFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WarpMVDRFeaturePtr = {"_p_WarpMVDRFeaturePtr", "WarpMVDRFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WarpedTwiceMVDRFeature = {"_p_WarpedTwiceMVDRFeature", "WarpedTwiceMVDRFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WarpedTwiceMVDRFeaturePtr = {"_p_WarpedTwiceMVDRFeaturePtr", "WarpedTwiceMVDRFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WriteSoundFile = {"_p_WriteSoundFile", "WriteSoundFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WriteSoundFilePtr = {"_p_WriteSoundFilePtr", "WriteSoundFilePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_YINPitchFeature = {"_p_YINPitchFeature", "YINPitchFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_YINPitchFeaturePtr = {"_p_YINPitchFeaturePtr", "YINPitchFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZeroCrossingRateHammingFeature = {"_p_ZeroCrossingRateHammingFeature", "ZeroCrossingRateHammingFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZeroCrossingRateHammingFeaturePtr = {"_p_ZeroCrossingRateHammingFeaturePtr", "ZeroCrossingRateHammingFeaturePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gsl_matrix = {"_p_gsl_matrix", "gsl_matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gsl_matrix_float = {"_p_gsl_matrix_float", "gsl_matrix_float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gsl_vector = {"_p_gsl_vector", "gsl_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sf_count_t = {"_p_sf_count_t", "sf_count_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ALogFeature,
  &_swigt__p_ALogFeaturePtr,
  &_swigt__p_AdjacentFeature,
  &_swigt__p_AdjacentFeaturePtr,
  &_swigt__p_AmplificationFeature,
  &_swigt__p_AmplificationFeaturePtr,
  &_swigt__p_BlockSizeConversionFeature,
  &_swigt__p_BlockSizeConversionFeaturePtr,
  &_swigt__p_BlockSizeConversionFeatureShort,
  &_swigt__p_BlockSizeConversionFeatureShortPtr,
  &_swigt__p_BurgLPCFeature,
  &_swigt__p_BurgLPCFeaturePtr,
  &_swigt__p_BurgMVDRFeature,
  &_swigt__p_BurgMVDRFeaturePtr,
  &_swigt__p_CepstralFeature,
  &_swigt__p_CepstralFeaturePtr,
  &_swigt__p_CepstralSpectrumEstimator,
  &_swigt__p_CepstralSpectrumEstimatorPtr,
  &_swigt__p_ChannelExtractionFeature,
  &_swigt__p_ChannelExtractionFeaturePtr,
  &_swigt__p_CircularStorageFeature,
  &_swigt__p_CircularStorageFeaturePtr,
  &_swigt__p_Conversion24bit2Float,
  &_swigt__p_Conversion24bit2FloatPtr,
  &_swigt__p_Conversion24bit2Short,
  &_swigt__p_Conversion24bit2ShortPtr,
  &_swigt__p_DirectSampleFeature,
  &_swigt__p_DirectSampleFeaturePtr,
  &_swigt__p_DirectSampleOutputFeature,
  &_swigt__p_DirectSampleOutputFeaturePtr,
  &_swigt__p_FFTFeature,
  &_swigt__p_FFTFeaturePtr,
  &_swigt__p_FeatureSet,
  &_swigt__p_FeatureSetPtr,
  &_swigt__p_FileFeature,
  &_swigt__p_FileFeaturePtr,
  &_swigt__p_FileMeanSubtractionFeature,
  &_swigt__p_FileMeanSubtractionFeaturePtr,
  &_swigt__p_FilterFeature,
  &_swigt__p_FilterFeaturePtr,
  &_swigt__p_FloatToDoubleConversionFeature,
  &_swigt__p_FloatToDoubleConversionFeaturePtr,
  &_swigt__p_HammingFeature,
  &_swigt__p_HammingFeaturePtr,
  &_swigt__p_HammingFeatureShort,
  &_swigt__p_HammingFeatureShortPtr,
  &_swigt__p_IterativeSampleFeature,
  &_swigt__p_IterativeSampleFeaturePtr,
  &_swigt__p_IterativeSingleChannelSampleFeature,
  &_swigt__p_IterativeSingleChannelSampleFeaturePtr,
  &_swigt__p_LPCSpectrumEstimator,
  &_swigt__p_LPCSpectrumEstimatorPtr,
  &_swigt__p_LinearTransformFeature,
  &_swigt__p_LinearTransformFeaturePtr,
  &_swigt__p_LogFeature,
  &_swigt__p_LogFeaturePtr,
  &_swigt__p_MeanSubtractionFeature,
  &_swigt__p_MeanSubtractionFeaturePtr,
  &_swigt__p_MelFeature,
  &_swigt__p_MelFeaturePtr,
  &_swigt__p_MergeFeature,
  &_swigt__p_MergeFeaturePtr,
  &_swigt__p_MultiModalFeature,
  &_swigt__p_MultiModalFeaturePtr,
  &_swigt__p_NormalizeFeature,
  &_swigt__p_NormalizeFeaturePtr,
  &_swigt__p_PreemphasisFeature,
  &_swigt__p_PreemphasisFeaturePtr,
  &_swigt__p_PyVectorComplexFeatureStream,
  &_swigt__p_PyVectorComplexFeatureStreamPtr,
  &_swigt__p_PyVectorFeatureStream,
  &_swigt__p_PyVectorFeatureStreamPtr,
  &_swigt__p_PyVectorFloatFeatureStream,
  &_swigt__p_PyVectorFloatFeatureStreamPtr,
  &_swigt__p_PyVectorShortFeatureStream,
  &_swigt__p_PyVectorShortFeatureStreamPtr,
  &_swigt__p_SEMNB,
  &_swigt__p_SEMNBPtr,
  &_swigt__p_SampleFeature,
  &_swigt__p_SampleFeaturePtr,
  &_swigt__p_SampleFeatureRunon,
  &_swigt__p_SampleFeatureRunonPtr,
  &_swigt__p_SignalInterferenceFeature,
  &_swigt__p_SignalInterferenceFeaturePtr,
  &_swigt__p_SignalPowerFeature,
  &_swigt__p_SignalPowerFeaturePtr,
  &_swigt__p_SoundFile,
  &_swigt__p_SoundFilePtr,
  &_swigt__p_SpectralPowerFeature,
  &_swigt__p_SpectralPowerFeaturePtr,
  &_swigt__p_SpectralPowerFloatFeature,
  &_swigt__p_SpectralPowerFloatFeaturePtr,
  &_swigt__p_SpectralResamplingFeature,
  &_swigt__p_SpectralResamplingFeaturePtr,
  &_swigt__p_SpectralSmoothing,
  &_swigt__p_SpectralSmoothingPtr,
  &_swigt__p_SphinxMelFeature,
  &_swigt__p_SphinxMelFeaturePtr,
  &_swigt__p_SpikeFilter,
  &_swigt__p_SpikeFilter2,
  &_swigt__p_SpikeFilter2Ptr,
  &_swigt__p_SpikeFilterPtr,
  &_swigt__p_StaticStorageFeature,
  &_swigt__p_StaticStorageFeaturePtr,
  &_swigt__p_StorageFeature,
  &_swigt__p_StorageFeaturePtr,
  &_swigt__p_String,
  &_swigt__p_ThresholdFeature,
  &_swigt__p_ThresholdFeaturePtr,
  &_swigt__p_VTLNFeature,
  &_swigt__p_VTLNFeaturePtr,
  &_swigt__p_VectorCharFeatureStreamPtr,
  &_swigt__p_VectorComplexFeatureStream,
  &_swigt__p_VectorComplexFeatureStreamPtr,
  &_swigt__p_VectorFeatureStream,
  &_swigt__p_VectorFeatureStreamPtr,
  &_swigt__p_VectorFloatFeatureStream,
  &_swigt__p_VectorFloatFeatureStreamPtr,
  &_swigt__p_VectorShortFeatureStream,
  &_swigt__p_VectorShortFeatureStreamPtr,
  &_swigt__p_WarpLPCFeature,
  &_swigt__p_WarpLPCFeaturePtr,
  &_swigt__p_WarpMVDRFeature,
  &_swigt__p_WarpMVDRFeaturePtr,
  &_swigt__p_WarpedTwiceMVDRFeature,
  &_swigt__p_WarpedTwiceMVDRFeaturePtr,
  &_swigt__p_WriteSoundFile,
  &_swigt__p_WriteSoundFilePtr,
  &_swigt__p_YINPitchFeature,
  &_swigt__p_YINPitchFeaturePtr,
  &_swigt__p_ZeroCrossingRateHammingFeature,
  &_swigt__p_ZeroCrossingRateHammingFeaturePtr,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_gsl_matrix,
  &_swigt__p_gsl_matrix_float,
  &_swigt__p_gsl_vector,
  &_swigt__p_int,
  &_swigt__p_sf_count_t,
};

static swig_cast_info _swigc__p_ALogFeature[] = {  {&_swigt__p_ALogFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ALogFeaturePtr[] = {  {&_swigt__p_ALogFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AdjacentFeature[] = {  {&_swigt__p_AdjacentFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AdjacentFeaturePtr[] = {  {&_swigt__p_AdjacentFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AmplificationFeature[] = {  {&_swigt__p_AmplificationFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AmplificationFeaturePtr[] = {  {&_swigt__p_AmplificationFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BlockSizeConversionFeature[] = {  {&_swigt__p_BlockSizeConversionFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BlockSizeConversionFeaturePtr[] = {  {&_swigt__p_BlockSizeConversionFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BlockSizeConversionFeatureShort[] = {  {&_swigt__p_BlockSizeConversionFeatureShort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BlockSizeConversionFeatureShortPtr[] = {  {&_swigt__p_BlockSizeConversionFeatureShortPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BurgLPCFeature[] = {  {&_swigt__p_BurgLPCFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BurgLPCFeaturePtr[] = {  {&_swigt__p_BurgLPCFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BurgMVDRFeature[] = {  {&_swigt__p_BurgMVDRFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BurgMVDRFeaturePtr[] = {  {&_swigt__p_BurgMVDRFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CepstralFeature[] = {  {&_swigt__p_CepstralFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CepstralFeaturePtr[] = {  {&_swigt__p_CepstralFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CepstralSpectrumEstimator[] = {  {&_swigt__p_CepstralSpectrumEstimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CepstralSpectrumEstimatorPtr[] = {  {&_swigt__p_CepstralSpectrumEstimatorPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChannelExtractionFeature[] = {  {&_swigt__p_ChannelExtractionFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChannelExtractionFeaturePtr[] = {  {&_swigt__p_ChannelExtractionFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CircularStorageFeature[] = {  {&_swigt__p_CircularStorageFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CircularStorageFeaturePtr[] = {  {&_swigt__p_CircularStorageFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Conversion24bit2Float[] = {  {&_swigt__p_Conversion24bit2Float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Conversion24bit2FloatPtr[] = {  {&_swigt__p_Conversion24bit2FloatPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Conversion24bit2Short[] = {  {&_swigt__p_Conversion24bit2Short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Conversion24bit2ShortPtr[] = {  {&_swigt__p_Conversion24bit2ShortPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DirectSampleFeature[] = {  {&_swigt__p_DirectSampleFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DirectSampleFeaturePtr[] = {  {&_swigt__p_DirectSampleFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DirectSampleOutputFeature[] = {  {&_swigt__p_DirectSampleOutputFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DirectSampleOutputFeaturePtr[] = {  {&_swigt__p_DirectSampleOutputFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTFeature[] = {  {&_swigt__p_FFTFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTFeaturePtr[] = {  {&_swigt__p_FFTFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FeatureSet[] = {  {&_swigt__p_FeatureSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FeatureSetPtr[] = {  {&_swigt__p_FeatureSetPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileFeature[] = {  {&_swigt__p_FileFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileFeaturePtr[] = {  {&_swigt__p_FileFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileMeanSubtractionFeature[] = {  {&_swigt__p_FileMeanSubtractionFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileMeanSubtractionFeaturePtr[] = {  {&_swigt__p_FileMeanSubtractionFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterFeature[] = {  {&_swigt__p_FilterFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterFeaturePtr[] = {  {&_swigt__p_FilterFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatToDoubleConversionFeaturePtr[] = {  {&_swigt__p_FloatToDoubleConversionFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HammingFeature[] = {  {&_swigt__p_HammingFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HammingFeaturePtr[] = {  {&_swigt__p_HammingFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HammingFeatureShort[] = {  {&_swigt__p_HammingFeatureShort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HammingFeatureShortPtr[] = {  {&_swigt__p_HammingFeatureShortPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IterativeSampleFeature[] = {  {&_swigt__p_IterativeSampleFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IterativeSampleFeaturePtr[] = {  {&_swigt__p_IterativeSampleFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IterativeSingleChannelSampleFeature[] = {  {&_swigt__p_IterativeSingleChannelSampleFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IterativeSingleChannelSampleFeaturePtr[] = {  {&_swigt__p_IterativeSingleChannelSampleFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPCSpectrumEstimator[] = {  {&_swigt__p_LPCSpectrumEstimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LPCSpectrumEstimatorPtr[] = {  {&_swigt__p_LPCSpectrumEstimatorPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearTransformFeature[] = {  {&_swigt__p_LinearTransformFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearTransformFeaturePtr[] = {  {&_swigt__p_LinearTransformFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LogFeature[] = {  {&_swigt__p_LogFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LogFeaturePtr[] = {  {&_swigt__p_LogFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeanSubtractionFeature[] = {  {&_swigt__p_MeanSubtractionFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeanSubtractionFeaturePtr[] = {  {&_swigt__p_MeanSubtractionFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MelFeature[] = {  {&_swigt__p_MelFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MelFeaturePtr[] = {  {&_swigt__p_MelFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MergeFeature[] = {  {&_swigt__p_MergeFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MergeFeaturePtr[] = {  {&_swigt__p_MergeFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultiModalFeature[] = {  {&_swigt__p_MultiModalFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultiModalFeaturePtr[] = {  {&_swigt__p_MultiModalFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NormalizeFeature[] = {  {&_swigt__p_NormalizeFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NormalizeFeaturePtr[] = {  {&_swigt__p_NormalizeFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PreemphasisFeature[] = {  {&_swigt__p_PreemphasisFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PreemphasisFeaturePtr[] = {  {&_swigt__p_PreemphasisFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SEMNB[] = {  {&_swigt__p_SEMNB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SEMNBPtr[] = {  {&_swigt__p_SEMNBPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SampleFeature[] = {  {&_swigt__p_SampleFeature, 0, 0, 0},  {&_swigt__p_SampleFeatureRunon, _p_SampleFeatureRunonTo_p_SampleFeature, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SampleFeaturePtr[] = {  {&_swigt__p_SampleFeaturePtr, 0, 0, 0},  {&_swigt__p_SampleFeatureRunonPtr, _p_SampleFeatureRunonPtrTo_p_SampleFeaturePtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SampleFeatureRunon[] = {  {&_swigt__p_SampleFeatureRunon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SampleFeatureRunonPtr[] = {  {&_swigt__p_SampleFeatureRunonPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalInterferenceFeature[] = {  {&_swigt__p_SignalInterferenceFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalInterferenceFeaturePtr[] = {  {&_swigt__p_SignalInterferenceFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalPowerFeature[] = {  {&_swigt__p_SignalPowerFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SignalPowerFeaturePtr[] = {  {&_swigt__p_SignalPowerFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundFile[] = {  {&_swigt__p_SoundFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundFilePtr[] = {  {&_swigt__p_SoundFilePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralPowerFeature[] = {  {&_swigt__p_SpectralPowerFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralPowerFeaturePtr[] = {  {&_swigt__p_SpectralPowerFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralPowerFloatFeature[] = {  {&_swigt__p_SpectralPowerFloatFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralPowerFloatFeaturePtr[] = {  {&_swigt__p_SpectralPowerFloatFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralResamplingFeature[] = {  {&_swigt__p_SpectralResamplingFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralResamplingFeaturePtr[] = {  {&_swigt__p_SpectralResamplingFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralSmoothing[] = {  {&_swigt__p_SpectralSmoothing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectralSmoothingPtr[] = {  {&_swigt__p_SpectralSmoothingPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SphinxMelFeature[] = {  {&_swigt__p_SphinxMelFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SphinxMelFeaturePtr[] = {  {&_swigt__p_SphinxMelFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpikeFilter[] = {  {&_swigt__p_SpikeFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpikeFilter2[] = {  {&_swigt__p_SpikeFilter2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpikeFilter2Ptr[] = {  {&_swigt__p_SpikeFilter2Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpikeFilterPtr[] = {  {&_swigt__p_SpikeFilterPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StaticStorageFeature[] = {  {&_swigt__p_StaticStorageFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StaticStorageFeaturePtr[] = {  {&_swigt__p_StaticStorageFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StorageFeature[] = {  {&_swigt__p_StorageFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StorageFeaturePtr[] = {  {&_swigt__p_StorageFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_String[] = {  {&_swigt__p_String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThresholdFeature[] = {  {&_swigt__p_ThresholdFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThresholdFeaturePtr[] = {  {&_swigt__p_ThresholdFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VTLNFeature[] = {  {&_swigt__p_VTLNFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VTLNFeaturePtr[] = {  {&_swigt__p_VTLNFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorCharFeatureStreamPtr[] = {  {&_swigt__p_VectorCharFeatureStreamPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorComplexFeatureStream[] = {{&_swigt__p_PyVectorComplexFeatureStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorComplexFeatureStream[] = {  {&_swigt__p_VectorComplexFeatureStream, 0, 0, 0},  {&_swigt__p_PyVectorComplexFeatureStream, _p_PyVectorComplexFeatureStreamTo_p_VectorComplexFeatureStream, 0, 0},  {&_swigt__p_FFTFeature, _p_FFTFeatureTo_p_VectorComplexFeatureStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorComplexFeatureStreamPtr[] = {{&_swigt__p_PyVectorComplexFeatureStreamPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorComplexFeatureStreamPtr[] = {  {&_swigt__p_VectorComplexFeatureStreamPtr, 0, 0, 0},  {&_swigt__p_PyVectorComplexFeatureStreamPtr, _p_PyVectorComplexFeatureStreamPtrTo_p_VectorComplexFeatureStreamPtr, 0, 0},  {&_swigt__p_FFTFeaturePtr, _p_FFTFeaturePtrTo_p_VectorComplexFeatureStreamPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatToDoubleConversionFeature[] = {{&_swigt__p_FloatToDoubleConversionFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorFeatureStream[] = {{&_swigt__p_PyVectorFeatureStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorFeatureStream[] = {  {&_swigt__p_SpectralPowerFeature, _p_SpectralPowerFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_SpectralResamplingFeature, _p_SpectralResamplingFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_VTLNFeature, _p_VTLNFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_MelFeature, _p_MelFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_SphinxMelFeature, _p_SphinxMelFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_FloatToDoubleConversionFeature, _p_FloatToDoubleConversionFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_WarpMVDRFeature, _p_WarpMVDRFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_BurgMVDRFeature, _p_BurgMVDRFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_WarpedTwiceMVDRFeature, _p_WarpedTwiceMVDRFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_WarpLPCFeature, _p_WarpLPCFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_BurgLPCFeature, _p_BurgLPCFeatureTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_PyVectorFeatureStream, _p_PyVectorFeatureStreamTo_p_VectorFeatureStream, 0, 0},  {&_swigt__p_VectorFeatureStream, 0, 0, 0},  {&_swigt__p_SpectralSmoothing, _p_SpectralSmoothingTo_p_VectorFeatureStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorFeatureStreamPtr[] = {{&_swigt__p_PyVectorFeatureStreamPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorFeatureStreamPtr[] = {  {&_swigt__p_PyVectorFeatureStreamPtr, _p_PyVectorFeatureStreamPtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_VectorFeatureStreamPtr, 0, 0, 0},  {&_swigt__p_SpectralSmoothingPtr, _p_SpectralSmoothingPtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_SpectralPowerFeaturePtr, _p_SpectralPowerFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_SpectralResamplingFeaturePtr, _p_SpectralResamplingFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_VTLNFeaturePtr, _p_VTLNFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_MelFeaturePtr, _p_MelFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_SphinxMelFeaturePtr, _p_SphinxMelFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_FloatToDoubleConversionFeaturePtr, _p_FloatToDoubleConversionFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_WarpMVDRFeaturePtr, _p_WarpMVDRFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_BurgMVDRFeaturePtr, _p_BurgMVDRFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_WarpedTwiceMVDRFeaturePtr, _p_WarpedTwiceMVDRFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_WarpLPCFeaturePtr, _p_WarpLPCFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},  {&_swigt__p_BurgLPCFeaturePtr, _p_BurgLPCFeaturePtrTo_p_VectorFeatureStreamPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorFloatFeatureStream[] = {{&_swigt__p_PyVectorFloatFeatureStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorFloatFeatureStream[] = {  {&_swigt__p_FileMeanSubtractionFeature, _p_FileMeanSubtractionFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_AdjacentFeature, _p_AdjacentFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_LinearTransformFeature, _p_LinearTransformFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_StorageFeature, _p_StorageFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_StaticStorageFeature, _p_StaticStorageFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_CircularStorageFeature, _p_CircularStorageFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_FilterFeature, _p_FilterFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_MergeFeature, _p_MergeFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_MultiModalFeature, _p_MultiModalFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_ZeroCrossingRateHammingFeature, _p_ZeroCrossingRateHammingFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_YINPitchFeature, _p_YINPitchFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_DirectSampleFeature, _p_DirectSampleFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_DirectSampleOutputFeature, _p_DirectSampleOutputFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_MeanSubtractionFeature, _p_MeanSubtractionFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_CepstralFeature, _p_CepstralFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_LogFeature, _p_LogFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_ThresholdFeature, _p_ThresholdFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_NormalizeFeature, _p_NormalizeFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_FileFeature, _p_FileFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_AmplificationFeature, _p_AmplificationFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_SignalInterferenceFeature, _p_SignalInterferenceFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_ChannelExtractionFeature, _p_ChannelExtractionFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_ALogFeature, _p_ALogFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_SignalPowerFeature, _p_SignalPowerFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_SpectralPowerFloatFeature, _p_SpectralPowerFloatFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_HammingFeature, _p_HammingFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_PreemphasisFeature, _p_PreemphasisFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_BlockSizeConversionFeature, _p_BlockSizeConversionFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_IterativeSampleFeature, _p_IterativeSampleFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_IterativeSingleChannelSampleFeature, _p_IterativeSingleChannelSampleFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_SampleFeature, _p_SampleFeatureTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_LPCSpectrumEstimator, _p_LPCSpectrumEstimatorTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_SpikeFilter, _p_SpikeFilterTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_CepstralSpectrumEstimator, _p_CepstralSpectrumEstimatorTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_SampleFeatureRunon, _p_SampleFeatureRunonTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_HammingFeatureShort, _p_HammingFeatureShortTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_Conversion24bit2Float, _p_Conversion24bit2FloatTo_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_SpikeFilter2, _p_SpikeFilter2To_p_VectorFloatFeatureStream, 0, 0},  {&_swigt__p_VectorFloatFeatureStream, 0, 0, 0},  {&_swigt__p_PyVectorFloatFeatureStream, _p_PyVectorFloatFeatureStreamTo_p_VectorFloatFeatureStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorFloatFeatureStreamPtr[] = {{&_swigt__p_PyVectorFloatFeatureStreamPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorFloatFeatureStreamPtr[] = {  {&_swigt__p_LPCSpectrumEstimatorPtr, _p_LPCSpectrumEstimatorPtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_CepstralSpectrumEstimatorPtr, _p_CepstralSpectrumEstimatorPtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_SpikeFilter2Ptr, _p_SpikeFilter2PtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_SampleFeatureRunonPtr, _p_SampleFeatureRunonPtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_Conversion24bit2FloatPtr, _p_Conversion24bit2FloatPtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_SpikeFilterPtr, _p_SpikeFilterPtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_FilterFeaturePtr, _p_FilterFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_MergeFeaturePtr, _p_MergeFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_MultiModalFeaturePtr, _p_MultiModalFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_ZeroCrossingRateHammingFeaturePtr, _p_ZeroCrossingRateHammingFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_YINPitchFeaturePtr, _p_YINPitchFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_DirectSampleFeaturePtr, _p_DirectSampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_DirectSampleOutputFeaturePtr, _p_DirectSampleOutputFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_CircularStorageFeaturePtr, _p_CircularStorageFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_StaticStorageFeaturePtr, _p_StaticStorageFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_StorageFeaturePtr, _p_StorageFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_LinearTransformFeaturePtr, _p_LinearTransformFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_AdjacentFeaturePtr, _p_AdjacentFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_FileMeanSubtractionFeaturePtr, _p_FileMeanSubtractionFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_MeanSubtractionFeaturePtr, _p_MeanSubtractionFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_CepstralFeaturePtr, _p_CepstralFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_LogFeaturePtr, _p_LogFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_ThresholdFeaturePtr, _p_ThresholdFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_NormalizeFeaturePtr, _p_NormalizeFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_FileFeaturePtr, _p_FileFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_SampleFeaturePtr, _p_SampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_SignalPowerFeaturePtr, _p_SignalPowerFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_SpectralPowerFloatFeaturePtr, _p_SpectralPowerFloatFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_HammingFeaturePtr, _p_HammingFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_PreemphasisFeaturePtr, _p_PreemphasisFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_BlockSizeConversionFeaturePtr, _p_BlockSizeConversionFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_IterativeSampleFeaturePtr, _p_IterativeSampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_IterativeSingleChannelSampleFeaturePtr, _p_IterativeSingleChannelSampleFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_ALogFeaturePtr, _p_ALogFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_ChannelExtractionFeaturePtr, _p_ChannelExtractionFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_SignalInterferenceFeaturePtr, _p_SignalInterferenceFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_AmplificationFeaturePtr, _p_AmplificationFeaturePtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_HammingFeatureShortPtr, _p_HammingFeatureShortPtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},  {&_swigt__p_VectorFloatFeatureStreamPtr, 0, 0, 0},  {&_swigt__p_PyVectorFloatFeatureStreamPtr, _p_PyVectorFloatFeatureStreamPtrTo_p_VectorFloatFeatureStreamPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorShortFeatureStream[] = {{&_swigt__p_PyVectorShortFeatureStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorShortFeatureStream[] = {  {&_swigt__p_VectorShortFeatureStream, 0, 0, 0},  {&_swigt__p_PyVectorShortFeatureStream, _p_PyVectorShortFeatureStreamTo_p_VectorShortFeatureStream, 0, 0},  {&_swigt__p_Conversion24bit2Short, _p_Conversion24bit2ShortTo_p_VectorShortFeatureStream, 0, 0},  {&_swigt__p_BlockSizeConversionFeatureShort, _p_BlockSizeConversionFeatureShortTo_p_VectorShortFeatureStream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyVectorShortFeatureStreamPtr[] = {{&_swigt__p_PyVectorShortFeatureStreamPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorShortFeatureStreamPtr[] = {  {&_swigt__p_VectorShortFeatureStreamPtr, 0, 0, 0},  {&_swigt__p_PyVectorShortFeatureStreamPtr, _p_PyVectorShortFeatureStreamPtrTo_p_VectorShortFeatureStreamPtr, 0, 0},  {&_swigt__p_Conversion24bit2ShortPtr, _p_Conversion24bit2ShortPtrTo_p_VectorShortFeatureStreamPtr, 0, 0},  {&_swigt__p_BlockSizeConversionFeatureShortPtr, _p_BlockSizeConversionFeatureShortPtrTo_p_VectorShortFeatureStreamPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WarpLPCFeature[] = {  {&_swigt__p_WarpLPCFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WarpLPCFeaturePtr[] = {  {&_swigt__p_WarpLPCFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WarpMVDRFeature[] = {  {&_swigt__p_WarpMVDRFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WarpMVDRFeaturePtr[] = {  {&_swigt__p_WarpMVDRFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WarpedTwiceMVDRFeature[] = {  {&_swigt__p_WarpedTwiceMVDRFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WarpedTwiceMVDRFeaturePtr[] = {  {&_swigt__p_WarpedTwiceMVDRFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WriteSoundFile[] = {  {&_swigt__p_WriteSoundFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WriteSoundFilePtr[] = {  {&_swigt__p_WriteSoundFilePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_YINPitchFeature[] = {  {&_swigt__p_YINPitchFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_YINPitchFeaturePtr[] = {  {&_swigt__p_YINPitchFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZeroCrossingRateHammingFeature[] = {  {&_swigt__p_ZeroCrossingRateHammingFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZeroCrossingRateHammingFeaturePtr[] = {  {&_swigt__p_ZeroCrossingRateHammingFeaturePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsl_matrix[] = {  {&_swigt__p_gsl_matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsl_matrix_float[] = {  {&_swigt__p_gsl_matrix_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gsl_vector[] = {  {&_swigt__p_gsl_vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sf_count_t[] = {  {&_swigt__p_sf_count_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ALogFeature,
  _swigc__p_ALogFeaturePtr,
  _swigc__p_AdjacentFeature,
  _swigc__p_AdjacentFeaturePtr,
  _swigc__p_AmplificationFeature,
  _swigc__p_AmplificationFeaturePtr,
  _swigc__p_BlockSizeConversionFeature,
  _swigc__p_BlockSizeConversionFeaturePtr,
  _swigc__p_BlockSizeConversionFeatureShort,
  _swigc__p_BlockSizeConversionFeatureShortPtr,
  _swigc__p_BurgLPCFeature,
  _swigc__p_BurgLPCFeaturePtr,
  _swigc__p_BurgMVDRFeature,
  _swigc__p_BurgMVDRFeaturePtr,
  _swigc__p_CepstralFeature,
  _swigc__p_CepstralFeaturePtr,
  _swigc__p_CepstralSpectrumEstimator,
  _swigc__p_CepstralSpectrumEstimatorPtr,
  _swigc__p_ChannelExtractionFeature,
  _swigc__p_ChannelExtractionFeaturePtr,
  _swigc__p_CircularStorageFeature,
  _swigc__p_CircularStorageFeaturePtr,
  _swigc__p_Conversion24bit2Float,
  _swigc__p_Conversion24bit2FloatPtr,
  _swigc__p_Conversion24bit2Short,
  _swigc__p_Conversion24bit2ShortPtr,
  _swigc__p_DirectSampleFeature,
  _swigc__p_DirectSampleFeaturePtr,
  _swigc__p_DirectSampleOutputFeature,
  _swigc__p_DirectSampleOutputFeaturePtr,
  _swigc__p_FFTFeature,
  _swigc__p_FFTFeaturePtr,
  _swigc__p_FeatureSet,
  _swigc__p_FeatureSetPtr,
  _swigc__p_FileFeature,
  _swigc__p_FileFeaturePtr,
  _swigc__p_FileMeanSubtractionFeature,
  _swigc__p_FileMeanSubtractionFeaturePtr,
  _swigc__p_FilterFeature,
  _swigc__p_FilterFeaturePtr,
  _swigc__p_FloatToDoubleConversionFeature,
  _swigc__p_FloatToDoubleConversionFeaturePtr,
  _swigc__p_HammingFeature,
  _swigc__p_HammingFeaturePtr,
  _swigc__p_HammingFeatureShort,
  _swigc__p_HammingFeatureShortPtr,
  _swigc__p_IterativeSampleFeature,
  _swigc__p_IterativeSampleFeaturePtr,
  _swigc__p_IterativeSingleChannelSampleFeature,
  _swigc__p_IterativeSingleChannelSampleFeaturePtr,
  _swigc__p_LPCSpectrumEstimator,
  _swigc__p_LPCSpectrumEstimatorPtr,
  _swigc__p_LinearTransformFeature,
  _swigc__p_LinearTransformFeaturePtr,
  _swigc__p_LogFeature,
  _swigc__p_LogFeaturePtr,
  _swigc__p_MeanSubtractionFeature,
  _swigc__p_MeanSubtractionFeaturePtr,
  _swigc__p_MelFeature,
  _swigc__p_MelFeaturePtr,
  _swigc__p_MergeFeature,
  _swigc__p_MergeFeaturePtr,
  _swigc__p_MultiModalFeature,
  _swigc__p_MultiModalFeaturePtr,
  _swigc__p_NormalizeFeature,
  _swigc__p_NormalizeFeaturePtr,
  _swigc__p_PreemphasisFeature,
  _swigc__p_PreemphasisFeaturePtr,
  _swigc__p_PyVectorComplexFeatureStream,
  _swigc__p_PyVectorComplexFeatureStreamPtr,
  _swigc__p_PyVectorFeatureStream,
  _swigc__p_PyVectorFeatureStreamPtr,
  _swigc__p_PyVectorFloatFeatureStream,
  _swigc__p_PyVectorFloatFeatureStreamPtr,
  _swigc__p_PyVectorShortFeatureStream,
  _swigc__p_PyVectorShortFeatureStreamPtr,
  _swigc__p_SEMNB,
  _swigc__p_SEMNBPtr,
  _swigc__p_SampleFeature,
  _swigc__p_SampleFeaturePtr,
  _swigc__p_SampleFeatureRunon,
  _swigc__p_SampleFeatureRunonPtr,
  _swigc__p_SignalInterferenceFeature,
  _swigc__p_SignalInterferenceFeaturePtr,
  _swigc__p_SignalPowerFeature,
  _swigc__p_SignalPowerFeaturePtr,
  _swigc__p_SoundFile,
  _swigc__p_SoundFilePtr,
  _swigc__p_SpectralPowerFeature,
  _swigc__p_SpectralPowerFeaturePtr,
  _swigc__p_SpectralPowerFloatFeature,
  _swigc__p_SpectralPowerFloatFeaturePtr,
  _swigc__p_SpectralResamplingFeature,
  _swigc__p_SpectralResamplingFeaturePtr,
  _swigc__p_SpectralSmoothing,
  _swigc__p_SpectralSmoothingPtr,
  _swigc__p_SphinxMelFeature,
  _swigc__p_SphinxMelFeaturePtr,
  _swigc__p_SpikeFilter,
  _swigc__p_SpikeFilter2,
  _swigc__p_SpikeFilter2Ptr,
  _swigc__p_SpikeFilterPtr,
  _swigc__p_StaticStorageFeature,
  _swigc__p_StaticStorageFeaturePtr,
  _swigc__p_StorageFeature,
  _swigc__p_StorageFeaturePtr,
  _swigc__p_String,
  _swigc__p_ThresholdFeature,
  _swigc__p_ThresholdFeaturePtr,
  _swigc__p_VTLNFeature,
  _swigc__p_VTLNFeaturePtr,
  _swigc__p_VectorCharFeatureStreamPtr,
  _swigc__p_VectorComplexFeatureStream,
  _swigc__p_VectorComplexFeatureStreamPtr,
  _swigc__p_VectorFeatureStream,
  _swigc__p_VectorFeatureStreamPtr,
  _swigc__p_VectorFloatFeatureStream,
  _swigc__p_VectorFloatFeatureStreamPtr,
  _swigc__p_VectorShortFeatureStream,
  _swigc__p_VectorShortFeatureStreamPtr,
  _swigc__p_WarpLPCFeature,
  _swigc__p_WarpLPCFeaturePtr,
  _swigc__p_WarpMVDRFeature,
  _swigc__p_WarpMVDRFeaturePtr,
  _swigc__p_WarpedTwiceMVDRFeature,
  _swigc__p_WarpedTwiceMVDRFeaturePtr,
  _swigc__p_WriteSoundFile,
  _swigc__p_WriteSoundFilePtr,
  _swigc__p_YINPitchFeature,
  _swigc__p_YINPitchFeaturePtr,
  _swigc__p_ZeroCrossingRateHammingFeature,
  _swigc__p_ZeroCrossingRateHammingFeaturePtr,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_gsl_matrix,
  _swigc__p_gsl_matrix_float,
  _swigc__p_gsl_vector,
  _swigc__p_int,
  _swigc__p_sf_count_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  // NumPy needs to set up callback functions
  import_array();
  
  
#ifdef THREADING
  PyEval_InitThreads();
#endif
  
  
  // NumPy needs to set up callback functions
  import_array();
  
  
  // NumPy needs to set up callback functions
  import_array();
  
  SWIG_Python_SetConstant(d, "SF_FORMAT_WAV",SWIG_From_int(static_cast< int >(SF_FORMAT_WAV)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_AIFF",SWIG_From_int(static_cast< int >(SF_FORMAT_AIFF)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_AU",SWIG_From_int(static_cast< int >(SF_FORMAT_AU)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_RAW",SWIG_From_int(static_cast< int >(SF_FORMAT_RAW)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_PAF",SWIG_From_int(static_cast< int >(SF_FORMAT_PAF)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_SVX",SWIG_From_int(static_cast< int >(SF_FORMAT_SVX)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_NIST",SWIG_From_int(static_cast< int >(SF_FORMAT_NIST)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_VOC",SWIG_From_int(static_cast< int >(SF_FORMAT_VOC)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_IRCAM",SWIG_From_int(static_cast< int >(SF_FORMAT_IRCAM)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_W64",SWIG_From_int(static_cast< int >(SF_FORMAT_W64)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_MAT4",SWIG_From_int(static_cast< int >(SF_FORMAT_MAT4)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_MAT5",SWIG_From_int(static_cast< int >(SF_FORMAT_MAT5)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_PVF",SWIG_From_int(static_cast< int >(SF_FORMAT_PVF)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_XI",SWIG_From_int(static_cast< int >(SF_FORMAT_XI)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_HTK",SWIG_From_int(static_cast< int >(SF_FORMAT_HTK)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_SDS",SWIG_From_int(static_cast< int >(SF_FORMAT_SDS)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_AVR",SWIG_From_int(static_cast< int >(SF_FORMAT_AVR)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_WAVEX",SWIG_From_int(static_cast< int >(SF_FORMAT_WAVEX)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_PCM_S8",SWIG_From_int(static_cast< int >(SF_FORMAT_PCM_S8)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_PCM_16",SWIG_From_int(static_cast< int >(SF_FORMAT_PCM_16)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_PCM_24",SWIG_From_int(static_cast< int >(SF_FORMAT_PCM_24)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_PCM_32",SWIG_From_int(static_cast< int >(SF_FORMAT_PCM_32)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_PCM_U8",SWIG_From_int(static_cast< int >(SF_FORMAT_PCM_U8)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_FLOAT",SWIG_From_int(static_cast< int >(SF_FORMAT_FLOAT)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_DOUBLE",SWIG_From_int(static_cast< int >(SF_FORMAT_DOUBLE)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_ULAW",SWIG_From_int(static_cast< int >(SF_FORMAT_ULAW)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_ALAW",SWIG_From_int(static_cast< int >(SF_FORMAT_ALAW)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_IMA_ADPCM",SWIG_From_int(static_cast< int >(SF_FORMAT_IMA_ADPCM)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_MS_ADPCM",SWIG_From_int(static_cast< int >(SF_FORMAT_MS_ADPCM)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_GSM610",SWIG_From_int(static_cast< int >(SF_FORMAT_GSM610)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_VOX_ADPCM",SWIG_From_int(static_cast< int >(SF_FORMAT_VOX_ADPCM)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_G721_32",SWIG_From_int(static_cast< int >(SF_FORMAT_G721_32)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_G723_24",SWIG_From_int(static_cast< int >(SF_FORMAT_G723_24)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_G723_40",SWIG_From_int(static_cast< int >(SF_FORMAT_G723_40)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_DWVW_12",SWIG_From_int(static_cast< int >(SF_FORMAT_DWVW_12)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_DWVW_16",SWIG_From_int(static_cast< int >(SF_FORMAT_DWVW_16)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_DWVW_24",SWIG_From_int(static_cast< int >(SF_FORMAT_DWVW_24)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_DWVW_N",SWIG_From_int(static_cast< int >(SF_FORMAT_DWVW_N)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_DPCM_8",SWIG_From_int(static_cast< int >(SF_FORMAT_DPCM_8)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_DPCM_16",SWIG_From_int(static_cast< int >(SF_FORMAT_DPCM_16)));
  SWIG_Python_SetConstant(d, "SF_ENDIAN_FILE",SWIG_From_int(static_cast< int >(SF_ENDIAN_FILE)));
  SWIG_Python_SetConstant(d, "SF_ENDIAN_LITTLE",SWIG_From_int(static_cast< int >(SF_ENDIAN_LITTLE)));
  SWIG_Python_SetConstant(d, "SF_ENDIAN_BIG",SWIG_From_int(static_cast< int >(SF_ENDIAN_BIG)));
  SWIG_Python_SetConstant(d, "SF_ENDIAN_CPU",SWIG_From_int(static_cast< int >(SF_ENDIAN_CPU)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_SUBMASK",SWIG_From_int(static_cast< int >(SF_FORMAT_SUBMASK)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_TYPEMASK",SWIG_From_int(static_cast< int >(SF_FORMAT_TYPEMASK)));
  SWIG_Python_SetConstant(d, "SF_FORMAT_ENDMASK",SWIG_From_int(static_cast< int >(SF_FORMAT_ENDMASK)));
  SWIG_Python_SetConstant(d, "SF_FALSE",SWIG_From_int(static_cast< int >(SF_FALSE)));
  SWIG_Python_SetConstant(d, "SF_TRUE",SWIG_From_int(static_cast< int >(SF_TRUE)));
  SWIG_Python_SetConstant(d, "SFM_READ",SWIG_From_int(static_cast< int >(SFM_READ)));
  SWIG_Python_SetConstant(d, "SFM_WRITE",SWIG_From_int(static_cast< int >(SFM_WRITE)));
  SWIG_Python_SetConstant(d, "SFM_RDWR",SWIG_From_int(static_cast< int >(SFM_RDWR)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

