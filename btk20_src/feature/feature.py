# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_feature')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_feature')
    _feature = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_feature', [dirname(__file__)])
        except ImportError:
            import _feature
            return _feature
        try:
            _mod = imp.load_module('_feature', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _feature = swig_import_helper()
    del swig_import_helper
else:
    import _feature
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import btk20.stream
SF_FORMAT_WAV = _feature.SF_FORMAT_WAV
SF_FORMAT_AIFF = _feature.SF_FORMAT_AIFF
SF_FORMAT_AU = _feature.SF_FORMAT_AU
SF_FORMAT_RAW = _feature.SF_FORMAT_RAW
SF_FORMAT_PAF = _feature.SF_FORMAT_PAF
SF_FORMAT_SVX = _feature.SF_FORMAT_SVX
SF_FORMAT_NIST = _feature.SF_FORMAT_NIST
SF_FORMAT_VOC = _feature.SF_FORMAT_VOC
SF_FORMAT_IRCAM = _feature.SF_FORMAT_IRCAM
SF_FORMAT_W64 = _feature.SF_FORMAT_W64
SF_FORMAT_MAT4 = _feature.SF_FORMAT_MAT4
SF_FORMAT_MAT5 = _feature.SF_FORMAT_MAT5
SF_FORMAT_PVF = _feature.SF_FORMAT_PVF
SF_FORMAT_XI = _feature.SF_FORMAT_XI
SF_FORMAT_HTK = _feature.SF_FORMAT_HTK
SF_FORMAT_SDS = _feature.SF_FORMAT_SDS
SF_FORMAT_AVR = _feature.SF_FORMAT_AVR
SF_FORMAT_WAVEX = _feature.SF_FORMAT_WAVEX
SF_FORMAT_PCM_S8 = _feature.SF_FORMAT_PCM_S8
SF_FORMAT_PCM_16 = _feature.SF_FORMAT_PCM_16
SF_FORMAT_PCM_24 = _feature.SF_FORMAT_PCM_24
SF_FORMAT_PCM_32 = _feature.SF_FORMAT_PCM_32
SF_FORMAT_PCM_U8 = _feature.SF_FORMAT_PCM_U8
SF_FORMAT_FLOAT = _feature.SF_FORMAT_FLOAT
SF_FORMAT_DOUBLE = _feature.SF_FORMAT_DOUBLE
SF_FORMAT_ULAW = _feature.SF_FORMAT_ULAW
SF_FORMAT_ALAW = _feature.SF_FORMAT_ALAW
SF_FORMAT_IMA_ADPCM = _feature.SF_FORMAT_IMA_ADPCM
SF_FORMAT_MS_ADPCM = _feature.SF_FORMAT_MS_ADPCM
SF_FORMAT_GSM610 = _feature.SF_FORMAT_GSM610
SF_FORMAT_VOX_ADPCM = _feature.SF_FORMAT_VOX_ADPCM
SF_FORMAT_G721_32 = _feature.SF_FORMAT_G721_32
SF_FORMAT_G723_24 = _feature.SF_FORMAT_G723_24
SF_FORMAT_G723_40 = _feature.SF_FORMAT_G723_40
SF_FORMAT_DWVW_12 = _feature.SF_FORMAT_DWVW_12
SF_FORMAT_DWVW_16 = _feature.SF_FORMAT_DWVW_16
SF_FORMAT_DWVW_24 = _feature.SF_FORMAT_DWVW_24
SF_FORMAT_DWVW_N = _feature.SF_FORMAT_DWVW_N
SF_FORMAT_DPCM_8 = _feature.SF_FORMAT_DPCM_8
SF_FORMAT_DPCM_16 = _feature.SF_FORMAT_DPCM_16
SF_ENDIAN_FILE = _feature.SF_ENDIAN_FILE
SF_ENDIAN_LITTLE = _feature.SF_ENDIAN_LITTLE
SF_ENDIAN_BIG = _feature.SF_ENDIAN_BIG
SF_ENDIAN_CPU = _feature.SF_ENDIAN_CPU
SF_FORMAT_SUBMASK = _feature.SF_FORMAT_SUBMASK
SF_FORMAT_TYPEMASK = _feature.SF_FORMAT_TYPEMASK
SF_FORMAT_ENDMASK = _feature.SF_FORMAT_ENDMASK
SF_FALSE = _feature.SF_FALSE
SF_TRUE = _feature.SF_TRUE
SFM_READ = _feature.SFM_READ
SFM_WRITE = _feature.SFM_WRITE
SFM_RDWR = _feature.SFM_RDWR
class FileFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _feature.new_FileFeaturePtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.FileFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.FileFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_FileFeaturePtr
    __del__ = lambda self: None

    def bload(self, fileName, old=False):
        return _feature.FileFeaturePtr_bload(self, fileName, old)

    def size(self):
        return _feature.FileFeaturePtr_size(self)

    def next(self):
        return _feature.FileFeaturePtr_next(self)

    def copy(self, matrix):
        return _feature.FileFeaturePtr_copy(self, matrix)

    def name(self):
        return _feature.FileFeaturePtr_name(self)

    def is_end(self):
        return _feature.FileFeaturePtr_is_end(self)

    def current(self):
        return _feature.FileFeaturePtr_current(self)

    def reset(self):
        return _feature.FileFeaturePtr_reset(self)
FileFeaturePtr_swigregister = _feature.FileFeaturePtr_swigregister
FileFeaturePtr_swigregister(FileFeaturePtr)

class Conversion24bit2Short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conversion24bit2Short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Conversion24bit2Short, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _feature.new_Conversion24bit2Short(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def next(self, frame_no=-5):
        return _feature.Conversion24bit2Short_next(self, frame_no)

    def reset(self):
        return _feature.Conversion24bit2Short_reset(self)
    __swig_destroy__ = _feature.delete_Conversion24bit2Short
    __del__ = lambda self: None
Conversion24bit2Short_swigregister = _feature.Conversion24bit2Short_swigregister
Conversion24bit2Short_swigregister(Conversion24bit2Short)

class Conversion24bit2ShortPtr(btk20.stream.VectorShortFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorShortFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conversion24bit2ShortPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorShortFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Conversion24bit2ShortPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_Conversion24bit2ShortPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.Conversion24bit2ShortPtr___iter__(self)

    def __deref__(self):
        return _feature.Conversion24bit2ShortPtr___deref__(self)
    __swig_destroy__ = _feature.delete_Conversion24bit2ShortPtr
    __del__ = lambda self: None
Conversion24bit2ShortPtr_swigregister = _feature.Conversion24bit2ShortPtr_swigregister
Conversion24bit2ShortPtr_swigregister(Conversion24bit2ShortPtr)

class Conversion24bit2Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conversion24bit2Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Conversion24bit2Float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _feature.new_Conversion24bit2Float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _feature.Conversion24bit2Float_reset(self)

    def next(self, frame_no=-5):
        return _feature.Conversion24bit2Float_next(self, frame_no)
    __swig_destroy__ = _feature.delete_Conversion24bit2Float
    __del__ = lambda self: None
Conversion24bit2Float_swigregister = _feature.Conversion24bit2Float_swigregister
Conversion24bit2Float_swigregister(Conversion24bit2Float)

class Conversion24bit2FloatPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conversion24bit2FloatPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Conversion24bit2FloatPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_Conversion24bit2FloatPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.Conversion24bit2FloatPtr___iter__(self)

    def __deref__(self):
        return _feature.Conversion24bit2FloatPtr___deref__(self)
    __swig_destroy__ = _feature.delete_Conversion24bit2FloatPtr
    __del__ = lambda self: None
Conversion24bit2FloatPtr_swigregister = _feature.Conversion24bit2FloatPtr_swigregister
Conversion24bit2FloatPtr_swigregister(Conversion24bit2FloatPtr)

class SampleFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SampleFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SampleFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.SampleFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SampleFeaturePtr
    __del__ = lambda self: None

    def read(self, fn, format=0, samplerate=16000, chX=1, chN=1, cfrom=0, to=-1, outsamplerate=-1, norm=0.0):
        return _feature.SampleFeaturePtr_read(self, fn, format, samplerate, chX, chN, cfrom, to, outsamplerate, norm)

    def write(self, *args, **kwargs):
        return _feature.SampleFeaturePtr_write(self, *args, **kwargs)

    def cut(self, cfrom, cto):
        return _feature.SampleFeaturePtr_cut(self, cfrom, cto)

    def reset(self):
        return _feature.SampleFeaturePtr_reset(self)

    def next(self, frame_no=-5):
        return _feature.SampleFeaturePtr_next(self, frame_no)

    def frame_no(self):
        return _feature.SampleFeaturePtr_frame_no(self)

    def exit(self):
        return _feature.SampleFeaturePtr_exit(self)

    def randomize(self, startX, endX, sigma2):
        return _feature.SampleFeaturePtr_randomize(self, startX, endX, sigma2)

    def data(self):
        return _feature.SampleFeaturePtr_data(self)

    def samplesN(self):
        return _feature.SampleFeaturePtr_samplesN(self)

    def dataDouble(self):
        return _feature.SampleFeaturePtr_dataDouble(self)

    def zeroMean(self):
        return _feature.SampleFeaturePtr_zeroMean(self)

    def addWhiteNoise(self, snr):
        return _feature.SampleFeaturePtr_addWhiteNoise(self, snr)

    def setSamples(self, samples, sampleRate):
        return _feature.SampleFeaturePtr_setSamples(self, samples, sampleRate)

    def copySamples(self, src, cfrom, to):
        return _feature.SampleFeaturePtr_copySamples(self, src, cfrom, to)

    def getSampleRate(self):
        return _feature.SampleFeaturePtr_getSampleRate(self)

    def getChanN(self):
        return _feature.SampleFeaturePtr_getChanN(self)

    def name(self):
        return _feature.SampleFeaturePtr_name(self)

    def size(self):
        return _feature.SampleFeaturePtr_size(self)

    def is_end(self):
        return _feature.SampleFeaturePtr_is_end(self)

    def current(self):
        return _feature.SampleFeaturePtr_current(self)
SampleFeaturePtr_swigregister = _feature.SampleFeaturePtr_swigregister
SampleFeaturePtr_swigregister(SampleFeaturePtr)

class SampleFeatureRunonPtr(SampleFeaturePtr):
    __swig_setmethods__ = {}
    for _s in [SampleFeaturePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleFeatureRunonPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [SampleFeaturePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SampleFeatureRunonPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SampleFeatureRunonPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SampleFeatureRunonPtr___iter__(self)

    def __deref__(self):
        return _feature.SampleFeatureRunonPtr___deref__(self)
    __swig_destroy__ = _feature.delete_SampleFeatureRunonPtr
    __del__ = lambda self: None

    def frame_no(self):
        return _feature.SampleFeatureRunonPtr_frame_no(self)

    def frameN(self):
        return _feature.SampleFeatureRunonPtr_frameN(self)

    def read(self, fn, format=0, samplerate=16000, chX=1, chN=1, cfrom=0, to=-1, outsamplerate=-1, norm=0.0):
        return _feature.SampleFeatureRunonPtr_read(self, fn, format, samplerate, chX, chN, cfrom, to, outsamplerate, norm)

    def write(self, *args, **kwargs):
        return _feature.SampleFeatureRunonPtr_write(self, *args, **kwargs)

    def cut(self, cfrom, cto):
        return _feature.SampleFeatureRunonPtr_cut(self, cfrom, cto)

    def reset(self):
        return _feature.SampleFeatureRunonPtr_reset(self)

    def next(self, frame_no=-5):
        return _feature.SampleFeatureRunonPtr_next(self, frame_no)

    def exit(self):
        return _feature.SampleFeatureRunonPtr_exit(self)

    def randomize(self, startX, endX, sigma2):
        return _feature.SampleFeatureRunonPtr_randomize(self, startX, endX, sigma2)

    def data(self):
        return _feature.SampleFeatureRunonPtr_data(self)

    def samplesN(self):
        return _feature.SampleFeatureRunonPtr_samplesN(self)

    def dataDouble(self):
        return _feature.SampleFeatureRunonPtr_dataDouble(self)

    def zeroMean(self):
        return _feature.SampleFeatureRunonPtr_zeroMean(self)

    def addWhiteNoise(self, snr):
        return _feature.SampleFeatureRunonPtr_addWhiteNoise(self, snr)

    def setSamples(self, samples, sampleRate):
        return _feature.SampleFeatureRunonPtr_setSamples(self, samples, sampleRate)

    def copySamples(self, src, cfrom, to):
        return _feature.SampleFeatureRunonPtr_copySamples(self, src, cfrom, to)

    def getSampleRate(self):
        return _feature.SampleFeatureRunonPtr_getSampleRate(self)

    def getChanN(self):
        return _feature.SampleFeatureRunonPtr_getChanN(self)

    def name(self):
        return _feature.SampleFeatureRunonPtr_name(self)

    def size(self):
        return _feature.SampleFeatureRunonPtr_size(self)

    def is_end(self):
        return _feature.SampleFeatureRunonPtr_is_end(self)

    def current(self):
        return _feature.SampleFeatureRunonPtr_current(self)
SampleFeatureRunonPtr_swigregister = _feature.SampleFeatureRunonPtr_swigregister
SampleFeatureRunonPtr_swigregister(SampleFeatureRunonPtr)

class IterativeSingleChannelSampleFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IterativeSingleChannelSampleFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IterativeSingleChannelSampleFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_IterativeSingleChannelSampleFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_IterativeSingleChannelSampleFeaturePtr
    __del__ = lambda self: None

    def read(self, fileName, format=0, samplerate=44100, cfrom=0, cto=-1):
        return _feature.IterativeSingleChannelSampleFeaturePtr_read(self, fileName, format, samplerate, cfrom, cto)

    def next(self, frame_no=-5):
        return _feature.IterativeSingleChannelSampleFeaturePtr_next(self, frame_no)

    def reset(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr_reset(self)

    def samplesN(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr_samplesN(self)

    def name(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr_name(self)

    def size(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr_size(self)

    def is_end(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr_is_end(self)

    def current(self):
        return _feature.IterativeSingleChannelSampleFeaturePtr_current(self)
IterativeSingleChannelSampleFeaturePtr_swigregister = _feature.IterativeSingleChannelSampleFeaturePtr_swigregister
IterativeSingleChannelSampleFeaturePtr_swigregister(IterativeSingleChannelSampleFeaturePtr)

class IterativeSampleFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IterativeSampleFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IterativeSampleFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_IterativeSampleFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.IterativeSampleFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.IterativeSampleFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_IterativeSampleFeaturePtr
    __del__ = lambda self: None

    def read(self, *args, **kwargs):
        return _feature.IterativeSampleFeaturePtr_read(self, *args, **kwargs)

    def next(self, frame_no=-5):
        return _feature.IterativeSampleFeaturePtr_next(self, frame_no)

    def samplesN(self):
        return _feature.IterativeSampleFeaturePtr_samplesN(self)

    def changeFirstChannelID(self, firstChanX):
        return _feature.IterativeSampleFeaturePtr_changeFirstChannelID(self, firstChanX)

    def name(self):
        return _feature.IterativeSampleFeaturePtr_name(self)

    def size(self):
        return _feature.IterativeSampleFeaturePtr_size(self)

    def is_end(self):
        return _feature.IterativeSampleFeaturePtr_is_end(self)

    def current(self):
        return _feature.IterativeSampleFeaturePtr_current(self)

    def reset(self):
        return _feature.IterativeSampleFeaturePtr_reset(self)
IterativeSampleFeaturePtr_swigregister = _feature.IterativeSampleFeaturePtr_swigregister
IterativeSampleFeaturePtr_swigregister(IterativeSampleFeaturePtr)

class BlockSizeConversionFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockSizeConversionFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockSizeConversionFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_BlockSizeConversionFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.BlockSizeConversionFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.BlockSizeConversionFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_BlockSizeConversionFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.BlockSizeConversionFeaturePtr_next(self, frame_no)

    def name(self):
        return _feature.BlockSizeConversionFeaturePtr_name(self)

    def size(self):
        return _feature.BlockSizeConversionFeaturePtr_size(self)

    def is_end(self):
        return _feature.BlockSizeConversionFeaturePtr_is_end(self)

    def current(self):
        return _feature.BlockSizeConversionFeaturePtr_current(self)

    def reset(self):
        return _feature.BlockSizeConversionFeaturePtr_reset(self)
BlockSizeConversionFeaturePtr_swigregister = _feature.BlockSizeConversionFeaturePtr_swigregister
BlockSizeConversionFeaturePtr_swigregister(BlockSizeConversionFeaturePtr)

class BlockSizeConversionFeatureShortPtr(btk20.stream.VectorShortFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorShortFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockSizeConversionFeatureShortPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorShortFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockSizeConversionFeatureShortPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_BlockSizeConversionFeatureShortPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.BlockSizeConversionFeatureShortPtr___iter__(self)

    def __deref__(self):
        return _feature.BlockSizeConversionFeatureShortPtr___deref__(self)
    __swig_destroy__ = _feature.delete_BlockSizeConversionFeatureShortPtr
    __del__ = lambda self: None

    def next(self):
        return _feature.BlockSizeConversionFeatureShortPtr_next(self)

    def name(self):
        return _feature.BlockSizeConversionFeatureShortPtr_name(self)

    def size(self):
        return _feature.BlockSizeConversionFeatureShortPtr_size(self)

    def reset(self):
        return _feature.BlockSizeConversionFeatureShortPtr_reset(self)
BlockSizeConversionFeatureShortPtr_swigregister = _feature.BlockSizeConversionFeatureShortPtr_swigregister
BlockSizeConversionFeatureShortPtr_swigregister(BlockSizeConversionFeatureShortPtr)

class PreemphasisFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreemphasisFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PreemphasisFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_PreemphasisFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.PreemphasisFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.PreemphasisFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_PreemphasisFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.PreemphasisFeaturePtr_next(self)

    def reset(self):
        return _feature.PreemphasisFeaturePtr_reset(self)

    def next_speaker(self):
        return _feature.PreemphasisFeaturePtr_next_speaker(self)

    def name(self):
        return _feature.PreemphasisFeaturePtr_name(self)

    def size(self):
        return _feature.PreemphasisFeaturePtr_size(self)

    def is_end(self):
        return _feature.PreemphasisFeaturePtr_is_end(self)

    def current(self):
        return _feature.PreemphasisFeaturePtr_current(self)
PreemphasisFeaturePtr_swigregister = _feature.PreemphasisFeaturePtr_swigregister
PreemphasisFeaturePtr_swigregister(PreemphasisFeaturePtr)

class HammingFeatureShortPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HammingFeatureShortPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HammingFeatureShortPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_HammingFeatureShortPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.HammingFeatureShortPtr___iter__(self)

    def __deref__(self):
        return _feature.HammingFeatureShortPtr___deref__(self)
    __swig_destroy__ = _feature.delete_HammingFeatureShortPtr
    __del__ = lambda self: None

    def next(self):
        return _feature.HammingFeatureShortPtr_next(self)

    def name(self):
        return _feature.HammingFeatureShortPtr_name(self)

    def size(self):
        return _feature.HammingFeatureShortPtr_size(self)

    def is_end(self):
        return _feature.HammingFeatureShortPtr_is_end(self)

    def current(self):
        return _feature.HammingFeatureShortPtr_current(self)

    def reset(self):
        return _feature.HammingFeatureShortPtr_reset(self)
HammingFeatureShortPtr_swigregister = _feature.HammingFeatureShortPtr_swigregister
HammingFeatureShortPtr_swigregister(HammingFeatureShortPtr)

class HammingFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HammingFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HammingFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_HammingFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.HammingFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.HammingFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_HammingFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.HammingFeaturePtr_next(self)

    def name(self):
        return _feature.HammingFeaturePtr_name(self)

    def size(self):
        return _feature.HammingFeaturePtr_size(self)

    def is_end(self):
        return _feature.HammingFeaturePtr_is_end(self)

    def current(self):
        return _feature.HammingFeaturePtr_current(self)

    def reset(self):
        return _feature.HammingFeaturePtr_reset(self)
HammingFeaturePtr_swigregister = _feature.HammingFeaturePtr_swigregister
HammingFeaturePtr_swigregister(HammingFeaturePtr)

class FFTFeaturePtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFTFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_FFTFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.FFTFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.FFTFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_FFTFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.FFTFeaturePtr_next(self, frame_no)

    def fftLen(self):
        return _feature.FFTFeaturePtr_fftLen(self)

    def windowLen(self):
        return _feature.FFTFeaturePtr_windowLen(self)

    def nBlocks(self):
        return _feature.FFTFeaturePtr_nBlocks(self)

    def subsamplerate(self):
        return _feature.FFTFeaturePtr_subsamplerate(self)

    def name(self):
        return _feature.FFTFeaturePtr_name(self)

    def size(self):
        return _feature.FFTFeaturePtr_size(self)

    def current(self):
        return _feature.FFTFeaturePtr_current(self)

    def reset(self):
        return _feature.FFTFeaturePtr_reset(self)
FFTFeaturePtr_swigregister = _feature.FFTFeaturePtr_swigregister
FFTFeaturePtr_swigregister(FFTFeaturePtr)

class SpectralPowerFloatFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectralPowerFloatFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpectralPowerFloatFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SpectralPowerFloatFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SpectralPowerFloatFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.SpectralPowerFloatFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SpectralPowerFloatFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.SpectralPowerFloatFeaturePtr_next(self)

    def name(self):
        return _feature.SpectralPowerFloatFeaturePtr_name(self)

    def size(self):
        return _feature.SpectralPowerFloatFeaturePtr_size(self)

    def is_end(self):
        return _feature.SpectralPowerFloatFeaturePtr_is_end(self)

    def current(self):
        return _feature.SpectralPowerFloatFeaturePtr_current(self)

    def reset(self):
        return _feature.SpectralPowerFloatFeaturePtr_reset(self)
SpectralPowerFloatFeaturePtr_swigregister = _feature.SpectralPowerFloatFeaturePtr_swigregister
SpectralPowerFloatFeaturePtr_swigregister(SpectralPowerFloatFeaturePtr)

class SpectralPowerFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectralPowerFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpectralPowerFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SpectralPowerFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SpectralPowerFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.SpectralPowerFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SpectralPowerFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.SpectralPowerFeaturePtr_next(self)

    def name(self):
        return _feature.SpectralPowerFeaturePtr_name(self)

    def size(self):
        return _feature.SpectralPowerFeaturePtr_size(self)

    def current(self):
        return _feature.SpectralPowerFeaturePtr_current(self)

    def reset(self):
        return _feature.SpectralPowerFeaturePtr_reset(self)
SpectralPowerFeaturePtr_swigregister = _feature.SpectralPowerFeaturePtr_swigregister
SpectralPowerFeaturePtr_swigregister(SpectralPowerFeaturePtr)

class SignalPowerFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignalPowerFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignalPowerFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SignalPowerFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SignalPowerFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.SignalPowerFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SignalPowerFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.SignalPowerFeaturePtr_next(self)

    def name(self):
        return _feature.SignalPowerFeaturePtr_name(self)

    def size(self):
        return _feature.SignalPowerFeaturePtr_size(self)

    def is_end(self):
        return _feature.SignalPowerFeaturePtr_is_end(self)

    def current(self):
        return _feature.SignalPowerFeaturePtr_current(self)

    def reset(self):
        return _feature.SignalPowerFeaturePtr_reset(self)
SignalPowerFeaturePtr_swigregister = _feature.SignalPowerFeaturePtr_swigregister
SignalPowerFeaturePtr_swigregister(SignalPowerFeaturePtr)

class ALogFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ALogFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ALogFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_ALogFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.ALogFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.ALogFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_ALogFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.ALogFeaturePtr_next(self)

    def next_speaker(self):
        return _feature.ALogFeaturePtr_next_speaker(self)

    def name(self):
        return _feature.ALogFeaturePtr_name(self)

    def size(self):
        return _feature.ALogFeaturePtr_size(self)

    def is_end(self):
        return _feature.ALogFeaturePtr_is_end(self)

    def current(self):
        return _feature.ALogFeaturePtr_current(self)

    def reset(self):
        return _feature.ALogFeaturePtr_reset(self)
ALogFeaturePtr_swigregister = _feature.ALogFeaturePtr_swigregister
ALogFeaturePtr_swigregister(ALogFeaturePtr)

class NormalizeFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalizeFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalizeFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_NormalizeFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.NormalizeFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.NormalizeFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_NormalizeFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.NormalizeFeaturePtr_next(self)

    def next_speaker(self):
        return _feature.NormalizeFeaturePtr_next_speaker(self)

    def name(self):
        return _feature.NormalizeFeaturePtr_name(self)

    def size(self):
        return _feature.NormalizeFeaturePtr_size(self)

    def is_end(self):
        return _feature.NormalizeFeaturePtr_is_end(self)

    def current(self):
        return _feature.NormalizeFeaturePtr_current(self)

    def reset(self):
        return _feature.NormalizeFeaturePtr_reset(self)
NormalizeFeaturePtr_swigregister = _feature.NormalizeFeaturePtr_swigregister
NormalizeFeaturePtr_swigregister(NormalizeFeaturePtr)

class ThresholdFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThresholdFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThresholdFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_ThresholdFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.ThresholdFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.ThresholdFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_ThresholdFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.ThresholdFeaturePtr_next(self)

    def name(self):
        return _feature.ThresholdFeaturePtr_name(self)

    def size(self):
        return _feature.ThresholdFeaturePtr_size(self)

    def is_end(self):
        return _feature.ThresholdFeaturePtr_is_end(self)

    def current(self):
        return _feature.ThresholdFeaturePtr_current(self)

    def reset(self):
        return _feature.ThresholdFeaturePtr_reset(self)
ThresholdFeaturePtr_swigregister = _feature.ThresholdFeaturePtr_swigregister
ThresholdFeaturePtr_swigregister(ThresholdFeaturePtr)

class SpectralResamplingFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectralResamplingFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpectralResamplingFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SpectralResamplingFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SpectralResamplingFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.SpectralResamplingFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SpectralResamplingFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.SpectralResamplingFeaturePtr_next(self, frame_no)

    def name(self):
        return _feature.SpectralResamplingFeaturePtr_name(self)

    def size(self):
        return _feature.SpectralResamplingFeaturePtr_size(self)

    def current(self):
        return _feature.SpectralResamplingFeaturePtr_current(self)

    def reset(self):
        return _feature.SpectralResamplingFeaturePtr_reset(self)
SpectralResamplingFeaturePtr_swigregister = _feature.SpectralResamplingFeaturePtr_swigregister
SpectralResamplingFeaturePtr_swigregister(SpectralResamplingFeaturePtr)

class VTLNFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VTLNFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VTLNFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_VTLNFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.VTLNFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.VTLNFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_VTLNFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.VTLNFeaturePtr_next(self, frame_no)

    def matrix(self, matrix):
        return _feature.VTLNFeaturePtr_matrix(self, matrix)

    def warp(self, w):
        return _feature.VTLNFeaturePtr_warp(self, w)

    def name(self):
        return _feature.VTLNFeaturePtr_name(self)

    def size(self):
        return _feature.VTLNFeaturePtr_size(self)

    def current(self):
        return _feature.VTLNFeaturePtr_current(self)

    def reset(self):
        return _feature.VTLNFeaturePtr_reset(self)
VTLNFeaturePtr_swigregister = _feature.VTLNFeaturePtr_swigregister
VTLNFeaturePtr_swigregister(VTLNFeaturePtr)

class MelFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MelFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MelFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_MelFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.MelFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.MelFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_MelFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.MelFeaturePtr_next(self)

    def read(self, fileName):
        return _feature.MelFeaturePtr_read(self, fileName)

    def matrix(self, matrix):
        return _feature.MelFeaturePtr_matrix(self, matrix)

    def name(self):
        return _feature.MelFeaturePtr_name(self)

    def size(self):
        return _feature.MelFeaturePtr_size(self)

    def current(self):
        return _feature.MelFeaturePtr_current(self)

    def reset(self):
        return _feature.MelFeaturePtr_reset(self)
MelFeaturePtr_swigregister = _feature.MelFeaturePtr_swigregister
MelFeaturePtr_swigregister(MelFeaturePtr)

class SphinxMelFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphinxMelFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphinxMelFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SphinxMelFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SphinxMelFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.SphinxMelFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SphinxMelFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.SphinxMelFeaturePtr_next(self)

    def name(self):
        return _feature.SphinxMelFeaturePtr_name(self)

    def size(self):
        return _feature.SphinxMelFeaturePtr_size(self)

    def current(self):
        return _feature.SphinxMelFeaturePtr_current(self)

    def reset(self):
        return _feature.SphinxMelFeaturePtr_reset(self)
SphinxMelFeaturePtr_swigregister = _feature.SphinxMelFeaturePtr_swigregister
SphinxMelFeaturePtr_swigregister(SphinxMelFeaturePtr)

class LogFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_LogFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.LogFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.LogFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_LogFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.LogFeaturePtr_next(self)

    def name(self):
        return _feature.LogFeaturePtr_name(self)

    def size(self):
        return _feature.LogFeaturePtr_size(self)

    def is_end(self):
        return _feature.LogFeaturePtr_is_end(self)

    def current(self):
        return _feature.LogFeaturePtr_current(self)

    def reset(self):
        return _feature.LogFeaturePtr_reset(self)
LogFeaturePtr_swigregister = _feature.LogFeaturePtr_swigregister
LogFeaturePtr_swigregister(LogFeaturePtr)

class FloatToDoubleConversionFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatToDoubleConversionFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatToDoubleConversionFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_FloatToDoubleConversionFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.FloatToDoubleConversionFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.FloatToDoubleConversionFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_FloatToDoubleConversionFeaturePtr
    __del__ = lambda self: None
FloatToDoubleConversionFeaturePtr_swigregister = _feature.FloatToDoubleConversionFeaturePtr_swigregister
FloatToDoubleConversionFeaturePtr_swigregister(FloatToDoubleConversionFeaturePtr)

class CepstralFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CepstralFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CepstralFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_CepstralFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.CepstralFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.CepstralFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_CepstralFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.CepstralFeaturePtr_next(self)

    def matrix(self):
        return _feature.CepstralFeaturePtr_matrix(self)

    def name(self):
        return _feature.CepstralFeaturePtr_name(self)

    def size(self):
        return _feature.CepstralFeaturePtr_size(self)

    def is_end(self):
        return _feature.CepstralFeaturePtr_is_end(self)

    def current(self):
        return _feature.CepstralFeaturePtr_current(self)

    def reset(self):
        return _feature.CepstralFeaturePtr_reset(self)
CepstralFeaturePtr_swigregister = _feature.CepstralFeaturePtr_swigregister
CepstralFeaturePtr_swigregister(CepstralFeaturePtr)

class WarpMVDRFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpMVDRFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WarpMVDRFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_WarpMVDRFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.WarpMVDRFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.WarpMVDRFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_WarpMVDRFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.WarpMVDRFeaturePtr_next(self)

    def name(self):
        return _feature.WarpMVDRFeaturePtr_name(self)

    def size(self):
        return _feature.WarpMVDRFeaturePtr_size(self)

    def current(self):
        return _feature.WarpMVDRFeaturePtr_current(self)

    def reset(self):
        return _feature.WarpMVDRFeaturePtr_reset(self)
WarpMVDRFeaturePtr_swigregister = _feature.WarpMVDRFeaturePtr_swigregister
WarpMVDRFeaturePtr_swigregister(WarpMVDRFeaturePtr)

class BurgMVDRFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BurgMVDRFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BurgMVDRFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_BurgMVDRFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.BurgMVDRFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.BurgMVDRFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_BurgMVDRFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.BurgMVDRFeaturePtr_next(self)

    def name(self):
        return _feature.BurgMVDRFeaturePtr_name(self)

    def size(self):
        return _feature.BurgMVDRFeaturePtr_size(self)

    def current(self):
        return _feature.BurgMVDRFeaturePtr_current(self)

    def reset(self):
        return _feature.BurgMVDRFeaturePtr_reset(self)
BurgMVDRFeaturePtr_swigregister = _feature.BurgMVDRFeaturePtr_swigregister
BurgMVDRFeaturePtr_swigregister(BurgMVDRFeaturePtr)

class WarpedTwiceMVDRFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpedTwiceMVDRFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WarpedTwiceMVDRFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_WarpedTwiceMVDRFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.WarpedTwiceMVDRFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.WarpedTwiceMVDRFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_WarpedTwiceMVDRFeaturePtr
    __del__ = lambda self: None

    def next(self, frameX=-5):
        return _feature.WarpedTwiceMVDRFeaturePtr_next(self, frameX)

    def reset(self):
        return _feature.WarpedTwiceMVDRFeaturePtr_reset(self)

    def name(self):
        return _feature.WarpedTwiceMVDRFeaturePtr_name(self)

    def size(self):
        return _feature.WarpedTwiceMVDRFeaturePtr_size(self)

    def current(self):
        return _feature.WarpedTwiceMVDRFeaturePtr_current(self)
WarpedTwiceMVDRFeaturePtr_swigregister = _feature.WarpedTwiceMVDRFeaturePtr_swigregister
WarpedTwiceMVDRFeaturePtr_swigregister(WarpedTwiceMVDRFeaturePtr)

class WarpLPCFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpLPCFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WarpLPCFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_WarpLPCFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.WarpLPCFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.WarpLPCFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_WarpLPCFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.WarpLPCFeaturePtr_next(self)

    def name(self):
        return _feature.WarpLPCFeaturePtr_name(self)

    def size(self):
        return _feature.WarpLPCFeaturePtr_size(self)

    def current(self):
        return _feature.WarpLPCFeaturePtr_current(self)

    def reset(self):
        return _feature.WarpLPCFeaturePtr_reset(self)
WarpLPCFeaturePtr_swigregister = _feature.WarpLPCFeaturePtr_swigregister
WarpLPCFeaturePtr_swigregister(WarpLPCFeaturePtr)

class BurgLPCFeaturePtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BurgLPCFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BurgLPCFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_BurgLPCFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.BurgLPCFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.BurgLPCFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_BurgLPCFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.BurgLPCFeaturePtr_next(self)

    def name(self):
        return _feature.BurgLPCFeaturePtr_name(self)

    def size(self):
        return _feature.BurgLPCFeaturePtr_size(self)

    def current(self):
        return _feature.BurgLPCFeaturePtr_current(self)

    def reset(self):
        return _feature.BurgLPCFeaturePtr_reset(self)
BurgLPCFeaturePtr_swigregister = _feature.BurgLPCFeaturePtr_swigregister
BurgLPCFeaturePtr_swigregister(BurgLPCFeaturePtr)

class SpectralSmoothingPtr(btk20.stream.VectorFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectralSmoothingPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpectralSmoothingPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SpectralSmoothingPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SpectralSmoothingPtr___iter__(self)

    def __deref__(self):
        return _feature.SpectralSmoothingPtr___deref__(self)
    __swig_destroy__ = _feature.delete_SpectralSmoothingPtr
    __del__ = lambda self: None

    def next(self):
        return _feature.SpectralSmoothingPtr_next(self)

    def name(self):
        return _feature.SpectralSmoothingPtr_name(self)

    def size(self):
        return _feature.SpectralSmoothingPtr_size(self)

    def current(self):
        return _feature.SpectralSmoothingPtr_current(self)

    def reset(self):
        return _feature.SpectralSmoothingPtr_reset(self)
SpectralSmoothingPtr_swigregister = _feature.SpectralSmoothingPtr_swigregister
SpectralSmoothingPtr_swigregister(SpectralSmoothingPtr)

class MeanSubtractionFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeanSubtractionFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeanSubtractionFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_MeanSubtractionFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.MeanSubtractionFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.MeanSubtractionFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_MeanSubtractionFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.MeanSubtractionFeaturePtr_next(self, frame_no)

    def mean(self):
        return _feature.MeanSubtractionFeaturePtr_mean(self)

    def write(self, fileName, variance=False):
        return _feature.MeanSubtractionFeaturePtr_write(self, fileName, variance)

    def next_speaker(self):
        return _feature.MeanSubtractionFeaturePtr_next_speaker(self)

    def name(self):
        return _feature.MeanSubtractionFeaturePtr_name(self)

    def size(self):
        return _feature.MeanSubtractionFeaturePtr_size(self)

    def is_end(self):
        return _feature.MeanSubtractionFeaturePtr_is_end(self)

    def current(self):
        return _feature.MeanSubtractionFeaturePtr_current(self)

    def reset(self):
        return _feature.MeanSubtractionFeaturePtr_reset(self)
MeanSubtractionFeaturePtr_swigregister = _feature.MeanSubtractionFeaturePtr_swigregister
MeanSubtractionFeaturePtr_swigregister(MeanSubtractionFeaturePtr)

class FileMeanSubtractionFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileMeanSubtractionFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileMeanSubtractionFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_FileMeanSubtractionFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.FileMeanSubtractionFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.FileMeanSubtractionFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_FileMeanSubtractionFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.FileMeanSubtractionFeaturePtr_next(self, frame_no)

    def read(self, fileName, variance=False):
        return _feature.FileMeanSubtractionFeaturePtr_read(self, fileName, variance)

    def name(self):
        return _feature.FileMeanSubtractionFeaturePtr_name(self)

    def size(self):
        return _feature.FileMeanSubtractionFeaturePtr_size(self)

    def is_end(self):
        return _feature.FileMeanSubtractionFeaturePtr_is_end(self)

    def current(self):
        return _feature.FileMeanSubtractionFeaturePtr_current(self)

    def reset(self):
        return _feature.FileMeanSubtractionFeaturePtr_reset(self)
FileMeanSubtractionFeaturePtr_swigregister = _feature.FileMeanSubtractionFeaturePtr_swigregister
FileMeanSubtractionFeaturePtr_swigregister(FileMeanSubtractionFeaturePtr)

class AdjacentFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjacentFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdjacentFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_AdjacentFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.AdjacentFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.AdjacentFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_AdjacentFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.AdjacentFeaturePtr_next(self)

    def name(self):
        return _feature.AdjacentFeaturePtr_name(self)

    def size(self):
        return _feature.AdjacentFeaturePtr_size(self)

    def is_end(self):
        return _feature.AdjacentFeaturePtr_is_end(self)

    def current(self):
        return _feature.AdjacentFeaturePtr_current(self)

    def reset(self):
        return _feature.AdjacentFeaturePtr_reset(self)
AdjacentFeaturePtr_swigregister = _feature.AdjacentFeaturePtr_swigregister
AdjacentFeaturePtr_swigregister(AdjacentFeaturePtr)

class LinearTransformFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearTransformFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearTransformFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _feature.new_LinearTransformFeaturePtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.LinearTransformFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.LinearTransformFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_LinearTransformFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.LinearTransformFeaturePtr_next(self, frame_no)

    def matrix(self):
        return _feature.LinearTransformFeaturePtr_matrix(self)

    def load(self, fileName, old=False):
        return _feature.LinearTransformFeaturePtr_load(self, fileName, old)

    def identity(self):
        return _feature.LinearTransformFeaturePtr_identity(self)

    def name(self):
        return _feature.LinearTransformFeaturePtr_name(self)

    def size(self):
        return _feature.LinearTransformFeaturePtr_size(self)

    def is_end(self):
        return _feature.LinearTransformFeaturePtr_is_end(self)

    def current(self):
        return _feature.LinearTransformFeaturePtr_current(self)

    def reset(self):
        return _feature.LinearTransformFeaturePtr_reset(self)
LinearTransformFeaturePtr_swigregister = _feature.LinearTransformFeaturePtr_swigregister
LinearTransformFeaturePtr_swigregister(LinearTransformFeaturePtr)

class StorageFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StorageFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_StorageFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.StorageFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.StorageFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_StorageFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.StorageFeaturePtr_next(self, frame_no)

    def write(self, fileName, plainText=False):
        return _feature.StorageFeaturePtr_write(self, fileName, plainText)

    def read(self, fileName):
        return _feature.StorageFeaturePtr_read(self, fileName)

    def evaluate(self):
        return _feature.StorageFeaturePtr_evaluate(self)

    def reset(self):
        return _feature.StorageFeaturePtr_reset(self)

    def name(self):
        return _feature.StorageFeaturePtr_name(self)

    def size(self):
        return _feature.StorageFeaturePtr_size(self)

    def is_end(self):
        return _feature.StorageFeaturePtr_is_end(self)

    def current(self):
        return _feature.StorageFeaturePtr_current(self)
StorageFeaturePtr_swigregister = _feature.StorageFeaturePtr_swigregister
StorageFeaturePtr_swigregister(StorageFeaturePtr)

class StaticStorageFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticStorageFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticStorageFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_StaticStorageFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.StaticStorageFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.StaticStorageFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_StaticStorageFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.StaticStorageFeaturePtr_next(self, frame_no)

    def read(self, fileName):
        return _feature.StaticStorageFeaturePtr_read(self, fileName)

    def evaluate(self):
        return _feature.StaticStorageFeaturePtr_evaluate(self)

    def reset(self):
        return _feature.StaticStorageFeaturePtr_reset(self)

    def currentNFrames(self):
        return _feature.StaticStorageFeaturePtr_currentNFrames(self)

    def name(self):
        return _feature.StaticStorageFeaturePtr_name(self)

    def size(self):
        return _feature.StaticStorageFeaturePtr_size(self)

    def is_end(self):
        return _feature.StaticStorageFeaturePtr_is_end(self)

    def current(self):
        return _feature.StaticStorageFeaturePtr_current(self)
StaticStorageFeaturePtr_swigregister = _feature.StaticStorageFeaturePtr_swigregister
StaticStorageFeaturePtr_swigregister(StaticStorageFeaturePtr)

class CircularStorageFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircularStorageFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CircularStorageFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_CircularStorageFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.CircularStorageFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.CircularStorageFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_CircularStorageFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.CircularStorageFeaturePtr_next(self, frame_no)

    def name(self):
        return _feature.CircularStorageFeaturePtr_name(self)

    def size(self):
        return _feature.CircularStorageFeaturePtr_size(self)

    def is_end(self):
        return _feature.CircularStorageFeaturePtr_is_end(self)

    def current(self):
        return _feature.CircularStorageFeaturePtr_current(self)

    def reset(self):
        return _feature.CircularStorageFeaturePtr_reset(self)
CircularStorageFeaturePtr_swigregister = _feature.CircularStorageFeaturePtr_swigregister
CircularStorageFeaturePtr_swigregister(CircularStorageFeaturePtr)

class FilterFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_FilterFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.FilterFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.FilterFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_FilterFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.FilterFeaturePtr_next(self, frame_no)

    def name(self):
        return _feature.FilterFeaturePtr_name(self)

    def size(self):
        return _feature.FilterFeaturePtr_size(self)

    def is_end(self):
        return _feature.FilterFeaturePtr_is_end(self)

    def current(self):
        return _feature.FilterFeaturePtr_current(self)

    def reset(self):
        return _feature.FilterFeaturePtr_reset(self)
FilterFeaturePtr_swigregister = _feature.FilterFeaturePtr_swigregister
FilterFeaturePtr_swigregister(FilterFeaturePtr)

class MergeFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergeFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MergeFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_MergeFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.MergeFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.MergeFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_MergeFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.MergeFeaturePtr_next(self, frame_no)

    def name(self):
        return _feature.MergeFeaturePtr_name(self)

    def size(self):
        return _feature.MergeFeaturePtr_size(self)

    def is_end(self):
        return _feature.MergeFeaturePtr_is_end(self)

    def current(self):
        return _feature.MergeFeaturePtr_current(self)

    def reset(self):
        return _feature.MergeFeaturePtr_reset(self)
MergeFeaturePtr_swigregister = _feature.MergeFeaturePtr_swigregister
MergeFeaturePtr_swigregister(MergeFeaturePtr)

class MultiModalFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiModalFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiModalFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_MultiModalFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.MultiModalFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.MultiModalFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_MultiModalFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.MultiModalFeaturePtr_next(self, frame_no)

    def addModalFeature(self, feature, samplePeriodinNanoSec=1):
        return _feature.MultiModalFeaturePtr_addModalFeature(self, feature, samplePeriodinNanoSec)

    def name(self):
        return _feature.MultiModalFeaturePtr_name(self)

    def size(self):
        return _feature.MultiModalFeaturePtr_size(self)

    def is_end(self):
        return _feature.MultiModalFeaturePtr_is_end(self)

    def current(self):
        return _feature.MultiModalFeaturePtr_current(self)

    def reset(self):
        return _feature.MultiModalFeaturePtr_reset(self)
MultiModalFeaturePtr_swigregister = _feature.MultiModalFeaturePtr_swigregister
MultiModalFeaturePtr_swigregister(MultiModalFeaturePtr)

class FeatureSetPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureSetPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureSetPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_FeatureSetPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, name):
        return _feature.FeatureSetPtr___getitem__(self, name)

    def __deref__(self):
        return _feature.FeatureSetPtr___deref__(self)
    __swig_destroy__ = _feature.delete_FeatureSetPtr
    __del__ = lambda self: None

    def name(self):
        return _feature.FeatureSetPtr_name(self)

    def add(self, feat):
        return _feature.FeatureSetPtr_add(self, feat)

    def feature(self, nm):
        return _feature.FeatureSetPtr_feature(self, nm)
FeatureSetPtr_swigregister = _feature.FeatureSetPtr_swigregister
FeatureSetPtr_swigregister(FeatureSetPtr)


def writeGSLMatrix(fileName, mat):
    return _feature.writeGSLMatrix(fileName, mat)
writeGSLMatrix = _feature.writeGSLMatrix
class ZeroCrossingRateHammingFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroCrossingRateHammingFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroCrossingRateHammingFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_ZeroCrossingRateHammingFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_ZeroCrossingRateHammingFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr_next(self)

    def name(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr_name(self)

    def size(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr_size(self)

    def is_end(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr_is_end(self)

    def current(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr_current(self)

    def reset(self):
        return _feature.ZeroCrossingRateHammingFeaturePtr_reset(self)
ZeroCrossingRateHammingFeaturePtr_swigregister = _feature.ZeroCrossingRateHammingFeaturePtr_swigregister
ZeroCrossingRateHammingFeaturePtr_swigregister(ZeroCrossingRateHammingFeaturePtr)

class YINPitchFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YINPitchFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YINPitchFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_YINPitchFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.YINPitchFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.YINPitchFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_YINPitchFeaturePtr
    __del__ = lambda self: None

    def next(self):
        return _feature.YINPitchFeaturePtr_next(self)

    def name(self):
        return _feature.YINPitchFeaturePtr_name(self)

    def size(self):
        return _feature.YINPitchFeaturePtr_size(self)

    def is_end(self):
        return _feature.YINPitchFeaturePtr_is_end(self)

    def current(self):
        return _feature.YINPitchFeaturePtr_current(self)

    def reset(self):
        return _feature.YINPitchFeaturePtr_reset(self)
YINPitchFeaturePtr_swigregister = _feature.YINPitchFeaturePtr_swigregister
YINPitchFeaturePtr_swigregister(YINPitchFeaturePtr)

class SpikeFilterPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpikeFilterPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpikeFilterPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SpikeFilterPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SpikeFilterPtr___iter__(self)

    def __deref__(self):
        return _feature.SpikeFilterPtr___deref__(self)
    __swig_destroy__ = _feature.delete_SpikeFilterPtr
    __del__ = lambda self: None

    def size(self):
        return _feature.SpikeFilterPtr_size(self)

    def next(self):
        return _feature.SpikeFilterPtr_next(self)

    def name(self):
        return _feature.SpikeFilterPtr_name(self)

    def is_end(self):
        return _feature.SpikeFilterPtr_is_end(self)

    def current(self):
        return _feature.SpikeFilterPtr_current(self)

    def reset(self):
        return _feature.SpikeFilterPtr_reset(self)
SpikeFilterPtr_swigregister = _feature.SpikeFilterPtr_swigregister
SpikeFilterPtr_swigregister(SpikeFilterPtr)

class SpikeFilter2Ptr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpikeFilter2Ptr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpikeFilter2Ptr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SpikeFilter2Ptr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SpikeFilter2Ptr___iter__(self)

    def __deref__(self):
        return _feature.SpikeFilter2Ptr___deref__(self)
    __swig_destroy__ = _feature.delete_SpikeFilter2Ptr
    __del__ = lambda self: None

    def size(self):
        return _feature.SpikeFilter2Ptr_size(self)

    def next(self):
        return _feature.SpikeFilter2Ptr_next(self)

    def spikesN(self):
        return _feature.SpikeFilter2Ptr_spikesN(self)

    def name(self):
        return _feature.SpikeFilter2Ptr_name(self)

    def is_end(self):
        return _feature.SpikeFilter2Ptr_is_end(self)

    def current(self):
        return _feature.SpikeFilter2Ptr_current(self)

    def reset(self):
        return _feature.SpikeFilter2Ptr_reset(self)
SpikeFilter2Ptr_swigregister = _feature.SpikeFilter2Ptr_swigregister
SpikeFilter2Ptr_swigregister(SpikeFilter2Ptr)

class SoundFilePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundFilePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundFilePtr, name)
    __repr__ = _swig_repr

    def __init__(self, fn, mode, format=0, samplerate=16000, channels=1, normalize=False):
        this = _feature.new_SoundFilePtr(fn, mode, format, samplerate, channels, normalize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _feature.SoundFilePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SoundFilePtr
    __del__ = lambda self: None

    def frames(self):
        return _feature.SoundFilePtr_frames(self)

    def samplerate(self):
        return _feature.SoundFilePtr_samplerate(self)

    def channels(self):
        return _feature.SoundFilePtr_channels(self)

    def format(self):
        return _feature.SoundFilePtr_format(self)

    def sections(self):
        return _feature.SoundFilePtr_sections(self)

    def seekable(self):
        return _feature.SoundFilePtr_seekable(self)

    def readf(self, ptr, frames):
        return _feature.SoundFilePtr_readf(self, ptr, frames)

    def writef(self, ptr, frames):
        return _feature.SoundFilePtr_writef(self, ptr, frames)

    def read(self, ptr, items):
        return _feature.SoundFilePtr_read(self, ptr, items)

    def write(self, ptr, items):
        return _feature.SoundFilePtr_write(self, ptr, items)

    def seek(self, *args, **kwargs):
        return _feature.SoundFilePtr_seek(self, *args, **kwargs)
SoundFilePtr_swigregister = _feature.SoundFilePtr_swigregister
SoundFilePtr_swigregister(SoundFilePtr)

class DirectSampleFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectSampleFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirectSampleFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_DirectSampleFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.DirectSampleFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.DirectSampleFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_DirectSampleFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.DirectSampleFeaturePtr_next(self, frame_no)

    def reset(self):
        return _feature.DirectSampleFeaturePtr_reset(self)

    def channels(self):
        return _feature.DirectSampleFeaturePtr_channels(self)

    def sampleRate(self):
        return _feature.DirectSampleFeaturePtr_sampleRate(self)

    def setRegion(self, *args):
        return _feature.DirectSampleFeaturePtr_setRegion(self, *args)

    def name(self):
        return _feature.DirectSampleFeaturePtr_name(self)

    def size(self):
        return _feature.DirectSampleFeaturePtr_size(self)

    def is_end(self):
        return _feature.DirectSampleFeaturePtr_is_end(self)

    def current(self):
        return _feature.DirectSampleFeaturePtr_current(self)
DirectSampleFeaturePtr_swigregister = _feature.DirectSampleFeaturePtr_swigregister
DirectSampleFeaturePtr_swigregister(DirectSampleFeaturePtr)

class DirectSampleOutputFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectSampleOutputFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirectSampleOutputFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_DirectSampleOutputFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.DirectSampleOutputFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.DirectSampleOutputFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_DirectSampleOutputFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.DirectSampleOutputFeaturePtr_next(self, frame_no)

    def reset(self):
        return _feature.DirectSampleOutputFeaturePtr_reset(self)

    def name(self):
        return _feature.DirectSampleOutputFeaturePtr_name(self)

    def size(self):
        return _feature.DirectSampleOutputFeaturePtr_size(self)

    def is_end(self):
        return _feature.DirectSampleOutputFeaturePtr_is_end(self)

    def current(self):
        return _feature.DirectSampleOutputFeaturePtr_current(self)
DirectSampleOutputFeaturePtr_swigregister = _feature.DirectSampleOutputFeaturePtr_swigregister
DirectSampleOutputFeaturePtr_swigregister(DirectSampleOutputFeaturePtr)

class ChannelExtractionFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChannelExtractionFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChannelExtractionFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_ChannelExtractionFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.ChannelExtractionFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.ChannelExtractionFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_ChannelExtractionFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.ChannelExtractionFeaturePtr_next(self, frame_no)

    def name(self):
        return _feature.ChannelExtractionFeaturePtr_name(self)

    def size(self):
        return _feature.ChannelExtractionFeaturePtr_size(self)

    def is_end(self):
        return _feature.ChannelExtractionFeaturePtr_is_end(self)

    def current(self):
        return _feature.ChannelExtractionFeaturePtr_current(self)

    def reset(self):
        return _feature.ChannelExtractionFeaturePtr_reset(self)
ChannelExtractionFeaturePtr_swigregister = _feature.ChannelExtractionFeaturePtr_swigregister
ChannelExtractionFeaturePtr_swigregister(ChannelExtractionFeaturePtr)

class SignalInterferenceFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignalInterferenceFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignalInterferenceFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SignalInterferenceFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.SignalInterferenceFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.SignalInterferenceFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_SignalInterferenceFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.SignalInterferenceFeaturePtr_next(self, frame_no)

    def name(self):
        return _feature.SignalInterferenceFeaturePtr_name(self)

    def size(self):
        return _feature.SignalInterferenceFeaturePtr_size(self)

    def is_end(self):
        return _feature.SignalInterferenceFeaturePtr_is_end(self)

    def current(self):
        return _feature.SignalInterferenceFeaturePtr_current(self)

    def reset(self):
        return _feature.SignalInterferenceFeaturePtr_reset(self)
SignalInterferenceFeaturePtr_swigregister = _feature.SignalInterferenceFeaturePtr_swigregister
SignalInterferenceFeaturePtr_swigregister(SignalInterferenceFeaturePtr)

class AmplificationFeaturePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AmplificationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AmplificationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_AmplificationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.AmplificationFeaturePtr___iter__(self)

    def __deref__(self):
        return _feature.AmplificationFeaturePtr___deref__(self)
    __swig_destroy__ = _feature.delete_AmplificationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.AmplificationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _feature.AmplificationFeaturePtr_reset(self)

    def name(self):
        return _feature.AmplificationFeaturePtr_name(self)

    def size(self):
        return _feature.AmplificationFeaturePtr_size(self)

    def is_end(self):
        return _feature.AmplificationFeaturePtr_is_end(self)

    def current(self):
        return _feature.AmplificationFeaturePtr_current(self)
AmplificationFeaturePtr_swigregister = _feature.AmplificationFeaturePtr_swigregister
AmplificationFeaturePtr_swigregister(AmplificationFeaturePtr)

class LPCSpectrumEstimatorPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LPCSpectrumEstimatorPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LPCSpectrumEstimatorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_LPCSpectrumEstimatorPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.LPCSpectrumEstimatorPtr___iter__(self)

    def __deref__(self):
        return _feature.LPCSpectrumEstimatorPtr___deref__(self)
    __swig_destroy__ = _feature.delete_LPCSpectrumEstimatorPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.LPCSpectrumEstimatorPtr_next(self, frame_no)

    def reset(self):
        return _feature.LPCSpectrumEstimatorPtr_reset(self)

    def getLPCs(self):
        return _feature.LPCSpectrumEstimatorPtr_getLPCs(self)

    def getAutoCorrelationVector(self):
        return _feature.LPCSpectrumEstimatorPtr_getAutoCorrelationVector(self)

    def getPredictionError(self):
        return _feature.LPCSpectrumEstimatorPtr_getPredictionError(self)

    def name(self):
        return _feature.LPCSpectrumEstimatorPtr_name(self)

    def size(self):
        return _feature.LPCSpectrumEstimatorPtr_size(self)

    def is_end(self):
        return _feature.LPCSpectrumEstimatorPtr_is_end(self)

    def current(self):
        return _feature.LPCSpectrumEstimatorPtr_current(self)
LPCSpectrumEstimatorPtr_swigregister = _feature.LPCSpectrumEstimatorPtr_swigregister
LPCSpectrumEstimatorPtr_swigregister(LPCSpectrumEstimatorPtr)

class CepstralSpectrumEstimatorPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CepstralSpectrumEstimatorPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CepstralSpectrumEstimatorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_CepstralSpectrumEstimatorPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _feature.CepstralSpectrumEstimatorPtr___iter__(self)

    def __deref__(self):
        return _feature.CepstralSpectrumEstimatorPtr___deref__(self)
    __swig_destroy__ = _feature.delete_CepstralSpectrumEstimatorPtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _feature.CepstralSpectrumEstimatorPtr_next(self, frame_no)

    def reset(self):
        return _feature.CepstralSpectrumEstimatorPtr_reset(self)

    def name(self):
        return _feature.CepstralSpectrumEstimatorPtr_name(self)

    def size(self):
        return _feature.CepstralSpectrumEstimatorPtr_size(self)

    def is_end(self):
        return _feature.CepstralSpectrumEstimatorPtr_is_end(self)

    def current(self):
        return _feature.CepstralSpectrumEstimatorPtr_current(self)
CepstralSpectrumEstimatorPtr_swigregister = _feature.CepstralSpectrumEstimatorPtr_swigregister
CepstralSpectrumEstimatorPtr_swigregister(CepstralSpectrumEstimatorPtr)

class SEMNBPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEMNBPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SEMNBPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_SEMNBPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _feature.SEMNBPtr___deref__(self)
    __swig_destroy__ = _feature.delete_SEMNBPtr
    __del__ = lambda self: None

    def reset(self):
        return _feature.SEMNBPtr_reset(self)

    def calcDerivativeOfDeviation(self, lpcSEPtr):
        return _feature.SEMNBPtr_calcDerivativeOfDeviation(self, lpcSEPtr)

    def getLPEnvelope(self):
        return _feature.SEMNBPtr_getLPEnvelope(self)
SEMNBPtr_swigregister = _feature.SEMNBPtr_swigregister
SEMNBPtr_swigregister(SEMNBPtr)

class WriteSoundFilePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteSoundFilePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteSoundFilePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _feature.new_WriteSoundFilePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _feature.WriteSoundFilePtr___deref__(self)
    __swig_destroy__ = _feature.delete_WriteSoundFilePtr
    __del__ = lambda self: None

    def write(self, vector):
        return _feature.WriteSoundFilePtr_write(self, vector)

    def writeInt(self, vector):
        return _feature.WriteSoundFilePtr_writeInt(self, vector)

    def writeShort(self, vector):
        return _feature.WriteSoundFilePtr_writeShort(self, vector)

    def writeFloat(self, vector):
        return _feature.WriteSoundFilePtr_writeFloat(self, vector)
WriteSoundFilePtr_swigregister = _feature.WriteSoundFilePtr_swigregister
WriteSoundFilePtr_swigregister(WriteSoundFilePtr)

# This file is compatible with both classic and new-style classes.


