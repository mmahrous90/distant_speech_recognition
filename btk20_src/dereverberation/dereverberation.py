# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dereverberation')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dereverberation')
    _dereverberation = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dereverberation', [dirname(__file__)])
        except ImportError:
            import _dereverberation
            return _dereverberation
        try:
            _mod = imp.load_module('_dereverberation', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dereverberation = swig_import_helper()
    del swig_import_helper
else:
    import _dereverberation
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import btk20
from btk20 import stream
from btk20 import feature
oldimport = """

import btk20.stream

"""

class SingleChannelWPEDereverberationFeaturePtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleChannelWPEDereverberationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingleChannelWPEDereverberationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _dereverberation.new_SingleChannelWPEDereverberationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr___iter__(self)

    def __deref__(self):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr___deref__(self)
    __swig_destroy__ = _dereverberation.delete_SingleChannelWPEDereverberationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_reset(self)

    def next_speaker(self):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_next_speaker(self)

    def estimate_filter(self, start_frame_no=0, frame_num=-1):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_estimate_filter(self, start_frame_no, frame_num)

    def print_objective_func(self, subband_no):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_print_objective_func(self, subband_no)

    def name(self):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_name(self)

    def size(self):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_size(self)

    def current(self):
        return _dereverberation.SingleChannelWPEDereverberationFeaturePtr_current(self)
SingleChannelWPEDereverberationFeaturePtr_swigregister = _dereverberation.SingleChannelWPEDereverberationFeaturePtr_swigregister
SingleChannelWPEDereverberationFeaturePtr_swigregister(SingleChannelWPEDereverberationFeaturePtr)

class MultiChannelWPEDereverberationPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiChannelWPEDereverberationPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiChannelWPEDereverberationPtr, name)
    __repr__ = _swig_repr

    def __init__(self, subbands_num, channels_num, lower_num, upper_num, iterations_num=2, load_db=-20.0, band_width=0.0, diagonal_bias=0.0, samplerate=16000.0):
        this = _dereverberation.new_MultiChannelWPEDereverberationPtr(subbands_num, channels_num, lower_num, upper_num, iterations_num, load_db, band_width, diagonal_bias, samplerate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _dereverberation.MultiChannelWPEDereverberationPtr___iter__(self)

    def __deref__(self):
        return _dereverberation.MultiChannelWPEDereverberationPtr___deref__(self)
    __swig_destroy__ = _dereverberation.delete_MultiChannelWPEDereverberationPtr
    __del__ = lambda self: None

    def reset(self):
        return _dereverberation.MultiChannelWPEDereverberationPtr_reset(self)

    def size(self):
        return _dereverberation.MultiChannelWPEDereverberationPtr_size(self)

    def set_input(self, samples):
        return _dereverberation.MultiChannelWPEDereverberationPtr_set_input(self, samples)

    def get_output(self, channelX):
        return _dereverberation.MultiChannelWPEDereverberationPtr_get_output(self, channelX)

    def calc_every_channel_output(self, frame_no=-5):
        return _dereverberation.MultiChannelWPEDereverberationPtr_calc_every_channel_output(self, frame_no)

    def estimate_filter(self, start_frame_no=0, frame_num=-1):
        return _dereverberation.MultiChannelWPEDereverberationPtr_estimate_filter(self, start_frame_no, frame_num)

    def reset_filter(self):
        return _dereverberation.MultiChannelWPEDereverberationPtr_reset_filter(self)

    def next_speaker(self):
        return _dereverberation.MultiChannelWPEDereverberationPtr_next_speaker(self)

    def print_objective_func(self, subband_no):
        return _dereverberation.MultiChannelWPEDereverberationPtr_print_objective_func(self, subband_no)

    def frame_no(self):
        return _dereverberation.MultiChannelWPEDereverberationPtr_frame_no(self)
MultiChannelWPEDereverberationPtr_swigregister = _dereverberation.MultiChannelWPEDereverberationPtr_swigregister
MultiChannelWPEDereverberationPtr_swigregister(MultiChannelWPEDereverberationPtr)

class MultiChannelWPEDereverberationFeaturePtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiChannelWPEDereverberationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiChannelWPEDereverberationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _dereverberation.new_MultiChannelWPEDereverberationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _dereverberation.MultiChannelWPEDereverberationFeaturePtr___iter__(self)

    def __deref__(self):
        return _dereverberation.MultiChannelWPEDereverberationFeaturePtr___deref__(self)
    __swig_destroy__ = _dereverberation.delete_MultiChannelWPEDereverberationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _dereverberation.MultiChannelWPEDereverberationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _dereverberation.MultiChannelWPEDereverberationFeaturePtr_reset(self)

    def name(self):
        return _dereverberation.MultiChannelWPEDereverberationFeaturePtr_name(self)

    def size(self):
        return _dereverberation.MultiChannelWPEDereverberationFeaturePtr_size(self)

    def current(self):
        return _dereverberation.MultiChannelWPEDereverberationFeaturePtr_current(self)
MultiChannelWPEDereverberationFeaturePtr_swigregister = _dereverberation.MultiChannelWPEDereverberationFeaturePtr_swigregister
MultiChannelWPEDereverberationFeaturePtr_swigregister(MultiChannelWPEDereverberationFeaturePtr)

# This file is compatible with both classic and new-style classes.


