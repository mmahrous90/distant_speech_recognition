# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_aec')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_aec')
    _aec = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_aec', [dirname(__file__)])
        except ImportError:
            import _aec
            return _aec
        try:
            _mod = imp.load_module('_aec', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _aec = swig_import_helper()
    del swig_import_helper
else:
    import _aec
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import btk20
from btk20 import stream
oldimport = """

import btk20.stream

"""

class NLMSAcousticEchoCancellationFeaturePtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NLMSAcousticEchoCancellationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NLMSAcousticEchoCancellationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _aec.new_NLMSAcousticEchoCancellationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _aec.NLMSAcousticEchoCancellationFeaturePtr___iter__(self)

    def __deref__(self):
        return _aec.NLMSAcousticEchoCancellationFeaturePtr___deref__(self)
    __swig_destroy__ = _aec.delete_NLMSAcousticEchoCancellationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _aec.NLMSAcousticEchoCancellationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _aec.NLMSAcousticEchoCancellationFeaturePtr_reset(self)

    def name(self):
        return _aec.NLMSAcousticEchoCancellationFeaturePtr_name(self)

    def size(self):
        return _aec.NLMSAcousticEchoCancellationFeaturePtr_size(self)

    def current(self):
        return _aec.NLMSAcousticEchoCancellationFeaturePtr_current(self)
NLMSAcousticEchoCancellationFeaturePtr_swigregister = _aec.NLMSAcousticEchoCancellationFeaturePtr_swigregister
NLMSAcousticEchoCancellationFeaturePtr_swigregister(NLMSAcousticEchoCancellationFeaturePtr)

class KalmanFilterEchoCancellationFeaturePtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KalmanFilterEchoCancellationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KalmanFilterEchoCancellationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _aec.new_KalmanFilterEchoCancellationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _aec.KalmanFilterEchoCancellationFeaturePtr___iter__(self)

    def __deref__(self):
        return _aec.KalmanFilterEchoCancellationFeaturePtr___deref__(self)
    __swig_destroy__ = _aec.delete_KalmanFilterEchoCancellationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _aec.KalmanFilterEchoCancellationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _aec.KalmanFilterEchoCancellationFeaturePtr_reset(self)

    def name(self):
        return _aec.KalmanFilterEchoCancellationFeaturePtr_name(self)

    def size(self):
        return _aec.KalmanFilterEchoCancellationFeaturePtr_size(self)

    def current(self):
        return _aec.KalmanFilterEchoCancellationFeaturePtr_current(self)
KalmanFilterEchoCancellationFeaturePtr_swigregister = _aec.KalmanFilterEchoCancellationFeaturePtr_swigregister
KalmanFilterEchoCancellationFeaturePtr_swigregister(KalmanFilterEchoCancellationFeaturePtr)

class BlockKalmanFilterEchoCancellationFeaturePtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockKalmanFilterEchoCancellationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockKalmanFilterEchoCancellationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _aec.new_BlockKalmanFilterEchoCancellationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _aec.BlockKalmanFilterEchoCancellationFeaturePtr___iter__(self)

    def __deref__(self):
        return _aec.BlockKalmanFilterEchoCancellationFeaturePtr___deref__(self)
    __swig_destroy__ = _aec.delete_BlockKalmanFilterEchoCancellationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _aec.BlockKalmanFilterEchoCancellationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _aec.BlockKalmanFilterEchoCancellationFeaturePtr_reset(self)

    def name(self):
        return _aec.BlockKalmanFilterEchoCancellationFeaturePtr_name(self)

    def size(self):
        return _aec.BlockKalmanFilterEchoCancellationFeaturePtr_size(self)

    def current(self):
        return _aec.BlockKalmanFilterEchoCancellationFeaturePtr_current(self)
BlockKalmanFilterEchoCancellationFeaturePtr_swigregister = _aec.BlockKalmanFilterEchoCancellationFeaturePtr_swigregister
BlockKalmanFilterEchoCancellationFeaturePtr_swigregister(BlockKalmanFilterEchoCancellationFeaturePtr)

class InformationFilterEchoCancellationFeaturePtr(BlockKalmanFilterEchoCancellationFeaturePtr):
    __swig_setmethods__ = {}
    for _s in [BlockKalmanFilterEchoCancellationFeaturePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InformationFilterEchoCancellationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [BlockKalmanFilterEchoCancellationFeaturePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InformationFilterEchoCancellationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _aec.new_InformationFilterEchoCancellationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _aec.InformationFilterEchoCancellationFeaturePtr___iter__(self)

    def __deref__(self):
        return _aec.InformationFilterEchoCancellationFeaturePtr___deref__(self)
    __swig_destroy__ = _aec.delete_InformationFilterEchoCancellationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _aec.InformationFilterEchoCancellationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _aec.InformationFilterEchoCancellationFeaturePtr_reset(self)

    def name(self):
        return _aec.InformationFilterEchoCancellationFeaturePtr_name(self)

    def size(self):
        return _aec.InformationFilterEchoCancellationFeaturePtr_size(self)

    def current(self):
        return _aec.InformationFilterEchoCancellationFeaturePtr_current(self)
InformationFilterEchoCancellationFeaturePtr_swigregister = _aec.InformationFilterEchoCancellationFeaturePtr_swigregister
InformationFilterEchoCancellationFeaturePtr_swigregister(InformationFilterEchoCancellationFeaturePtr)

class SquareRootInformationFilterEchoCancellationFeaturePtr(InformationFilterEchoCancellationFeaturePtr):
    __swig_setmethods__ = {}
    for _s in [InformationFilterEchoCancellationFeaturePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquareRootInformationFilterEchoCancellationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [InformationFilterEchoCancellationFeaturePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquareRootInformationFilterEchoCancellationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _aec.new_SquareRootInformationFilterEchoCancellationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _aec.SquareRootInformationFilterEchoCancellationFeaturePtr___iter__(self)

    def __deref__(self):
        return _aec.SquareRootInformationFilterEchoCancellationFeaturePtr___deref__(self)
    __swig_destroy__ = _aec.delete_SquareRootInformationFilterEchoCancellationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _aec.SquareRootInformationFilterEchoCancellationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _aec.SquareRootInformationFilterEchoCancellationFeaturePtr_reset(self)

    def name(self):
        return _aec.SquareRootInformationFilterEchoCancellationFeaturePtr_name(self)

    def size(self):
        return _aec.SquareRootInformationFilterEchoCancellationFeaturePtr_size(self)

    def current(self):
        return _aec.SquareRootInformationFilterEchoCancellationFeaturePtr_current(self)
SquareRootInformationFilterEchoCancellationFeaturePtr_swigregister = _aec.SquareRootInformationFilterEchoCancellationFeaturePtr_swigregister
SquareRootInformationFilterEchoCancellationFeaturePtr_swigregister(SquareRootInformationFilterEchoCancellationFeaturePtr)

class DTDBlockKalmanFilterEchoCancellationFeaturePtr(BlockKalmanFilterEchoCancellationFeaturePtr):
    __swig_setmethods__ = {}
    for _s in [BlockKalmanFilterEchoCancellationFeaturePtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DTDBlockKalmanFilterEchoCancellationFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [BlockKalmanFilterEchoCancellationFeaturePtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DTDBlockKalmanFilterEchoCancellationFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _aec.new_DTDBlockKalmanFilterEchoCancellationFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr___iter__(self)

    def __deref__(self):
        return _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr___deref__(self)
    __swig_destroy__ = _aec.delete_DTDBlockKalmanFilterEchoCancellationFeaturePtr
    __del__ = lambda self: None

    def next(self, frame_no=-5):
        return _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr_next(self, frame_no)

    def reset(self):
        return _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr_reset(self)

    def name(self):
        return _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr_name(self)

    def size(self):
        return _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr_size(self)

    def current(self):
        return _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr_current(self)
DTDBlockKalmanFilterEchoCancellationFeaturePtr_swigregister = _aec.DTDBlockKalmanFilterEchoCancellationFeaturePtr_swigregister
DTDBlockKalmanFilterEchoCancellationFeaturePtr_swigregister(DTDBlockKalmanFilterEchoCancellationFeaturePtr)

# This file is compatible with both classic and new-style classes.


