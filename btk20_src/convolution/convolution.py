# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_convolution')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_convolution')
    _convolution = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_convolution', [dirname(__file__)])
        except ImportError:
            import _convolution
            return _convolution
        try:
            _mod = imp.load_module('_convolution', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _convolution = swig_import_helper()
    del swig_import_helper
else:
    import _convolution
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import btk20
from btk20 import stream
oldimport = """

import btk20.stream

"""

class OverlapAddPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverlapAddPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OverlapAddPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _convolution.new_OverlapAddPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _convolution.OverlapAddPtr___iter__(self)

    def __deref__(self):
        return _convolution.OverlapAddPtr___deref__(self)
    __swig_destroy__ = _convolution.delete_OverlapAddPtr
    __del__ = lambda self: None

    def next(self, frameX=-5):
        return _convolution.OverlapAddPtr_next(self, frameX)

    def reset(self):
        return _convolution.OverlapAddPtr_reset(self)

    def name(self):
        return _convolution.OverlapAddPtr_name(self)

    def size(self):
        return _convolution.OverlapAddPtr_size(self)

    def is_end(self):
        return _convolution.OverlapAddPtr_is_end(self)

    def current(self):
        return _convolution.OverlapAddPtr_current(self)
OverlapAddPtr_swigregister = _convolution.OverlapAddPtr_swigregister
OverlapAddPtr_swigregister(OverlapAddPtr)

class OverlapSavePtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverlapSavePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OverlapSavePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _convolution.new_OverlapSavePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _convolution.OverlapSavePtr___iter__(self)

    def __deref__(self):
        return _convolution.OverlapSavePtr___deref__(self)
    __swig_destroy__ = _convolution.delete_OverlapSavePtr
    __del__ = lambda self: None

    def next(self, frameX=-5):
        return _convolution.OverlapSavePtr_next(self, frameX)

    def reset(self):
        return _convolution.OverlapSavePtr_reset(self)

    def name(self):
        return _convolution.OverlapSavePtr_name(self)

    def size(self):
        return _convolution.OverlapSavePtr_size(self)

    def is_end(self):
        return _convolution.OverlapSavePtr_is_end(self)

    def current(self):
        return _convolution.OverlapSavePtr_current(self)
OverlapSavePtr_swigregister = _convolution.OverlapSavePtr_swigregister
OverlapSavePtr_swigregister(OverlapSavePtr)

# This file is compatible with both classic and new-style classes.


