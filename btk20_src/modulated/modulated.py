# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_modulated')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_modulated')
    _modulated = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_modulated', [dirname(__file__)])
        except ImportError:
            import _modulated
            return _modulated
        try:
            _mod = imp.load_module('_modulated', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _modulated = swig_import_helper()
    del swig_import_helper
else:
    import _modulated
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


import btk20
from btk20 import stream
oldimport = """

import btk20.stream

"""

class NormalFFTAnalysisBankPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalFFTAnalysisBankPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalFFTAnalysisBankPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _modulated.new_NormalFFTAnalysisBankPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _modulated.NormalFFTAnalysisBankPtr___iter__(self)

    def __deref__(self):
        return _modulated.NormalFFTAnalysisBankPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_NormalFFTAnalysisBankPtr
    __del__ = lambda self: None

    def next(self, frameX=-5):
        return _modulated.NormalFFTAnalysisBankPtr_next(self, frameX)

    def reset(self):
        return _modulated.NormalFFTAnalysisBankPtr_reset(self)

    def fftlen(self):
        return _modulated.NormalFFTAnalysisBankPtr_fftlen(self)

    def name(self):
        return _modulated.NormalFFTAnalysisBankPtr_name(self)

    def size(self):
        return _modulated.NormalFFTAnalysisBankPtr_size(self)

    def current(self):
        return _modulated.NormalFFTAnalysisBankPtr_current(self)
NormalFFTAnalysisBankPtr_swigregister = _modulated.NormalFFTAnalysisBankPtr_swigregister
NormalFFTAnalysisBankPtr_swigregister(NormalFFTAnalysisBankPtr)

class OverSampledDFTAnalysisBankPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverSampledDFTAnalysisBankPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OverSampledDFTAnalysisBankPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _modulated.new_OverSampledDFTAnalysisBankPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _modulated.OverSampledDFTAnalysisBankPtr___iter__(self)

    def __deref__(self):
        return _modulated.OverSampledDFTAnalysisBankPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_OverSampledDFTAnalysisBankPtr
    __del__ = lambda self: None

    def polyphase(self, m, n):
        return _modulated.OverSampledDFTAnalysisBankPtr_polyphase(self, m, n)

    def next(self, frameX=-5):
        return _modulated.OverSampledDFTAnalysisBankPtr_next(self, frameX)

    def reset(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_reset(self)

    def is_end(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_is_end(self)

    def fftlen(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_fftlen(self)

    def shiftlen(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_shiftlen(self)

    def frame_no(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_frame_no(self)

    def name(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_name(self)

    def size(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_size(self)

    def current(self):
        return _modulated.OverSampledDFTAnalysisBankPtr_current(self)
OverSampledDFTAnalysisBankPtr_swigregister = _modulated.OverSampledDFTAnalysisBankPtr_swigregister
OverSampledDFTAnalysisBankPtr_swigregister(OverSampledDFTAnalysisBankPtr)

class OverSampledDFTSynthesisBankPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverSampledDFTSynthesisBankPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OverSampledDFTSynthesisBankPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _modulated.new_OverSampledDFTSynthesisBankPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _modulated.OverSampledDFTSynthesisBankPtr___iter__(self)

    def __deref__(self):
        return _modulated.OverSampledDFTSynthesisBankPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_OverSampledDFTSynthesisBankPtr
    __del__ = lambda self: None

    def polyphase(self, m, n):
        return _modulated.OverSampledDFTSynthesisBankPtr_polyphase(self, m, n)

    def next(self, frameX=-5):
        return _modulated.OverSampledDFTSynthesisBankPtr_next(self, frameX)

    def reset(self):
        return _modulated.OverSampledDFTSynthesisBankPtr_reset(self)

    def input_source_vector(self, block):
        return _modulated.OverSampledDFTSynthesisBankPtr_input_source_vector(self, block)

    def no_stream_feature(self, flag=True):
        return _modulated.OverSampledDFTSynthesisBankPtr_no_stream_feature(self, flag)

    def name(self):
        return _modulated.OverSampledDFTSynthesisBankPtr_name(self)

    def size(self):
        return _modulated.OverSampledDFTSynthesisBankPtr_size(self)

    def is_end(self):
        return _modulated.OverSampledDFTSynthesisBankPtr_is_end(self)

    def current(self):
        return _modulated.OverSampledDFTSynthesisBankPtr_current(self)
OverSampledDFTSynthesisBankPtr_swigregister = _modulated.OverSampledDFTSynthesisBankPtr_swigregister
OverSampledDFTSynthesisBankPtr_swigregister(OverSampledDFTSynthesisBankPtr)

class PerfectReconstructionFFTAnalysisBankPtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerfectReconstructionFFTAnalysisBankPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PerfectReconstructionFFTAnalysisBankPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _modulated.new_PerfectReconstructionFFTAnalysisBankPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr___iter__(self)

    def __deref__(self):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_PerfectReconstructionFFTAnalysisBankPtr
    __del__ = lambda self: None

    def polyphase(self, m, n):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr_polyphase(self, m, n)

    def next(self, frameX=-5):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr_next(self, frameX)

    def reset(self):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr_reset(self)

    def name(self):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr_name(self)

    def size(self):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr_size(self)

    def current(self):
        return _modulated.PerfectReconstructionFFTAnalysisBankPtr_current(self)
PerfectReconstructionFFTAnalysisBankPtr_swigregister = _modulated.PerfectReconstructionFFTAnalysisBankPtr_swigregister
PerfectReconstructionFFTAnalysisBankPtr_swigregister(PerfectReconstructionFFTAnalysisBankPtr)

class PerfectReconstructionFFTSynthesisBankPtr(btk20.stream.VectorFloatFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerfectReconstructionFFTSynthesisBankPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorFloatFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PerfectReconstructionFFTSynthesisBankPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _modulated.new_PerfectReconstructionFFTSynthesisBankPtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr___iter__(self)

    def __deref__(self):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_PerfectReconstructionFFTSynthesisBankPtr
    __del__ = lambda self: None

    def next(self, frameX=-5):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr_next(self, frameX)

    def reset(self):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr_reset(self)

    def polyphase(self, m, n):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr_polyphase(self, m, n)

    def name(self):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr_name(self)

    def size(self):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr_size(self)

    def is_end(self):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr_is_end(self)

    def current(self):
        return _modulated.PerfectReconstructionFFTSynthesisBankPtr_current(self)
PerfectReconstructionFFTSynthesisBankPtr_swigregister = _modulated.PerfectReconstructionFFTSynthesisBankPtr_swigregister
PerfectReconstructionFFTSynthesisBankPtr_swigregister(PerfectReconstructionFFTSynthesisBankPtr)

class DelayFeaturePtr(btk20.stream.VectorComplexFeatureStreamPtr):
    __swig_setmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelayFeaturePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [btk20.stream.VectorComplexFeatureStreamPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DelayFeaturePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _modulated.new_DelayFeaturePtr(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self):
        return _modulated.DelayFeaturePtr___iter__(self)

    def __deref__(self):
        return _modulated.DelayFeaturePtr___deref__(self)
    __swig_destroy__ = _modulated.delete_DelayFeaturePtr
    __del__ = lambda self: None

    def set_time_delay(self, time_delay):
        return _modulated.DelayFeaturePtr_set_time_delay(self, time_delay)

    def next(self, frameX=-5):
        return _modulated.DelayFeaturePtr_next(self, frameX)

    def reset(self):
        return _modulated.DelayFeaturePtr_reset(self)

    def name(self):
        return _modulated.DelayFeaturePtr_name(self)

    def size(self):
        return _modulated.DelayFeaturePtr_size(self)

    def current(self):
        return _modulated.DelayFeaturePtr_current(self)
DelayFeaturePtr_swigregister = _modulated.DelayFeaturePtr_swigregister
DelayFeaturePtr_swigregister(DelayFeaturePtr)

class CosineModulatedPrototypeDesign(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineModulatedPrototypeDesign, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CosineModulatedPrototypeDesign, name)
    __repr__ = _swig_repr

    def __init__(self, M=256, N=3072, fs=1.0):
        this = _modulated.new_CosineModulatedPrototypeDesign(M, N, fs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _modulated.delete_CosineModulatedPrototypeDesign
    __del__ = lambda self: None

    def fcn(self, x, f):
        return _modulated.CosineModulatedPrototypeDesign_fcn(self, x, f)

    def grad(self, x, g):
        return _modulated.CosineModulatedPrototypeDesign_grad(self, x, g)

    def M(self):
        return _modulated.CosineModulatedPrototypeDesign_M(self)

    def N(self):
        return _modulated.CosineModulatedPrototypeDesign_N(self)

    def m(self):
        return _modulated.CosineModulatedPrototypeDesign_m(self)

    def J(self):
        return _modulated.CosineModulatedPrototypeDesign_J(self)

    def proto(self):
        return _modulated.CosineModulatedPrototypeDesign_proto(self)
CosineModulatedPrototypeDesign_swigregister = _modulated.CosineModulatedPrototypeDesign_swigregister
CosineModulatedPrototypeDesign_swigregister(CosineModulatedPrototypeDesign)


def design_f(v, params):
    return _modulated.design_f(v, params)
design_f = _modulated.design_f

def design_df(v, params, df):
    return _modulated.design_df(v, params, df)
design_df = _modulated.design_df

def design_fdf(v, params, f, df):
    return _modulated.design_fdf(v, params, f, df)
design_fdf = _modulated.design_fdf

def write_gsl_format(fileName, prototype):
    return _modulated.write_gsl_format(fileName, prototype)
write_gsl_format = _modulated.write_gsl_format
class AnalysisOversampledDFTDesignPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisOversampledDFTDesignPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisOversampledDFTDesignPtr, name)
    __repr__ = _swig_repr

    def __init__(self, M=256, m=4, r=1, wp=1.0, tau_h=-1):
        this = _modulated.new_AnalysisOversampledDFTDesignPtr(M, m, r, wp, tau_h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _modulated.AnalysisOversampledDFTDesignPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_AnalysisOversampledDFTDesignPtr
    __del__ = lambda self: None

    def design(self, tolerance=2.2204e-16):
        return _modulated.AnalysisOversampledDFTDesignPtr_design(self, tolerance)

    def save(self, fileName):
        return _modulated.AnalysisOversampledDFTDesignPtr_save(self, fileName)

    def calcError(self, doPrint=True):
        return _modulated.AnalysisOversampledDFTDesignPtr_calcError(self, doPrint)
AnalysisOversampledDFTDesignPtr_swigregister = _modulated.AnalysisOversampledDFTDesignPtr_swigregister
AnalysisOversampledDFTDesignPtr_swigregister(AnalysisOversampledDFTDesignPtr)

class SynthesisOversampledDFTDesignPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynthesisOversampledDFTDesignPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynthesisOversampledDFTDesignPtr, name)
    __repr__ = _swig_repr

    def __init__(self, h, M=256, m=4, r=1, v=1.0, wp=1.0, tau_T=-1):
        this = _modulated.new_SynthesisOversampledDFTDesignPtr(h, M, m, r, v, wp, tau_T)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _modulated.SynthesisOversampledDFTDesignPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_SynthesisOversampledDFTDesignPtr
    __del__ = lambda self: None

    def design(self, tolerance=2.2204e-16):
        return _modulated.SynthesisOversampledDFTDesignPtr_design(self, tolerance)

    def save(self, fileName):
        return _modulated.SynthesisOversampledDFTDesignPtr_save(self, fileName)

    def calcError(self, doPrint=True):
        return _modulated.SynthesisOversampledDFTDesignPtr_calcError(self, doPrint)
SynthesisOversampledDFTDesignPtr_swigregister = _modulated.SynthesisOversampledDFTDesignPtr_swigregister
SynthesisOversampledDFTDesignPtr_swigregister(SynthesisOversampledDFTDesignPtr)

class AnalysisNyquistMDesignPtr(AnalysisOversampledDFTDesignPtr):
    __swig_setmethods__ = {}
    for _s in [AnalysisOversampledDFTDesignPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisNyquistMDesignPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [AnalysisOversampledDFTDesignPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisNyquistMDesignPtr, name)
    __repr__ = _swig_repr

    def __init__(self, M=512, m=2, r=1, wp=1.0):
        this = _modulated.new_AnalysisNyquistMDesignPtr(M, m, r, wp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _modulated.AnalysisNyquistMDesignPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_AnalysisNyquistMDesignPtr
    __del__ = lambda self: None

    def design(self, tolerance=2.2204e-16):
        return _modulated.AnalysisNyquistMDesignPtr_design(self, tolerance)

    def save(self, fileName):
        return _modulated.AnalysisNyquistMDesignPtr_save(self, fileName)

    def calcError(self, doPrint=True):
        return _modulated.AnalysisNyquistMDesignPtr_calcError(self, doPrint)
AnalysisNyquistMDesignPtr_swigregister = _modulated.AnalysisNyquistMDesignPtr_swigregister
AnalysisNyquistMDesignPtr_swigregister(AnalysisNyquistMDesignPtr)

class SynthesisNyquistMDesignPtr(SynthesisOversampledDFTDesignPtr):
    __swig_setmethods__ = {}
    for _s in [SynthesisOversampledDFTDesignPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynthesisNyquistMDesignPtr, name, value)
    __swig_getmethods__ = {}
    for _s in [SynthesisOversampledDFTDesignPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SynthesisNyquistMDesignPtr, name)
    __repr__ = _swig_repr

    def __init__(self, h, M=512, m=2, r=1, wp=1.0):
        this = _modulated.new_SynthesisNyquistMDesignPtr(h, M, m, r, wp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _modulated.SynthesisNyquistMDesignPtr___deref__(self)
    __swig_destroy__ = _modulated.delete_SynthesisNyquistMDesignPtr
    __del__ = lambda self: None

    def design(self, tolerance=2.2204e-16):
        return _modulated.SynthesisNyquistMDesignPtr_design(self, tolerance)

    def save(self, fileName):
        return _modulated.SynthesisNyquistMDesignPtr_save(self, fileName)

    def calcError(self, doPrint=True):
        return _modulated.SynthesisNyquistMDesignPtr_calcError(self, doPrint)
SynthesisNyquistMDesignPtr_swigregister = _modulated.SynthesisNyquistMDesignPtr_swigregister
SynthesisNyquistMDesignPtr_swigregister(SynthesisNyquistMDesignPtr)

class SynthesisNyquistMDesignCompositeResponsePtr(SynthesisNyquistMDesignPtr):
    __swig_setmethods__ = {}
    for _s in [SynthesisNyquistMDesignPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynthesisNyquistMDesignCompositeResponsePtr, name, value)
    __swig_getmethods__ = {}
    for _s in [SynthesisNyquistMDesignPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SynthesisNyquistMDesignCompositeResponsePtr, name)
    __repr__ = _swig_repr

    def __init__(self, h, M=512, m=2, r=1, wp=1.0):
        this = _modulated.new_SynthesisNyquistMDesignCompositeResponsePtr(h, M, m, r, wp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _modulated.SynthesisNyquistMDesignCompositeResponsePtr___deref__(self)
    __swig_destroy__ = _modulated.delete_SynthesisNyquistMDesignCompositeResponsePtr
    __del__ = lambda self: None

    def design(self, tolerance=2.2204e-16):
        return _modulated.SynthesisNyquistMDesignCompositeResponsePtr_design(self, tolerance)

    def save(self, fileName):
        return _modulated.SynthesisNyquistMDesignCompositeResponsePtr_save(self, fileName)

    def calcError(self, doPrint=True):
        return _modulated.SynthesisNyquistMDesignCompositeResponsePtr_calcError(self, doPrint)
SynthesisNyquistMDesignCompositeResponsePtr_swigregister = _modulated.SynthesisNyquistMDesignCompositeResponsePtr_swigregister
SynthesisNyquistMDesignCompositeResponsePtr_swigregister(SynthesisNyquistMDesignCompositeResponsePtr)


def get_window(winType, winLen):
    return _modulated.get_window(winType, winLen)
get_window = _modulated.get_window
# This file is compatible with both classic and new-style classes.


