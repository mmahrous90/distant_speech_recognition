# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_matrix')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_matrix')
    _matrix = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_matrix', [dirname(__file__)])
        except ImportError:
            import _matrix
            return _matrix
        try:
            _mod = imp.load_module('_matrix', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _matrix = swig_import_helper()
    del swig_import_helper
else:
    import _matrix
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class gsl_matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gsl_matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gsl_matrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size1"] = _matrix.gsl_matrix_size1_set
    __swig_getmethods__["size1"] = _matrix.gsl_matrix_size1_get
    if _newclass:
        size1 = _swig_property(_matrix.gsl_matrix_size1_get, _matrix.gsl_matrix_size1_set)
    __swig_setmethods__["size2"] = _matrix.gsl_matrix_size2_set
    __swig_getmethods__["size2"] = _matrix.gsl_matrix_size2_get
    if _newclass:
        size2 = _swig_property(_matrix.gsl_matrix_size2_get, _matrix.gsl_matrix_size2_set)
    __swig_setmethods__["tda"] = _matrix.gsl_matrix_tda_set
    __swig_getmethods__["tda"] = _matrix.gsl_matrix_tda_get
    if _newclass:
        tda = _swig_property(_matrix.gsl_matrix_tda_get, _matrix.gsl_matrix_tda_set)
    __swig_setmethods__["data"] = _matrix.gsl_matrix_data_set
    __swig_getmethods__["data"] = _matrix.gsl_matrix_data_get
    if _newclass:
        data = _swig_property(_matrix.gsl_matrix_data_get, _matrix.gsl_matrix_data_set)
    __swig_setmethods__["block"] = _matrix.gsl_matrix_block_set
    __swig_getmethods__["block"] = _matrix.gsl_matrix_block_get
    if _newclass:
        block = _swig_property(_matrix.gsl_matrix_block_get, _matrix.gsl_matrix_block_set)
    __swig_setmethods__["owner"] = _matrix.gsl_matrix_owner_set
    __swig_getmethods__["owner"] = _matrix.gsl_matrix_owner_get
    if _newclass:
        owner = _swig_property(_matrix.gsl_matrix_owner_get, _matrix.gsl_matrix_owner_set)

    def __init__(self, m, n):
        this = _matrix.new_gsl_matrix(m, n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrix.delete_gsl_matrix
    __del__ = lambda self: None

    def nrows(self):
        return _matrix.gsl_matrix_nrows(self)

    def ncols(self):
        return _matrix.gsl_matrix_ncols(self)

    def __getitem__(self, m, n):
        return _matrix.gsl_matrix___getitem__(self, m, n)

    def __setitem__(self, item, n, m):
        return _matrix.gsl_matrix___setitem__(self, item, n, m)
gsl_matrix_swigregister = _matrix.gsl_matrix_swigregister
gsl_matrix_swigregister(gsl_matrix)

class _gsl_matrix_view(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gsl_matrix_view, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gsl_matrix_view, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrix"] = _matrix._gsl_matrix_view_matrix_set
    __swig_getmethods__["matrix"] = _matrix._gsl_matrix_view_matrix_get
    if _newclass:
        matrix = _swig_property(_matrix._gsl_matrix_view_matrix_get, _matrix._gsl_matrix_view_matrix_set)

    def __init__(self):
        this = _matrix.new__gsl_matrix_view()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrix.delete__gsl_matrix_view
    __del__ = lambda self: None
_gsl_matrix_view_swigregister = _matrix._gsl_matrix_view_swigregister
_gsl_matrix_view_swigregister(_gsl_matrix_view)

class _gsl_matrix_const_view(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gsl_matrix_const_view, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gsl_matrix_const_view, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrix"] = _matrix._gsl_matrix_const_view_matrix_set
    __swig_getmethods__["matrix"] = _matrix._gsl_matrix_const_view_matrix_get
    if _newclass:
        matrix = _swig_property(_matrix._gsl_matrix_const_view_matrix_get, _matrix._gsl_matrix_const_view_matrix_set)

    def __init__(self):
        this = _matrix.new__gsl_matrix_const_view()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrix.delete__gsl_matrix_const_view
    __del__ = lambda self: None
_gsl_matrix_const_view_swigregister = _matrix._gsl_matrix_const_view_swigregister
_gsl_matrix_const_view_swigregister(_gsl_matrix_const_view)


def gsl_matrix_alloc(n1, n2):
    return _matrix.gsl_matrix_alloc(n1, n2)
gsl_matrix_alloc = _matrix.gsl_matrix_alloc

def gsl_matrix_calloc(n1, n2):
    return _matrix.gsl_matrix_calloc(n1, n2)
gsl_matrix_calloc = _matrix.gsl_matrix_calloc

def gsl_matrix_alloc_from_block(b, offset, n1, n2, d2):
    return _matrix.gsl_matrix_alloc_from_block(b, offset, n1, n2, d2)
gsl_matrix_alloc_from_block = _matrix.gsl_matrix_alloc_from_block

def gsl_matrix_alloc_from_matrix(m, k1, k2, n1, n2):
    return _matrix.gsl_matrix_alloc_from_matrix(m, k1, k2, n1, n2)
gsl_matrix_alloc_from_matrix = _matrix.gsl_matrix_alloc_from_matrix

def gsl_vector_alloc_row_from_matrix(m, i):
    return _matrix.gsl_vector_alloc_row_from_matrix(m, i)
gsl_vector_alloc_row_from_matrix = _matrix.gsl_vector_alloc_row_from_matrix

def gsl_vector_alloc_col_from_matrix(m, j):
    return _matrix.gsl_vector_alloc_col_from_matrix(m, j)
gsl_vector_alloc_col_from_matrix = _matrix.gsl_vector_alloc_col_from_matrix

def gsl_matrix_free(m):
    return _matrix.gsl_matrix_free(m)
gsl_matrix_free = _matrix.gsl_matrix_free

def gsl_matrix_submatrix(m, i, j, n1, n2):
    return _matrix.gsl_matrix_submatrix(m, i, j, n1, n2)
gsl_matrix_submatrix = _matrix.gsl_matrix_submatrix

def gsl_matrix_row(m, i):
    return _matrix.gsl_matrix_row(m, i)
gsl_matrix_row = _matrix.gsl_matrix_row

def gsl_matrix_column(m, j):
    return _matrix.gsl_matrix_column(m, j)
gsl_matrix_column = _matrix.gsl_matrix_column

def gsl_matrix_diagonal(m):
    return _matrix.gsl_matrix_diagonal(m)
gsl_matrix_diagonal = _matrix.gsl_matrix_diagonal

def gsl_matrix_subdiagonal(m, k):
    return _matrix.gsl_matrix_subdiagonal(m, k)
gsl_matrix_subdiagonal = _matrix.gsl_matrix_subdiagonal

def gsl_matrix_superdiagonal(m, k):
    return _matrix.gsl_matrix_superdiagonal(m, k)
gsl_matrix_superdiagonal = _matrix.gsl_matrix_superdiagonal

def gsl_matrix_subrow(m, i, offset, n):
    return _matrix.gsl_matrix_subrow(m, i, offset, n)
gsl_matrix_subrow = _matrix.gsl_matrix_subrow

def gsl_matrix_subcolumn(m, j, offset, n):
    return _matrix.gsl_matrix_subcolumn(m, j, offset, n)
gsl_matrix_subcolumn = _matrix.gsl_matrix_subcolumn

def gsl_matrix_view_array(base, n1, n2):
    return _matrix.gsl_matrix_view_array(base, n1, n2)
gsl_matrix_view_array = _matrix.gsl_matrix_view_array

def gsl_matrix_view_array_with_tda(base, n1, n2, tda):
    return _matrix.gsl_matrix_view_array_with_tda(base, n1, n2, tda)
gsl_matrix_view_array_with_tda = _matrix.gsl_matrix_view_array_with_tda

def gsl_matrix_view_vector(v, n1, n2):
    return _matrix.gsl_matrix_view_vector(v, n1, n2)
gsl_matrix_view_vector = _matrix.gsl_matrix_view_vector

def gsl_matrix_view_vector_with_tda(v, n1, n2, tda):
    return _matrix.gsl_matrix_view_vector_with_tda(v, n1, n2, tda)
gsl_matrix_view_vector_with_tda = _matrix.gsl_matrix_view_vector_with_tda

def gsl_matrix_const_submatrix(m, i, j, n1, n2):
    return _matrix.gsl_matrix_const_submatrix(m, i, j, n1, n2)
gsl_matrix_const_submatrix = _matrix.gsl_matrix_const_submatrix

def gsl_matrix_const_row(m, i):
    return _matrix.gsl_matrix_const_row(m, i)
gsl_matrix_const_row = _matrix.gsl_matrix_const_row

def gsl_matrix_const_column(m, j):
    return _matrix.gsl_matrix_const_column(m, j)
gsl_matrix_const_column = _matrix.gsl_matrix_const_column

def gsl_matrix_const_diagonal(m):
    return _matrix.gsl_matrix_const_diagonal(m)
gsl_matrix_const_diagonal = _matrix.gsl_matrix_const_diagonal

def gsl_matrix_const_subdiagonal(m, k):
    return _matrix.gsl_matrix_const_subdiagonal(m, k)
gsl_matrix_const_subdiagonal = _matrix.gsl_matrix_const_subdiagonal

def gsl_matrix_const_superdiagonal(m, k):
    return _matrix.gsl_matrix_const_superdiagonal(m, k)
gsl_matrix_const_superdiagonal = _matrix.gsl_matrix_const_superdiagonal

def gsl_matrix_const_subrow(m, i, offset, n):
    return _matrix.gsl_matrix_const_subrow(m, i, offset, n)
gsl_matrix_const_subrow = _matrix.gsl_matrix_const_subrow

def gsl_matrix_const_subcolumn(m, j, offset, n):
    return _matrix.gsl_matrix_const_subcolumn(m, j, offset, n)
gsl_matrix_const_subcolumn = _matrix.gsl_matrix_const_subcolumn

def gsl_matrix_const_view_array(base, n1, n2):
    return _matrix.gsl_matrix_const_view_array(base, n1, n2)
gsl_matrix_const_view_array = _matrix.gsl_matrix_const_view_array

def gsl_matrix_const_view_array_with_tda(base, n1, n2, tda):
    return _matrix.gsl_matrix_const_view_array_with_tda(base, n1, n2, tda)
gsl_matrix_const_view_array_with_tda = _matrix.gsl_matrix_const_view_array_with_tda

def gsl_matrix_const_view_vector(v, n1, n2):
    return _matrix.gsl_matrix_const_view_vector(v, n1, n2)
gsl_matrix_const_view_vector = _matrix.gsl_matrix_const_view_vector

def gsl_matrix_const_view_vector_with_tda(v, n1, n2, tda):
    return _matrix.gsl_matrix_const_view_vector_with_tda(v, n1, n2, tda)
gsl_matrix_const_view_vector_with_tda = _matrix.gsl_matrix_const_view_vector_with_tda

def gsl_matrix_set_zero(m):
    return _matrix.gsl_matrix_set_zero(m)
gsl_matrix_set_zero = _matrix.gsl_matrix_set_zero

def gsl_matrix_set_identity(m):
    return _matrix.gsl_matrix_set_identity(m)
gsl_matrix_set_identity = _matrix.gsl_matrix_set_identity

def gsl_matrix_set_all(m, x):
    return _matrix.gsl_matrix_set_all(m, x)
gsl_matrix_set_all = _matrix.gsl_matrix_set_all

def gsl_matrix_fread(stream, m):
    return _matrix.gsl_matrix_fread(stream, m)
gsl_matrix_fread = _matrix.gsl_matrix_fread

def gsl_matrix_fwrite(stream, m):
    return _matrix.gsl_matrix_fwrite(stream, m)
gsl_matrix_fwrite = _matrix.gsl_matrix_fwrite

def gsl_matrix_fscanf(stream, m):
    return _matrix.gsl_matrix_fscanf(stream, m)
gsl_matrix_fscanf = _matrix.gsl_matrix_fscanf

def gsl_matrix_fprintf(stream, m, format):
    return _matrix.gsl_matrix_fprintf(stream, m, format)
gsl_matrix_fprintf = _matrix.gsl_matrix_fprintf

def gsl_matrix_memcpy(dest, src):
    return _matrix.gsl_matrix_memcpy(dest, src)
gsl_matrix_memcpy = _matrix.gsl_matrix_memcpy

def gsl_matrix_swap(m1, m2):
    return _matrix.gsl_matrix_swap(m1, m2)
gsl_matrix_swap = _matrix.gsl_matrix_swap

def gsl_matrix_tricpy(uplo_src, copy_diag, dest, src):
    return _matrix.gsl_matrix_tricpy(uplo_src, copy_diag, dest, src)
gsl_matrix_tricpy = _matrix.gsl_matrix_tricpy

def gsl_matrix_swap_rows(m, i, j):
    return _matrix.gsl_matrix_swap_rows(m, i, j)
gsl_matrix_swap_rows = _matrix.gsl_matrix_swap_rows

def gsl_matrix_swap_columns(m, i, j):
    return _matrix.gsl_matrix_swap_columns(m, i, j)
gsl_matrix_swap_columns = _matrix.gsl_matrix_swap_columns

def gsl_matrix_swap_rowcol(m, i, j):
    return _matrix.gsl_matrix_swap_rowcol(m, i, j)
gsl_matrix_swap_rowcol = _matrix.gsl_matrix_swap_rowcol

def gsl_matrix_transpose(m):
    return _matrix.gsl_matrix_transpose(m)
gsl_matrix_transpose = _matrix.gsl_matrix_transpose

def gsl_matrix_transpose_memcpy(dest, src):
    return _matrix.gsl_matrix_transpose_memcpy(dest, src)
gsl_matrix_transpose_memcpy = _matrix.gsl_matrix_transpose_memcpy

def gsl_matrix_transpose_tricpy(uplo_src, copy_diag, dest, src):
    return _matrix.gsl_matrix_transpose_tricpy(uplo_src, copy_diag, dest, src)
gsl_matrix_transpose_tricpy = _matrix.gsl_matrix_transpose_tricpy

def gsl_matrix_max(m):
    return _matrix.gsl_matrix_max(m)
gsl_matrix_max = _matrix.gsl_matrix_max

def gsl_matrix_min(m):
    return _matrix.gsl_matrix_min(m)
gsl_matrix_min = _matrix.gsl_matrix_min

def gsl_matrix_minmax(m, min_out, max_out):
    return _matrix.gsl_matrix_minmax(m, min_out, max_out)
gsl_matrix_minmax = _matrix.gsl_matrix_minmax

def gsl_matrix_max_index(m, imax, jmax):
    return _matrix.gsl_matrix_max_index(m, imax, jmax)
gsl_matrix_max_index = _matrix.gsl_matrix_max_index

def gsl_matrix_min_index(m, imin, jmin):
    return _matrix.gsl_matrix_min_index(m, imin, jmin)
gsl_matrix_min_index = _matrix.gsl_matrix_min_index

def gsl_matrix_minmax_index(m, imin, jmin, imax, jmax):
    return _matrix.gsl_matrix_minmax_index(m, imin, jmin, imax, jmax)
gsl_matrix_minmax_index = _matrix.gsl_matrix_minmax_index

def gsl_matrix_equal(a, b):
    return _matrix.gsl_matrix_equal(a, b)
gsl_matrix_equal = _matrix.gsl_matrix_equal

def gsl_matrix_isnull(m):
    return _matrix.gsl_matrix_isnull(m)
gsl_matrix_isnull = _matrix.gsl_matrix_isnull

def gsl_matrix_ispos(m):
    return _matrix.gsl_matrix_ispos(m)
gsl_matrix_ispos = _matrix.gsl_matrix_ispos

def gsl_matrix_isneg(m):
    return _matrix.gsl_matrix_isneg(m)
gsl_matrix_isneg = _matrix.gsl_matrix_isneg

def gsl_matrix_isnonneg(m):
    return _matrix.gsl_matrix_isnonneg(m)
gsl_matrix_isnonneg = _matrix.gsl_matrix_isnonneg

def gsl_matrix_add(a, b):
    return _matrix.gsl_matrix_add(a, b)
gsl_matrix_add = _matrix.gsl_matrix_add

def gsl_matrix_sub(a, b):
    return _matrix.gsl_matrix_sub(a, b)
gsl_matrix_sub = _matrix.gsl_matrix_sub

def gsl_matrix_mul_elements(a, b):
    return _matrix.gsl_matrix_mul_elements(a, b)
gsl_matrix_mul_elements = _matrix.gsl_matrix_mul_elements

def gsl_matrix_div_elements(a, b):
    return _matrix.gsl_matrix_div_elements(a, b)
gsl_matrix_div_elements = _matrix.gsl_matrix_div_elements

def gsl_matrix_scale(a, x):
    return _matrix.gsl_matrix_scale(a, x)
gsl_matrix_scale = _matrix.gsl_matrix_scale

def gsl_matrix_add_constant(a, x):
    return _matrix.gsl_matrix_add_constant(a, x)
gsl_matrix_add_constant = _matrix.gsl_matrix_add_constant

def gsl_matrix_add_diagonal(a, x):
    return _matrix.gsl_matrix_add_diagonal(a, x)
gsl_matrix_add_diagonal = _matrix.gsl_matrix_add_diagonal

def gsl_matrix_get_row(v, m, i):
    return _matrix.gsl_matrix_get_row(v, m, i)
gsl_matrix_get_row = _matrix.gsl_matrix_get_row

def gsl_matrix_get_col(v, m, j):
    return _matrix.gsl_matrix_get_col(v, m, j)
gsl_matrix_get_col = _matrix.gsl_matrix_get_col

def gsl_matrix_set_row(m, i, v):
    return _matrix.gsl_matrix_set_row(m, i, v)
gsl_matrix_set_row = _matrix.gsl_matrix_set_row

def gsl_matrix_set_col(m, j, v):
    return _matrix.gsl_matrix_set_col(m, j, v)
gsl_matrix_set_col = _matrix.gsl_matrix_set_col

def gsl_matrix_get(m, i, j):
    return _matrix.gsl_matrix_get(m, i, j)
gsl_matrix_get = _matrix.gsl_matrix_get

def gsl_matrix_set(m, i, j, x):
    return _matrix.gsl_matrix_set(m, i, j, x)
gsl_matrix_set = _matrix.gsl_matrix_set

def gsl_matrix_ptr(m, i, j):
    return _matrix.gsl_matrix_ptr(m, i, j)
gsl_matrix_ptr = _matrix.gsl_matrix_ptr

def gsl_matrix_const_ptr(m, i, j):
    return _matrix.gsl_matrix_const_ptr(m, i, j)
gsl_matrix_const_ptr = _matrix.gsl_matrix_const_ptr
class gsl_matrix_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gsl_matrix_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gsl_matrix_float, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size1"] = _matrix.gsl_matrix_float_size1_set
    __swig_getmethods__["size1"] = _matrix.gsl_matrix_float_size1_get
    if _newclass:
        size1 = _swig_property(_matrix.gsl_matrix_float_size1_get, _matrix.gsl_matrix_float_size1_set)
    __swig_setmethods__["size2"] = _matrix.gsl_matrix_float_size2_set
    __swig_getmethods__["size2"] = _matrix.gsl_matrix_float_size2_get
    if _newclass:
        size2 = _swig_property(_matrix.gsl_matrix_float_size2_get, _matrix.gsl_matrix_float_size2_set)
    __swig_setmethods__["tda"] = _matrix.gsl_matrix_float_tda_set
    __swig_getmethods__["tda"] = _matrix.gsl_matrix_float_tda_get
    if _newclass:
        tda = _swig_property(_matrix.gsl_matrix_float_tda_get, _matrix.gsl_matrix_float_tda_set)
    __swig_setmethods__["data"] = _matrix.gsl_matrix_float_data_set
    __swig_getmethods__["data"] = _matrix.gsl_matrix_float_data_get
    if _newclass:
        data = _swig_property(_matrix.gsl_matrix_float_data_get, _matrix.gsl_matrix_float_data_set)
    __swig_setmethods__["block"] = _matrix.gsl_matrix_float_block_set
    __swig_getmethods__["block"] = _matrix.gsl_matrix_float_block_get
    if _newclass:
        block = _swig_property(_matrix.gsl_matrix_float_block_get, _matrix.gsl_matrix_float_block_set)
    __swig_setmethods__["owner"] = _matrix.gsl_matrix_float_owner_set
    __swig_getmethods__["owner"] = _matrix.gsl_matrix_float_owner_get
    if _newclass:
        owner = _swig_property(_matrix.gsl_matrix_float_owner_get, _matrix.gsl_matrix_float_owner_set)

    def __init__(self, m, n):
        this = _matrix.new_gsl_matrix_float(m, n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrix.delete_gsl_matrix_float
    __del__ = lambda self: None

    def nrows(self):
        return _matrix.gsl_matrix_float_nrows(self)

    def ncols(self):
        return _matrix.gsl_matrix_float_ncols(self)

    def __getitem__(self, m, n):
        return _matrix.gsl_matrix_float___getitem__(self, m, n)

    def __setitem__(self, item, n, m):
        return _matrix.gsl_matrix_float___setitem__(self, item, n, m)
gsl_matrix_float_swigregister = _matrix.gsl_matrix_float_swigregister
gsl_matrix_float_swigregister(gsl_matrix_float)

class _gsl_matrix_float_view(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gsl_matrix_float_view, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gsl_matrix_float_view, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrix"] = _matrix._gsl_matrix_float_view_matrix_set
    __swig_getmethods__["matrix"] = _matrix._gsl_matrix_float_view_matrix_get
    if _newclass:
        matrix = _swig_property(_matrix._gsl_matrix_float_view_matrix_get, _matrix._gsl_matrix_float_view_matrix_set)

    def __init__(self):
        this = _matrix.new__gsl_matrix_float_view()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrix.delete__gsl_matrix_float_view
    __del__ = lambda self: None
_gsl_matrix_float_view_swigregister = _matrix._gsl_matrix_float_view_swigregister
_gsl_matrix_float_view_swigregister(_gsl_matrix_float_view)

class _gsl_matrix_float_const_view(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _gsl_matrix_float_const_view, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _gsl_matrix_float_const_view, name)
    __repr__ = _swig_repr
    __swig_setmethods__["matrix"] = _matrix._gsl_matrix_float_const_view_matrix_set
    __swig_getmethods__["matrix"] = _matrix._gsl_matrix_float_const_view_matrix_get
    if _newclass:
        matrix = _swig_property(_matrix._gsl_matrix_float_const_view_matrix_get, _matrix._gsl_matrix_float_const_view_matrix_set)

    def __init__(self):
        this = _matrix.new__gsl_matrix_float_const_view()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrix.delete__gsl_matrix_float_const_view
    __del__ = lambda self: None
_gsl_matrix_float_const_view_swigregister = _matrix._gsl_matrix_float_const_view_swigregister
_gsl_matrix_float_const_view_swigregister(_gsl_matrix_float_const_view)


def gsl_matrix_float_alloc(n1, n2):
    return _matrix.gsl_matrix_float_alloc(n1, n2)
gsl_matrix_float_alloc = _matrix.gsl_matrix_float_alloc

def gsl_matrix_float_calloc(n1, n2):
    return _matrix.gsl_matrix_float_calloc(n1, n2)
gsl_matrix_float_calloc = _matrix.gsl_matrix_float_calloc

def gsl_matrix_float_alloc_from_block(b, offset, n1, n2, d2):
    return _matrix.gsl_matrix_float_alloc_from_block(b, offset, n1, n2, d2)
gsl_matrix_float_alloc_from_block = _matrix.gsl_matrix_float_alloc_from_block

def gsl_matrix_float_alloc_from_matrix(m, k1, k2, n1, n2):
    return _matrix.gsl_matrix_float_alloc_from_matrix(m, k1, k2, n1, n2)
gsl_matrix_float_alloc_from_matrix = _matrix.gsl_matrix_float_alloc_from_matrix

def gsl_vector_float_alloc_row_from_matrix(m, i):
    return _matrix.gsl_vector_float_alloc_row_from_matrix(m, i)
gsl_vector_float_alloc_row_from_matrix = _matrix.gsl_vector_float_alloc_row_from_matrix

def gsl_vector_float_alloc_col_from_matrix(m, j):
    return _matrix.gsl_vector_float_alloc_col_from_matrix(m, j)
gsl_vector_float_alloc_col_from_matrix = _matrix.gsl_vector_float_alloc_col_from_matrix

def gsl_matrix_float_free(m):
    return _matrix.gsl_matrix_float_free(m)
gsl_matrix_float_free = _matrix.gsl_matrix_float_free

def gsl_matrix_float_submatrix(m, i, j, n1, n2):
    return _matrix.gsl_matrix_float_submatrix(m, i, j, n1, n2)
gsl_matrix_float_submatrix = _matrix.gsl_matrix_float_submatrix

def gsl_matrix_float_row(m, i):
    return _matrix.gsl_matrix_float_row(m, i)
gsl_matrix_float_row = _matrix.gsl_matrix_float_row

def gsl_matrix_float_column(m, j):
    return _matrix.gsl_matrix_float_column(m, j)
gsl_matrix_float_column = _matrix.gsl_matrix_float_column

def gsl_matrix_float_diagonal(m):
    return _matrix.gsl_matrix_float_diagonal(m)
gsl_matrix_float_diagonal = _matrix.gsl_matrix_float_diagonal

def gsl_matrix_float_subdiagonal(m, k):
    return _matrix.gsl_matrix_float_subdiagonal(m, k)
gsl_matrix_float_subdiagonal = _matrix.gsl_matrix_float_subdiagonal

def gsl_matrix_float_superdiagonal(m, k):
    return _matrix.gsl_matrix_float_superdiagonal(m, k)
gsl_matrix_float_superdiagonal = _matrix.gsl_matrix_float_superdiagonal

def gsl_matrix_float_subrow(m, i, offset, n):
    return _matrix.gsl_matrix_float_subrow(m, i, offset, n)
gsl_matrix_float_subrow = _matrix.gsl_matrix_float_subrow

def gsl_matrix_float_subcolumn(m, j, offset, n):
    return _matrix.gsl_matrix_float_subcolumn(m, j, offset, n)
gsl_matrix_float_subcolumn = _matrix.gsl_matrix_float_subcolumn

def gsl_matrix_float_view_array(base, n1, n2):
    return _matrix.gsl_matrix_float_view_array(base, n1, n2)
gsl_matrix_float_view_array = _matrix.gsl_matrix_float_view_array

def gsl_matrix_float_view_array_with_tda(base, n1, n2, tda):
    return _matrix.gsl_matrix_float_view_array_with_tda(base, n1, n2, tda)
gsl_matrix_float_view_array_with_tda = _matrix.gsl_matrix_float_view_array_with_tda

def gsl_matrix_float_view_vector(v, n1, n2):
    return _matrix.gsl_matrix_float_view_vector(v, n1, n2)
gsl_matrix_float_view_vector = _matrix.gsl_matrix_float_view_vector

def gsl_matrix_float_view_vector_with_tda(v, n1, n2, tda):
    return _matrix.gsl_matrix_float_view_vector_with_tda(v, n1, n2, tda)
gsl_matrix_float_view_vector_with_tda = _matrix.gsl_matrix_float_view_vector_with_tda

def gsl_matrix_float_const_submatrix(m, i, j, n1, n2):
    return _matrix.gsl_matrix_float_const_submatrix(m, i, j, n1, n2)
gsl_matrix_float_const_submatrix = _matrix.gsl_matrix_float_const_submatrix

def gsl_matrix_float_const_row(m, i):
    return _matrix.gsl_matrix_float_const_row(m, i)
gsl_matrix_float_const_row = _matrix.gsl_matrix_float_const_row

def gsl_matrix_float_const_column(m, j):
    return _matrix.gsl_matrix_float_const_column(m, j)
gsl_matrix_float_const_column = _matrix.gsl_matrix_float_const_column

def gsl_matrix_float_const_diagonal(m):
    return _matrix.gsl_matrix_float_const_diagonal(m)
gsl_matrix_float_const_diagonal = _matrix.gsl_matrix_float_const_diagonal

def gsl_matrix_float_const_subdiagonal(m, k):
    return _matrix.gsl_matrix_float_const_subdiagonal(m, k)
gsl_matrix_float_const_subdiagonal = _matrix.gsl_matrix_float_const_subdiagonal

def gsl_matrix_float_const_superdiagonal(m, k):
    return _matrix.gsl_matrix_float_const_superdiagonal(m, k)
gsl_matrix_float_const_superdiagonal = _matrix.gsl_matrix_float_const_superdiagonal

def gsl_matrix_float_const_subrow(m, i, offset, n):
    return _matrix.gsl_matrix_float_const_subrow(m, i, offset, n)
gsl_matrix_float_const_subrow = _matrix.gsl_matrix_float_const_subrow

def gsl_matrix_float_const_subcolumn(m, j, offset, n):
    return _matrix.gsl_matrix_float_const_subcolumn(m, j, offset, n)
gsl_matrix_float_const_subcolumn = _matrix.gsl_matrix_float_const_subcolumn

def gsl_matrix_float_const_view_array(base, n1, n2):
    return _matrix.gsl_matrix_float_const_view_array(base, n1, n2)
gsl_matrix_float_const_view_array = _matrix.gsl_matrix_float_const_view_array

def gsl_matrix_float_const_view_array_with_tda(base, n1, n2, tda):
    return _matrix.gsl_matrix_float_const_view_array_with_tda(base, n1, n2, tda)
gsl_matrix_float_const_view_array_with_tda = _matrix.gsl_matrix_float_const_view_array_with_tda

def gsl_matrix_float_const_view_vector(v, n1, n2):
    return _matrix.gsl_matrix_float_const_view_vector(v, n1, n2)
gsl_matrix_float_const_view_vector = _matrix.gsl_matrix_float_const_view_vector

def gsl_matrix_float_const_view_vector_with_tda(v, n1, n2, tda):
    return _matrix.gsl_matrix_float_const_view_vector_with_tda(v, n1, n2, tda)
gsl_matrix_float_const_view_vector_with_tda = _matrix.gsl_matrix_float_const_view_vector_with_tda

def gsl_matrix_float_set_zero(m):
    return _matrix.gsl_matrix_float_set_zero(m)
gsl_matrix_float_set_zero = _matrix.gsl_matrix_float_set_zero

def gsl_matrix_float_set_identity(m):
    return _matrix.gsl_matrix_float_set_identity(m)
gsl_matrix_float_set_identity = _matrix.gsl_matrix_float_set_identity

def gsl_matrix_float_set_all(m, x):
    return _matrix.gsl_matrix_float_set_all(m, x)
gsl_matrix_float_set_all = _matrix.gsl_matrix_float_set_all

def gsl_matrix_float_fread(stream, m):
    return _matrix.gsl_matrix_float_fread(stream, m)
gsl_matrix_float_fread = _matrix.gsl_matrix_float_fread

def gsl_matrix_float_fwrite(stream, m):
    return _matrix.gsl_matrix_float_fwrite(stream, m)
gsl_matrix_float_fwrite = _matrix.gsl_matrix_float_fwrite

def gsl_matrix_float_fscanf(stream, m):
    return _matrix.gsl_matrix_float_fscanf(stream, m)
gsl_matrix_float_fscanf = _matrix.gsl_matrix_float_fscanf

def gsl_matrix_float_fprintf(stream, m, format):
    return _matrix.gsl_matrix_float_fprintf(stream, m, format)
gsl_matrix_float_fprintf = _matrix.gsl_matrix_float_fprintf

def gsl_matrix_float_memcpy(dest, src):
    return _matrix.gsl_matrix_float_memcpy(dest, src)
gsl_matrix_float_memcpy = _matrix.gsl_matrix_float_memcpy

def gsl_matrix_float_swap(m1, m2):
    return _matrix.gsl_matrix_float_swap(m1, m2)
gsl_matrix_float_swap = _matrix.gsl_matrix_float_swap

def gsl_matrix_float_tricpy(uplo_src, copy_diag, dest, src):
    return _matrix.gsl_matrix_float_tricpy(uplo_src, copy_diag, dest, src)
gsl_matrix_float_tricpy = _matrix.gsl_matrix_float_tricpy

def gsl_matrix_float_swap_rows(m, i, j):
    return _matrix.gsl_matrix_float_swap_rows(m, i, j)
gsl_matrix_float_swap_rows = _matrix.gsl_matrix_float_swap_rows

def gsl_matrix_float_swap_columns(m, i, j):
    return _matrix.gsl_matrix_float_swap_columns(m, i, j)
gsl_matrix_float_swap_columns = _matrix.gsl_matrix_float_swap_columns

def gsl_matrix_float_swap_rowcol(m, i, j):
    return _matrix.gsl_matrix_float_swap_rowcol(m, i, j)
gsl_matrix_float_swap_rowcol = _matrix.gsl_matrix_float_swap_rowcol

def gsl_matrix_float_transpose(m):
    return _matrix.gsl_matrix_float_transpose(m)
gsl_matrix_float_transpose = _matrix.gsl_matrix_float_transpose

def gsl_matrix_float_transpose_memcpy(dest, src):
    return _matrix.gsl_matrix_float_transpose_memcpy(dest, src)
gsl_matrix_float_transpose_memcpy = _matrix.gsl_matrix_float_transpose_memcpy

def gsl_matrix_float_transpose_tricpy(uplo_src, copy_diag, dest, src):
    return _matrix.gsl_matrix_float_transpose_tricpy(uplo_src, copy_diag, dest, src)
gsl_matrix_float_transpose_tricpy = _matrix.gsl_matrix_float_transpose_tricpy

def gsl_matrix_float_max(m):
    return _matrix.gsl_matrix_float_max(m)
gsl_matrix_float_max = _matrix.gsl_matrix_float_max

def gsl_matrix_float_min(m):
    return _matrix.gsl_matrix_float_min(m)
gsl_matrix_float_min = _matrix.gsl_matrix_float_min

def gsl_matrix_float_minmax(m, min_out, max_out):
    return _matrix.gsl_matrix_float_minmax(m, min_out, max_out)
gsl_matrix_float_minmax = _matrix.gsl_matrix_float_minmax

def gsl_matrix_float_max_index(m, imax, jmax):
    return _matrix.gsl_matrix_float_max_index(m, imax, jmax)
gsl_matrix_float_max_index = _matrix.gsl_matrix_float_max_index

def gsl_matrix_float_min_index(m, imin, jmin):
    return _matrix.gsl_matrix_float_min_index(m, imin, jmin)
gsl_matrix_float_min_index = _matrix.gsl_matrix_float_min_index

def gsl_matrix_float_minmax_index(m, imin, jmin, imax, jmax):
    return _matrix.gsl_matrix_float_minmax_index(m, imin, jmin, imax, jmax)
gsl_matrix_float_minmax_index = _matrix.gsl_matrix_float_minmax_index

def gsl_matrix_float_equal(a, b):
    return _matrix.gsl_matrix_float_equal(a, b)
gsl_matrix_float_equal = _matrix.gsl_matrix_float_equal

def gsl_matrix_float_isnull(m):
    return _matrix.gsl_matrix_float_isnull(m)
gsl_matrix_float_isnull = _matrix.gsl_matrix_float_isnull

def gsl_matrix_float_ispos(m):
    return _matrix.gsl_matrix_float_ispos(m)
gsl_matrix_float_ispos = _matrix.gsl_matrix_float_ispos

def gsl_matrix_float_isneg(m):
    return _matrix.gsl_matrix_float_isneg(m)
gsl_matrix_float_isneg = _matrix.gsl_matrix_float_isneg

def gsl_matrix_float_isnonneg(m):
    return _matrix.gsl_matrix_float_isnonneg(m)
gsl_matrix_float_isnonneg = _matrix.gsl_matrix_float_isnonneg

def gsl_matrix_float_add(a, b):
    return _matrix.gsl_matrix_float_add(a, b)
gsl_matrix_float_add = _matrix.gsl_matrix_float_add

def gsl_matrix_float_sub(a, b):
    return _matrix.gsl_matrix_float_sub(a, b)
gsl_matrix_float_sub = _matrix.gsl_matrix_float_sub

def gsl_matrix_float_mul_elements(a, b):
    return _matrix.gsl_matrix_float_mul_elements(a, b)
gsl_matrix_float_mul_elements = _matrix.gsl_matrix_float_mul_elements

def gsl_matrix_float_div_elements(a, b):
    return _matrix.gsl_matrix_float_div_elements(a, b)
gsl_matrix_float_div_elements = _matrix.gsl_matrix_float_div_elements

def gsl_matrix_float_scale(a, x):
    return _matrix.gsl_matrix_float_scale(a, x)
gsl_matrix_float_scale = _matrix.gsl_matrix_float_scale

def gsl_matrix_float_add_constant(a, x):
    return _matrix.gsl_matrix_float_add_constant(a, x)
gsl_matrix_float_add_constant = _matrix.gsl_matrix_float_add_constant

def gsl_matrix_float_add_diagonal(a, x):
    return _matrix.gsl_matrix_float_add_diagonal(a, x)
gsl_matrix_float_add_diagonal = _matrix.gsl_matrix_float_add_diagonal

def gsl_matrix_float_get_row(v, m, i):
    return _matrix.gsl_matrix_float_get_row(v, m, i)
gsl_matrix_float_get_row = _matrix.gsl_matrix_float_get_row

def gsl_matrix_float_get_col(v, m, j):
    return _matrix.gsl_matrix_float_get_col(v, m, j)
gsl_matrix_float_get_col = _matrix.gsl_matrix_float_get_col

def gsl_matrix_float_set_row(m, i, v):
    return _matrix.gsl_matrix_float_set_row(m, i, v)
gsl_matrix_float_set_row = _matrix.gsl_matrix_float_set_row

def gsl_matrix_float_set_col(m, j, v):
    return _matrix.gsl_matrix_float_set_col(m, j, v)
gsl_matrix_float_set_col = _matrix.gsl_matrix_float_set_col

def gsl_matrix_float_get(m, i, j):
    return _matrix.gsl_matrix_float_get(m, i, j)
gsl_matrix_float_get = _matrix.gsl_matrix_float_get

def gsl_matrix_float_set(m, i, j, x):
    return _matrix.gsl_matrix_float_set(m, i, j, x)
gsl_matrix_float_set = _matrix.gsl_matrix_float_set

def gsl_matrix_float_ptr(m, i, j):
    return _matrix.gsl_matrix_float_ptr(m, i, j)
gsl_matrix_float_ptr = _matrix.gsl_matrix_float_ptr

def gsl_matrix_float_const_ptr(m, i, j):
    return _matrix.gsl_matrix_float_const_ptr(m, i, j)
gsl_matrix_float_const_ptr = _matrix.gsl_matrix_float_const_ptr

def gsl_matrix_float_load(m, filename, old=False):
    return _matrix.gsl_matrix_float_load(m, filename, old)
gsl_matrix_float_load = _matrix.gsl_matrix_float_load

def gsl_matrix_float_resize(m, size1, size2):
    return _matrix.gsl_matrix_float_resize(m, size1, size2)
gsl_matrix_float_resize = _matrix.gsl_matrix_float_resize
# This file is compatible with both classic and new-style classes.


